{"version":3,"file":"runs.js","sourceRoot":"","sources":["../../../src/agents/runs.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Client } from \"@azure-rest/core-client\";\nimport { operationOptionsToRequestParameters } from \"@azure-rest/core-client\";\nimport type * as GeneratedParameters from \"../generated/src/parameters.js\";\nimport type * as CustomOutputModels from \"../customization/outputModels.js\";\nimport type * as CustomModels from \"../customization/models.js\";\nimport {\n  validateLimit,\n  validateMessages,\n  validateMetadata,\n  validateOrder,\n  validateRunId,\n  validateThreadId,\n  validateTools,\n  validateTruncationStrategy,\n} from \"./inputValidations.js\";\nimport { TracingUtility } from \"../tracing.js\";\nimport {\n  traceEndCreateOrUpdateRun,\n  traceEndSubmitToolOutputsToRun,\n  traceStartCreateRun,\n  traceStartCreateThreadAndRun,\n  traceStartSubmitToolOutputsToRun,\n} from \"./runTrace.js\";\nimport { traceStartAgentGeneric } from \"./traceUtility.js\";\nimport {\n  createRunStreaming,\n  createThreadAndRunStreaming,\n  submitToolOutputsToRunStreaming,\n} from \"./streaming.js\";\nimport type { AgentEventMessageStream } from \"./streamingModels.js\";\nimport type {\n  AgentRunResponse,\n  CreateRunOptionalParams,\n  CancelRunOptionalParams,\n  CreateAndRunThreadOptionalParams,\n  GetRunOptionalParams,\n  ListRunQueryOptionalParams,\n  SubmitToolOutputsToRunOptionalParams,\n  UpdateRunOptionalParams,\n} from \"./customModels.js\";\nimport * as ConverterToWire from \"../customization/convertModelsToWrite.js\";\nimport * as ConvertFromWire from \"../customization/convertOutputModelsFromWire.js\";\nimport { convertToListQueryParameters } from \"../customization/convertParametersToWire.js\";\nimport { createOpenAIError } from \"./openAIError.js\";\n\nconst expectedStatuses = [\"200\"];\n\n/** Creates and starts a new run of the specified thread using the specified agent. */\nexport function createRun(\n  context: Client,\n  threadId: string,\n  assistantId: string,\n  options: CreateRunOptionalParams,\n): AgentRunResponse {\n  const createRunOptions: GeneratedParameters.CreateRunParameters = {\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      ...ConverterToWire.convertCreateRunOptions({ ...options, assistantId }),\n      stream: false,\n    },\n  };\n  validateThreadId(threadId);\n  validateCreateRunParameters(createRunOptions);\n\n  async function executeCreateRun(): Promise<CustomOutputModels.ThreadRunOutput> {\n    const output = await TracingUtility.withSpan(\n      \"CreateRun\",\n      createRunOptions,\n      async (updateOptions) => {\n        const result = await context.path(\"/threads/{threadId}/runs\", threadId).post(updateOptions);\n        if (!expectedStatuses.includes(result.status)) {\n          const error = createOpenAIError(result);\n          throw error;\n        }\n        return result.body;\n      },\n      (span, updatedOptions) => traceStartCreateRun(span, updatedOptions, threadId),\n      traceEndCreateOrUpdateRun,\n    );\n    return ConvertFromWire.convertThreadRunOutput(output);\n  }\n\n  return {\n    then: function (onFulfilled, onRejected) {\n      return executeCreateRun().then(onFulfilled, onRejected).catch(onRejected);\n    },\n    async stream(): Promise<AgentEventMessageStream> {\n      return createRunStreaming(context, threadId, createRunOptions);\n    },\n  };\n}\n\n/** Gets a list of runs for a specified thread. */\nexport async function listRuns(\n  context: Client,\n  threadId: string,\n  options: ListRunQueryOptionalParams = {},\n): Promise<CustomOutputModels.OpenAIPageableListOfThreadRunOutput> {\n  const listRunOptions: GeneratedParameters.ListRunsParameters = {\n    ...operationOptionsToRequestParameters(options),\n    queryParameters: convertToListQueryParameters(options),\n  };\n\n  validateListRunsParameters(threadId, options);\n  return TracingUtility.withSpan(\n    \"ListRuns\",\n    listRunOptions || {},\n    async (updateOptions) => {\n      const result = await context.path(\"/threads/{threadId}/runs\", threadId).get(updateOptions);\n      if (!expectedStatuses.includes(result.status)) {\n        throw createOpenAIError(result);\n      }\n      return ConvertFromWire.convertOpenAIPageableListOfThreadRunOutput(result.body);\n    },\n    (span, updatedOptions) =>\n      traceStartAgentGeneric(span, {\n        ...updatedOptions,\n        tracingAttributeOptions: { threadId: threadId },\n      }),\n  );\n}\n\n/** Gets an existing run from an existing thread. */\nexport async function getRun(\n  context: Client,\n  threadId: string,\n  runId: string,\n  options: GetRunOptionalParams = {},\n): Promise<CustomOutputModels.ThreadRunOutput> {\n  validateThreadId(threadId);\n  validateRunId(runId);\n  const getRunOptions: GeneratedParameters.GetRunParameters = {\n    ...operationOptionsToRequestParameters(options),\n  };\n  return TracingUtility.withSpan(\n    \"GetRun\",\n    getRunOptions,\n    async (updateOptions) => {\n      const result = await context\n        .path(\"/threads/{threadId}/runs/{runId}\", threadId, runId)\n        .get(updateOptions);\n      if (!expectedStatuses.includes(result.status)) {\n        throw createOpenAIError(result);\n      }\n      return ConvertFromWire.convertThreadRunOutput(result.body);\n    },\n    (span, updatedOptions) =>\n      traceStartAgentGeneric(span, {\n        ...updatedOptions,\n        tracingAttributeOptions: { threadId: threadId, runId: runId },\n      }),\n  );\n}\n\n/** Modifies an existing thread run. */\nexport async function updateRun(\n  context: Client,\n  threadId: string,\n  runId: string,\n  options: UpdateRunOptionalParams = {},\n): Promise<CustomOutputModels.ThreadRunOutput> {\n  const updateRunOptions: GeneratedParameters.UpdateRunParameters = {\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      metadata: options?.metadata,\n    },\n  };\n\n  validateUpdateRunParameters(threadId, runId, updateRunOptions);\n  const response = await TracingUtility.withSpan(\n    \"UpdateRun\",\n    updateRunOptions,\n    async (updateOptions) => {\n      const result = await context\n        .path(\"/threads/{threadId}/runs/{runId}\", threadId, runId)\n        .post(updateOptions);\n      if (!expectedStatuses.includes(result.status)) {\n        throw createOpenAIError(result);\n      }\n      return result.body;\n    },\n    (span, updatedOptions) =>\n      traceStartAgentGeneric(span, {\n        ...updatedOptions,\n        tracingAttributeOptions: { threadId: threadId, runId: runId },\n      }),\n    traceEndCreateOrUpdateRun,\n  );\n\n  return ConvertFromWire.convertThreadRunOutput(response);\n}\n\n/** Submits outputs from tools as requested by tool calls in a run. Runs that need submitted tool outputs will have a status of 'requires_action' with a required_action.type of 'submit_tool_outputs'. */\nexport function submitToolOutputsToRun(\n  context: Client,\n  threadId: string,\n  runId: string,\n  toolOutputs: Array<CustomModels.ToolOutput>,\n  options: SubmitToolOutputsToRunOptionalParams = {},\n): AgentRunResponse {\n  validateThreadId(threadId);\n  validateRunId(runId);\n  const submitToolOutputsOptions: GeneratedParameters.SubmitToolOutputsToRunParameters = {\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      tool_outputs: toolOutputs?.map(ConverterToWire.convertToolOutput),\n      stream: false,\n    },\n  };\n\n  async function executeSubmitToolOutputsToRun(): Promise<CustomOutputModels.ThreadRunOutput> {\n    const response = await TracingUtility.withSpan(\n      \"SubmitToolOutputsToRun\",\n      submitToolOutputsOptions,\n      async (updateOptions) => {\n        const result = await context\n          .path(\"/threads/{threadId}/runs/{runId}/submit_tool_outputs\", threadId, runId)\n          .post(updateOptions);\n        if (!expectedStatuses.includes(result.status)) {\n          throw createOpenAIError(result);\n        }\n        return result.body;\n      },\n      (span, updatedOptions) =>\n        traceStartSubmitToolOutputsToRun(span, updatedOptions, threadId, runId),\n      traceEndSubmitToolOutputsToRun,\n    );\n    return ConvertFromWire.convertThreadRunOutput(response);\n  }\n\n  return {\n    then: function (onFulfilled, onrejected) {\n      return executeSubmitToolOutputsToRun().then(onFulfilled, onrejected).catch(onrejected);\n    },\n    async stream(): Promise<AgentEventMessageStream> {\n      return submitToolOutputsToRunStreaming(context, threadId, runId, submitToolOutputsOptions);\n    },\n  };\n}\n\n/** Cancels a run of an in progress thread. */\nexport async function cancelRun(\n  context: Client,\n  threadId: string,\n  runId: string,\n  options: CancelRunOptionalParams = {},\n): Promise<CustomOutputModels.ThreadRunOutput> {\n  validateThreadId(threadId);\n  validateRunId(runId);\n  const cancelRunOptions: GeneratedParameters.CancelRunParameters = {\n    ...operationOptionsToRequestParameters(options),\n  };\n  return TracingUtility.withSpan(\"CancelRun\", cancelRunOptions, async (updateOptions) => {\n    const result = await context\n      .path(\"/threads/{threadId}/runs/{runId}/cancel\", threadId, runId)\n      .post(updateOptions);\n    if (!expectedStatuses.includes(result.status)) {\n      throw createOpenAIError(result);\n    }\n    return ConvertFromWire.convertThreadRunOutput(result.body);\n  });\n}\n\n/** Creates a new thread and immediately starts a run of that thread. */\nexport function createThreadAndRun(\n  context: Client,\n  assistantId: string,\n  options: CreateAndRunThreadOptionalParams,\n): AgentRunResponse {\n  const createThreadAndRunOptions: GeneratedParameters.CreateThreadAndRunParameters = {\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      ...ConverterToWire.convertCreateAndRunThreadOptions({ ...options, assistantId }),\n      stream: false,\n    },\n  };\n\n  validateCreateThreadAndRunParameters(createThreadAndRunOptions);\n\n  async function executeCreateThreadAndRun(): Promise<CustomOutputModels.ThreadRunOutput> {\n    const response = await TracingUtility.withSpan(\n      \"CreateThreadAndRun\",\n      createThreadAndRunOptions,\n      async (updateOptions) => {\n        const result = await context.path(\"/threads/runs\").post(updateOptions);\n        if (!expectedStatuses.includes(result.status)) {\n          throw createOpenAIError(result);\n        }\n\n        return result.body;\n      },\n      traceStartCreateThreadAndRun,\n      traceEndCreateOrUpdateRun,\n    );\n\n    return ConvertFromWire.convertThreadRunOutput(response);\n  }\n\n  return {\n    then: function (onFulfilled, onrejected) {\n      return executeCreateThreadAndRun().then(onFulfilled, onrejected).catch(onrejected);\n    },\n    async stream(): Promise<AgentEventMessageStream> {\n      return createThreadAndRunStreaming(context, createThreadAndRunOptions);\n    },\n  };\n}\n\nfunction validateListRunsParameters(\n  thread_id: string,\n  options?: GeneratedParameters.ListRunsParameters,\n): void {\n  validateThreadId(thread_id);\n  if (\n    options?.queryParameters?.limit &&\n    (options.queryParameters.limit < 1 || options.queryParameters.limit > 100)\n  ) {\n    throw new Error(\"Limit must be between 1 and 100\");\n  }\n  if (options?.queryParameters?.limit) {\n    validateLimit(options.queryParameters.limit);\n  }\n  if (options?.queryParameters?.order) {\n    validateOrder(options.queryParameters.order);\n  }\n}\n\nfunction validateUpdateRunParameters(\n  thread_id: string,\n  run_id: string,\n  options?: GeneratedParameters.UpdateRunParameters,\n): void {\n  validateThreadId(thread_id);\n  validateRunId(run_id);\n  if (options?.body.metadata) {\n    validateMetadata(options.body.metadata);\n  }\n}\n\nfunction validateCreateRunParameters(\n  options:\n    | GeneratedParameters.CreateRunParameters\n    | GeneratedParameters.CreateThreadAndRunParameters,\n): void {\n  if (\"additional_messages\" in options.body && options.body.additional_messages) {\n    options.body.additional_messages.forEach((message) => validateMessages(message.role));\n  }\n  if (options.body.tools) {\n    validateTools(options.body.tools);\n  }\n  if (options.body.temperature && (options.body.temperature < 0 || options.body.temperature > 2)) {\n    throw new Error(\"Temperature must be between 0 and 2\");\n  }\n  if (options.body.tool_choice && typeof options.body.tool_choice !== \"string\") {\n    validateTools([options.body.tool_choice]);\n  }\n  if (options.body.truncation_strategy?.type) {\n    validateTruncationStrategy(options.body.truncation_strategy.type);\n  }\n  if (options.body.metadata) {\n    validateMetadata(options.body.metadata);\n  }\n}\n\nfunction validateCreateThreadAndRunParameters(\n  options: GeneratedParameters.CreateThreadAndRunParameters,\n): void {\n  validateCreateRunParameters(options);\n  if (options.body.thread?.messages) {\n    options.body.thread?.messages.forEach((message) => validateMessages(message.role));\n  }\n  if (options.body.tools) {\n    validateTools(options.body.tools);\n  }\n  if (options.body.tool_resources?.code_interpreter) {\n    if (options.body.tool_resources.code_interpreter) {\n      if (\n        options.body.tool_resources.code_interpreter.file_ids &&\n        options.body.tool_resources.code_interpreter.file_ids.length > 20\n      ) {\n        throw new Error(\"A maximum of 20 file IDs are allowed\");\n      }\n    }\n    if (options.body.tool_resources.file_search) {\n      if (\n        options.body.tool_resources.file_search.vector_store_ids &&\n        options.body.tool_resources.file_search.vector_store_ids.length > 1\n      ) {\n        throw new Error(\"Only one vector store ID is allowed\");\n      }\n    }\n    if (options.body.tool_resources.azure_ai_search) {\n      if (\n        options.body.tool_resources.azure_ai_search.indexes &&\n        options.body.tool_resources.azure_ai_search.indexes.length > 1\n      ) {\n        throw new Error(\"Only one index is allowed\");\n      }\n    }\n  }\n}\n"]}
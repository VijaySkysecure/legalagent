{"version":3,"file":"runSteps.js","sourceRoot":"","sources":["../../../src/agents/runSteps.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Client } from \"@azure-rest/core-client\";\nimport { operationOptionsToRequestParameters } from \"@azure-rest/core-client\";\nimport type {\n  OpenAIPageableListOfRunStepOutput,\n  RunStepOutput,\n} from \"../customization/outputModels.js\";\nimport type * as GeneratedParameters from \"../generated/src/parameters.js\";\nimport * as ConverterFromWire from \"../customization/convertOutputModelsFromWire.js\";\nimport {\n  validateLimit,\n  validateOrder,\n  validateRunId,\n  validateThreadId,\n} from \"./inputValidations.js\";\nimport type { GetRunStepOptionalParams, ListRunStepsOptionalParams } from \"./customModels.js\";\nimport { convertToListQueryParameters } from \"../customization/convertParametersToWire.js\";\nimport { createOpenAIError } from \"./openAIError.js\";\n\nconst expectedStatuses = [\"200\"];\n\n/** Gets a single run step from a thread run. */\nexport async function getRunStep(\n  context: Client,\n  threadId: string,\n  runId: string,\n  stepId: string,\n  options: GetRunStepOptionalParams = {},\n): Promise<RunStepOutput> {\n  validateThreadId(threadId);\n  validateRunId(runId);\n  validateStepId(stepId);\n\n  const getOptions: GeneratedParameters.GetRunParameters = {\n    ...operationOptionsToRequestParameters(options),\n  };\n\n  const result = await context\n    .path(\"/threads/{threadId}/runs/{runId}/steps/{stepId}\", threadId, runId, stepId)\n    .get(getOptions);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createOpenAIError(result);\n  }\n  return ConverterFromWire.convertRunStepOutput(result.body);\n}\n\n/** Gets a list of run steps from a thread run. */\nexport async function listRunSteps(\n  context: Client,\n  threadId: string,\n  runId: string,\n  options: ListRunStepsOptionalParams = {},\n): Promise<OpenAIPageableListOfRunStepOutput> {\n  const listOptions: GeneratedParameters.ListRunStepsParameters = {\n    ...operationOptionsToRequestParameters(options),\n    queryParameters: convertToListQueryParameters(options),\n  };\n\n  validateListRunsParameters(threadId, runId, listOptions);\n  const result = await context\n    .path(\"/threads/{threadId}/runs/{runId}/steps\", threadId, runId)\n    .get(listOptions);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createOpenAIError(result);\n  }\n  return ConverterFromWire.convertOpenAIPageableListOfRunStepOutput(result.body);\n}\n\nfunction validateStepId(stepId: string): void {\n  if (!stepId) {\n    throw new Error(\"Step ID is required\");\n  }\n}\n\nfunction validateListRunsParameters(\n  thread_id: string,\n  runId: string,\n  options?: GeneratedParameters.ListRunStepsParameters,\n): void {\n  validateThreadId(thread_id);\n  validateRunId(runId);\n  if (\n    options?.queryParameters?.limit &&\n    (options.queryParameters.limit < 1 || options.queryParameters.limit > 100)\n  ) {\n    throw new Error(\"Limit must be between 1 and 100\");\n  }\n  if (options?.queryParameters?.limit) {\n    validateLimit(options.queryParameters.limit);\n  }\n  if (options?.queryParameters?.order) {\n    validateOrder(options.queryParameters.order);\n  }\n}\n"]}
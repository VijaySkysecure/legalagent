import type { Client } from "@azure-rest/core-client";
import type { OpenAIPageableListOfVectorStoreOutput, VectorStoreDeletionStatusOutput, VectorStoreOutput } from "../customization/outputModels.js";
import { type CreateVectorStoreOptionalParams, type DeleteVectorStoreOptionalParams, type GetVectorStoreOptionalParams, type ListVectorStoresOptionalParams, type UpdateVectorStoreOptionalParams } from "./customModels.js";
import type { OperationState, PollerLike } from "@azure/core-lro";
/** Returns a list of vector stores. */
export declare function listVectorStores(context: Client, options?: ListVectorStoresOptionalParams): Promise<OpenAIPageableListOfVectorStoreOutput>;
/** Creates a vector store. */
export declare function createVectorStore(context: Client, options?: CreateVectorStoreOptionalParams): PollerLike<OperationState<VectorStoreOutput>, VectorStoreOutput>;
/** Returns the vector store object matching the specified ID. */
export declare function getVectorStore(context: Client, vectorStoreId: string, options?: GetVectorStoreOptionalParams): Promise<VectorStoreOutput>;
/** The ID of the vector store to modify. */
export declare function modifyVectorStore(context: Client, vectorStoreId: string, options?: UpdateVectorStoreOptionalParams): Promise<VectorStoreOutput>;
/** Deletes the vector store object matching the specified ID. */
export declare function deleteVectorStore(context: Client, vectorStoreId: string, options?: DeleteVectorStoreOptionalParams): Promise<VectorStoreDeletionStatusOutput>;
/**
 * Creates a vector store and poll.
 */
export declare function createVectorStoreAndPoll(context: Client, options?: CreateVectorStoreOptionalParams): PollerLike<OperationState<VectorStoreOutput>, VectorStoreOutput>;
//# sourceMappingURL=vectorStores.d.ts.map
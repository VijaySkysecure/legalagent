// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { operationOptionsToRequestParameters } from "@azure-rest/core-client";
import { createPoller } from "./poller.js";
import { validateFileStatusFilter, validateLimit, validateOrder, validateVectorStoreId, } from "./inputValidations.js";
import * as ConvertFromWire from "../customization/convertOutputModelsFromWire.js";
import * as ConvertParamsToWire from "../customization/convertParametersToWire.js";
import { createOpenAIError } from "./openAIError.js";
const expectedStatuses = ["200"];
/** Create a vector store file batch. */
export function createVectorStoreFileBatch(context, vectorStoreId, options = {}) {
    var _a;
    return createPoller({
        initOperation: async () => {
            return createVectorStoreFileBatchInternal(context, vectorStoreId, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStoreFileBatch(context, vectorStoreId, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        intervalInMs: (_a = options.pollingOptions) === null || _a === void 0 ? void 0 : _a.sleepIntervalInMs,
    });
}
/** Retrieve a vector store file batch. */
export async function getVectorStoreFileBatch(context, vectorStoreId, batchId, options = {}) {
    validateVectorStoreId(vectorStoreId);
    const result = await context
        .path("/vector_stores/{vectorStoreId}/file_batches/{batchId}", vectorStoreId, batchId)
        .get(options);
    if (!expectedStatuses.includes(result.status)) {
        throw createOpenAIError(result);
    }
    return ConvertFromWire.convertVectorStoreFileBatchOutput(result.body);
}
/** Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. */
export async function cancelVectorStoreFileBatch(context, vectorStoreId, batchId, options = {}) {
    validateVectorStoreId(vectorStoreId);
    const result = await context
        .path("/vector_stores/{vectorStoreId}/file_batches/{batchId}/cancel", vectorStoreId, batchId)
        .post(options);
    if (!expectedStatuses.includes(result.status)) {
        throw createOpenAIError(result);
    }
    return ConvertFromWire.convertVectorStoreFileBatchOutput(result.body);
}
/** Returns a list of vector store files in a batch. */
export async function listVectorStoreFileBatchFiles(context, vectorStoreId, batchId, options = {}) {
    const listOptions = Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { queryParameters: ConvertParamsToWire.convertListVectorStoreFileBatchFilesQueryParamProperties(options) });
    validateVectorStoreId(vectorStoreId);
    validateBatchId(batchId);
    validateListVectorStoreFileBatchFilesParameters(listOptions);
    const result = await context
        .path("/vector_stores/{vectorStoreId}/file_batches/{batchId}/files", vectorStoreId, batchId)
        .get(listOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw createOpenAIError(result);
    }
    return ConvertFromWire.convertOpenAIPageableListOfVectorStoreFileOutput(result.body);
}
/** Create a vector store file batch and poll. */
export function createVectorStoreFileBatchAndPoll(context, vectorStoreId, options = {}) {
    var _a;
    return createPoller({
        initOperation: async () => {
            return createVectorStoreFileBatchInternal(context, vectorStoreId, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStoreFileBatch(context, vectorStoreId, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        intervalInMs: (_a = options.pollingOptions) === null || _a === void 0 ? void 0 : _a.sleepIntervalInMs,
    });
}
export async function createVectorStoreFileBatchInternal(context, vectorStoreId, options = {}) {
    const createOptions = Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), ConvertParamsToWire.convertCreateVectorStoreFileBatchParam({ body: options }));
    validateVectorStoreId(vectorStoreId);
    validateCreateVectorStoreFileBatchParameters(createOptions);
    const result = await context
        .path("/vector_stores/{vectorStoreId}/file_batches", vectorStoreId)
        .post(createOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw createOpenAIError(result);
    }
    return ConvertFromWire.convertVectorStoreFileBatchOutput(result.body);
}
function getLroOperationStatus(result) {
    switch (result.status) {
        case "in_progress":
            return "running";
        case "completed":
            return "succeeded";
        case "cancelled":
            return "canceled";
        default:
            return "failed";
    }
}
function validateBatchId(batchId) {
    if (!batchId) {
        throw new Error("Batch ID is required");
    }
}
function validateCreateVectorStoreFileBatchParameters(options) {
    var _a;
    if (((_a = options === null || options === void 0 ? void 0 : options.body) === null || _a === void 0 ? void 0 : _a.chunking_strategy) &&
        (!options.body.file_ids || options.body.file_ids.length === 0)) {
        throw new Error("Chunking strategy is only applicable if fileIds are included");
    }
}
function validateListVectorStoreFileBatchFilesParameters(options) {
    var _a, _b, _c;
    if ((_a = options === null || options === void 0 ? void 0 : options.queryParameters) === null || _a === void 0 ? void 0 : _a.filter) {
        validateFileStatusFilter(options.queryParameters.filter);
    }
    if ((_b = options === null || options === void 0 ? void 0 : options.queryParameters) === null || _b === void 0 ? void 0 : _b.limit) {
        validateLimit(options.queryParameters.limit);
    }
    if ((_c = options === null || options === void 0 ? void 0 : options.queryParameters) === null || _c === void 0 ? void 0 : _c.order) {
        validateOrder(options.queryParameters.order);
    }
}
//# sourceMappingURL=vectorStoresFileBatches.js.map
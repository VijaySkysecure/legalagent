import type { AgentsApiResponseFormatOption, ThreadMessageOptions, ToolOutput } from "../generated/src/models.js";
import type { RunStepCompletionUsageOutput, ThreadMessageOutput } from "../generated/src/outputModels.js";
import type { OptionsWithTracing, Span, TracingAttributeOptions } from "../tracing.js";
export declare function traceStartAgentGeneric<Options extends OptionsWithTracing>(span: Span, options: Options): void;
export declare function traceEndAgentGeneric<Options extends OptionsWithTracing>(span: Span, _options: Options): void;
export declare function UpdateWithAgentAttributes(attributeOptions: Omit<TracingAttributeOptions, "operationName">): Omit<TracingAttributeOptions, "operationName">;
/**
 * Adds a message event to the span.
 * @param span - The span to add the event to.
 * @param messageAttributes - The attributes of the message event.
 */
export declare function addMessageEvent(span: Span, messageAttributes: ThreadMessageOptions | ThreadMessageOutput, usage?: RunStepCompletionUsageOutput): void;
/**
 * Adds an instruction event to the span.
 * @param span - The span to add the event to.
 * @param instructionAttributes - The attributes of the instruction event.
 */
export declare function addInstructionsEvent(span: Span, instructionAttributes: {
    instructions?: string | null;
    additional_instructions?: string | null;
    threadId?: string;
    agentId?: string;
}): void;
/**
 * Formats the agent API response.
 * @param responseFormat - The response format option.
 * @returns The formatted response as a string, or null/undefined.
 */
export declare function formatAgentApiResponse(responseFormat: AgentsApiResponseFormatOption | null | undefined): string | undefined;
/**
 * Adds a tool messages event to the span
 * @param span - The span to add the event to.
 * @param tool_outputs - List of tool oupts
 */
export declare function addToolMessagesEvent(span: Span, tool_outputs: Array<ToolOutput>): void;
//# sourceMappingURL=traceUtility.d.ts.map
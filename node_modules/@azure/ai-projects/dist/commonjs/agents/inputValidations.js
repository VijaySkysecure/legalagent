"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateVectorStoreDataType = validateVectorStoreDataType;
exports.validateThreadId = validateThreadId;
exports.validateRunId = validateRunId;
exports.validateLimit = validateLimit;
exports.validateOrder = validateOrder;
exports.validateTools = validateTools;
exports.validateMetadata = validateMetadata;
exports.validateToolResources = validateToolResources;
exports.validateVectorStoreId = validateVectorStoreId;
exports.validateFileId = validateFileId;
exports.validateFileStatusFilter = validateFileStatusFilter;
exports.validateMessages = validateMessages;
exports.validateTruncationStrategy = validateTruncationStrategy;
function validateVectorStoreDataType(data_sources) {
    if (!data_sources.some((value) => !["uri_asset", "id_asset"].includes(value.type))) {
        throw new Error("Vector store data type must be one of 'uri_asset', 'id_asset'");
    }
}
function validateThreadId(threadId) {
    if (!threadId) {
        throw new Error("Thread ID is required");
    }
}
function validateRunId(runId) {
    if (!runId) {
        throw new Error("Run ID is required");
    }
}
function validateLimit(limit) {
    if (limit < 1 || limit > 100) {
        throw new Error("Limit must be between 1 and 100");
    }
}
function validateOrder(order) {
    if (!["asc", "desc"].includes(order)) {
        throw new Error("Order must be 'asc' or 'desc'");
    }
}
var Tools;
(function (Tools) {
    Tools["CodeInterpreter"] = "code_interpreter";
    Tools["FileSearch"] = "file_search";
    Tools["Function"] = "function";
    Tools["BingGrounding"] = "bing_grounding";
    Tools["MicrosoftFabric"] = "fabric_dataagent";
    Tools["SharepointGrounding"] = "sharepoint_grounding";
    Tools["AzureAISearch"] = "azure_ai_search";
    Tools["AzureFunction"] = "azure_function";
})(Tools || (Tools = {}));
function validateTools(value) {
    if (value.some((tool) => !Object.values(Tools).includes(tool))) {
        throw new Error("Tool type must be one of 'code_interpreter', 'file_search', 'function', 'bing_grounding', 'fabric_dataagent', 'sharepoint_grounding', 'azure_ai_search', 'azure_function'");
    }
}
function validateMetadata(metadata) {
    if (Object.keys(metadata).length > 16) {
        throw new Error("Only 16 key/value pairs are allowed");
    }
    if (Object.keys(metadata).some((value) => value.length > 64)) {
        throw new Error("Keys must be less than 64 characters");
    }
    if (Object.values(metadata).some((value) => value.length > 512)) {
        throw new Error("Values must be less than 512 characters");
    }
}
function validateToolResources(toolResource) {
    if (toolResource.code_interpreter) {
        if (toolResource.code_interpreter.file_ids &&
            toolResource.code_interpreter.file_ids.length > 20) {
            throw new Error("A maximum of 20 file IDs are allowed");
        }
    }
    if (toolResource.file_search) {
        if (toolResource.file_search.vector_store_ids &&
            toolResource.file_search.vector_store_ids.length > 1) {
            throw new Error("Only one vector store ID is allowed");
        }
    }
    if (toolResource.azure_ai_search) {
        if (toolResource.azure_ai_search.indexes && toolResource.azure_ai_search.indexes.length > 1) {
            throw new Error("Only one index is allowed");
        }
    }
}
function validateVectorStoreId(vectorStoreId) {
    if (!vectorStoreId) {
        throw new Error("Vector store ID is required");
    }
}
function validateFileId(fileId) {
    if (!fileId) {
        throw new Error("File ID is required");
    }
}
var FileBatchStatus;
(function (FileBatchStatus) {
    FileBatchStatus["InProgress"] = "in_progress";
    FileBatchStatus["Completed"] = "completed";
    FileBatchStatus["Failed"] = "failed";
    FileBatchStatus["Cancelled"] = "cancelled";
})(FileBatchStatus || (FileBatchStatus = {}));
function validateFileStatusFilter(filter) {
    if (!Object.values(FileBatchStatus).includes(filter)) {
        throw new Error("File status filter must be one of 'in_progress', 'completed', 'failed', 'cancelled'");
    }
}
var Messages;
(function (Messages) {
    Messages["User"] = "user";
    Messages["Assistants"] = "assistant";
})(Messages || (Messages = {}));
function validateMessages(value) {
    if (!Object.values(Messages).includes(value)) {
        throw new Error("Role must be either 'user' or 'assistant'");
    }
}
var TruncationStrategy;
(function (TruncationStrategy) {
    TruncationStrategy["Auto"] = "auto";
    TruncationStrategy["LastMessages"] = "last_messages";
})(TruncationStrategy || (TruncationStrategy = {}));
function validateTruncationStrategy(value) {
    if (!Object.values(TruncationStrategy).includes(value)) {
        throw new Error("Role must be either 'auto' or 'last_messages'");
    }
}
//# sourceMappingURL=inputValidations.js.map
{"version":3,"file":"traceUtility.js","sourceRoot":"","sources":["../../../src/agents/traceUtility.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  AgentsApiResponseFormat,\n  AgentsApiResponseFormatOption,\n  ThreadMessageOptions,\n  ToolOutput,\n} from \"../generated/src/models.js\";\nimport type {\n  MessageContentOutput,\n  RunStepCompletionUsageOutput,\n  ThreadMessageOutput,\n} from \"../generated/src/outputModels.js\";\nimport type { OptionsWithTracing, Span, TracingAttributeOptions } from \"../tracing.js\";\nimport { TracingAttributes, TracingUtility } from \"../tracing.js\";\nimport { getTelemetryOptions } from \"../telemetry/telemetry.js\";\n\nexport function traceStartAgentGeneric<Options extends OptionsWithTracing>(\n  span: Span,\n  options: Options,\n): void {\n  const attributeOptions = options.tracingAttributeOptions || {};\n  TracingUtility.setSpanAttributes(\n    span,\n    options.tracingAttributeOptions?.operationName || \"Agent_Operation\",\n    UpdateWithAgentAttributes(attributeOptions),\n  );\n}\nexport function traceEndAgentGeneric<Options extends OptionsWithTracing>(\n  span: Span,\n  _options: Options,\n): void {\n  const attributeOptions = {};\n  TracingUtility.updateSpanAttributes(span, UpdateWithAgentAttributes(attributeOptions));\n}\n\nexport function UpdateWithAgentAttributes(\n  attributeOptions: Omit<TracingAttributeOptions, \"operationName\">,\n): Omit<TracingAttributeOptions, \"operationName\"> {\n  attributeOptions.genAiSystem = TracingAttributes.AZ_AI_AGENT_SYSTEM;\n  return attributeOptions;\n}\n\n/**\n * Adds a message event to the span.\n * @param span - The span to add the event to.\n * @param messageAttributes - The attributes of the message event.\n */\nexport function addMessageEvent(\n  span: Span,\n  messageAttributes: ThreadMessageOptions | ThreadMessageOutput,\n  usage?: RunStepCompletionUsageOutput,\n): void {\n  const eventBody: Record<string, unknown> = {};\n  const telemetryOptions = getTelemetryOptions();\n  if (telemetryOptions.enableContentRecording) {\n    eventBody.content = getMessageContent(messageAttributes.content);\n  }\n  eventBody.role = messageAttributes.role;\n  if (messageAttributes.attachments) {\n    eventBody.attachments = messageAttributes.attachments.map((attachment) => {\n      return {\n        id: attachment.file_id,\n        tools: attachment.tools.map((tool) => tool.type),\n      };\n    });\n  }\n  const threadId = (messageAttributes as ThreadMessageOutput).thread_id;\n  const agentId = (messageAttributes as ThreadMessageOutput).assistant_id ?? undefined;\n  const threadRunId = (messageAttributes as ThreadMessageOutput).run_id;\n  const messageStatus = (messageAttributes as ThreadMessageOutput).status;\n  const messageId = (messageAttributes as ThreadMessageOutput).id;\n  const incompleteDetails = (messageAttributes as ThreadMessageOutput).incomplete_details;\n  if (incompleteDetails) {\n    eventBody.incomplete_details = incompleteDetails;\n  }\n  const usagePromptTokens = usage?.prompt_tokens;\n  const usageCompletionTokens = usage?.completion_tokens;\n  const attributes = {\n    eventContent: JSON.stringify(eventBody),\n    threadId,\n    agentId,\n    threadRunId,\n    messageStatus,\n    messageId,\n    usagePromptTokens,\n    usageCompletionTokens,\n    genAiSystem: TracingAttributes.AZ_AI_AGENT_SYSTEM,\n  };\n\n  TracingUtility.addSpanEvent(span, `gen_ai.${messageAttributes.role}.message`, attributes);\n}\n\n/**\n * Adds an instruction event to the span.\n * @param span - The span to add the event to.\n * @param instructionAttributes - The attributes of the instruction event.\n */\nexport function addInstructionsEvent(\n  span: Span,\n  instructionAttributes: {\n    instructions?: string | null;\n    additional_instructions?: string | null;\n    threadId?: string;\n    agentId?: string;\n  },\n): void {\n  const eventBody: Record<string, unknown> = {};\n  if (instructionAttributes.instructions || instructionAttributes.additional_instructions) {\n    eventBody.content =\n      instructionAttributes.instructions && instructionAttributes.additional_instructions\n        ? `${instructionAttributes.instructions} ${instructionAttributes.additional_instructions}`\n        : instructionAttributes.instructions || instructionAttributes.additional_instructions;\n  }\n  const attributes = {\n    eventContent: JSON.stringify(eventBody),\n    threadId: instructionAttributes.threadId,\n    agentId: instructionAttributes.agentId,\n    genAiSystem: TracingAttributes.AZ_AI_AGENT_SYSTEM,\n  };\n  TracingUtility.addSpanEvent(span, \"gen_ai.system.message\", attributes);\n}\n\n/**\n * Formats the agent API response.\n * @param responseFormat - The response format option.\n * @returns The formatted response as a string, or null/undefined.\n */\nexport function formatAgentApiResponse(\n  responseFormat: AgentsApiResponseFormatOption | null | undefined,\n): string | undefined {\n  if (\n    typeof responseFormat === \"string\" ||\n    responseFormat === undefined ||\n    responseFormat === null\n  ) {\n    return responseFormat ?? undefined;\n  }\n  if ((responseFormat as AgentsApiResponseFormat).type) {\n    return (responseFormat as AgentsApiResponseFormat).type ?? undefined;\n  }\n  return undefined;\n}\n\n/**\n * Adds a tool messages event to the span\n * @param span - The span to add the event to.\n * @param tool_outputs - List of tool oupts\n */\nexport function addToolMessagesEvent(span: Span, tool_outputs: Array<ToolOutput>): void {\n  tool_outputs.forEach((tool_output) => {\n    const eventBody = { content: tool_output.output, id: tool_output.tool_call_id };\n    TracingUtility.addSpanEvent(span, \"gen_ai.tool.message\", {\n      eventContent: JSON.stringify(eventBody),\n      genAiSystem: TracingAttributes.AZ_AI_AGENT_SYSTEM,\n    });\n  });\n}\n\nfunction getMessageContent(messageContent: string | MessageContentOutput[]): string | {} {\n  type MessageContentExtended = MessageContentOutput & { [key: string]: any };\n  if (!Array.isArray(messageContent)) {\n    return messageContent;\n  }\n  const contentBody: { [key: string]: any } = {};\n  messageContent.forEach((content) => {\n    const typedContent = content.type;\n    const { value, annotations } = (content as MessageContentExtended)[typedContent];\n    contentBody[typedContent] = { value, annotations };\n  });\n  return contentBody;\n}\n"]}
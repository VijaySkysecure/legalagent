"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAgentsOperations = getAgentsOperations;
const assistants_js_1 = require("./assistants.js");
const files_js_1 = require("./files.js");
const threads_js_1 = require("./threads.js");
const runs_js_1 = require("./runs.js");
const messages_js_1 = require("./messages.js");
const vectorStores_js_1 = require("./vectorStores.js");
const runSteps_js_1 = require("./runSteps.js");
const vectorStoresFiles_js_1 = require("./vectorStoresFiles.js");
const vectorStoresFileBatches_js_1 = require("./vectorStoresFileBatches.js");
function getAgents(context) {
    return {
        createAgent: (model, options) => (0, assistants_js_1.createAgent)(context, model, options),
        listAgents: (options) => (0, assistants_js_1.listAgents)(context, options),
        getAgent: (assistantId, options) => (0, assistants_js_1.getAgent)(context, assistantId, options),
        updateAgent: (assistantId, options) => (0, assistants_js_1.updateAgent)(context, assistantId, options),
        deleteAgent: (assistantId, options) => (0, assistants_js_1.deleteAgent)(context, assistantId, options),
        createThread: (options) => (0, threads_js_1.createThread)(context, options),
        getThread: (threadId, options) => (0, threads_js_1.getThread)(context, threadId, options),
        updateThread: (threadId, options) => (0, threads_js_1.updateThread)(context, threadId, options),
        deleteThread: (threadId, options) => (0, threads_js_1.deleteThread)(context, threadId, options),
        createRun: (threadId, assistantId, options) => (0, runs_js_1.createRun)(context, threadId, assistantId, options !== null && options !== void 0 ? options : {}),
        listRuns: (threadId, options) => (0, runs_js_1.listRuns)(context, threadId, options !== null && options !== void 0 ? options : {}),
        getRun: (threadId, runId, options) => (0, runs_js_1.getRun)(context, threadId, runId, options),
        updateRun: (threadId, runId, options) => (0, runs_js_1.updateRun)(context, threadId, runId, options),
        submitToolOutputsToRun: (threadId, runId, toolOutputs, options) => (0, runs_js_1.submitToolOutputsToRun)(context, threadId, runId, toolOutputs, options),
        cancelRun: (threadId, runId, options) => (0, runs_js_1.cancelRun)(context, threadId, runId, options),
        createThreadAndRun: (assistantId, options) => (0, runs_js_1.createThreadAndRun)(context, assistantId, options !== null && options !== void 0 ? options : {}),
        createMessage: (threadId, messageOptions, options) => (0, messages_js_1.createMessage)(context, threadId, messageOptions, options),
        listMessages: (threadId, options) => (0, messages_js_1.listMessages)(context, threadId, options),
        updateMessage: (threadId, messageId, options) => (0, messages_js_1.updateMessage)(context, threadId, messageId, options),
        listFiles: (options) => (0, files_js_1.listFiles)(context, options),
        uploadFile: (content, purpose, options) => (0, files_js_1.uploadFile)(context, content, purpose, options),
        uploadFileAndPoll: (content, purpose, options) => (0, files_js_1.uploadFileAndPoll)(context, content, purpose, options),
        deleteFile: (fileId, options) => (0, files_js_1.deleteFile)(context, fileId, options),
        getFile: (fileId, options) => (0, files_js_1.getFile)(context, fileId, options),
        getFileContent: (fileId, options) => (0, files_js_1.getFileContent)(context, fileId, options),
        listVectorStores: (options) => (0, vectorStores_js_1.listVectorStores)(context, options),
        createVectorStore: (options) => (0, vectorStores_js_1.createVectorStore)(context, options),
        getVectorStore: (vectorStoreId, options) => (0, vectorStores_js_1.getVectorStore)(context, vectorStoreId, options),
        modifyVectorStore: (vectorStoreId, options) => (0, vectorStores_js_1.modifyVectorStore)(context, vectorStoreId, options),
        deleteVectorStore: (vectorStoreId, options) => (0, vectorStores_js_1.deleteVectorStore)(context, vectorStoreId, options),
        createVectorStoreAndPoll: (options) => (0, vectorStores_js_1.createVectorStoreAndPoll)(context, options),
        createVectorStoreFile: (vectorStoreId, options) => (0, vectorStoresFiles_js_1.createVectorStoreFile)(context, vectorStoreId, options),
        getVectorStoreFile: (vectorStoreId, fileId, options) => (0, vectorStoresFiles_js_1.getVectorStoreFile)(context, vectorStoreId, fileId, options),
        listVectorStoreFiles: (vectorStoreId, options) => (0, vectorStoresFiles_js_1.listVectorStoreFiles)(context, vectorStoreId, options),
        deleteVectorStoreFile: (vectorStoreId, fileId, options) => (0, vectorStoresFiles_js_1.deleteVectorStoreFile)(context, vectorStoreId, fileId, options),
        createVectorStoreFileAndPoll: (vectorStoreId, options) => (0, vectorStoresFiles_js_1.createVectorStoreFileAndPoll)(context, vectorStoreId, options),
        createVectorStoreFileBatch: (vectorStoreId, options) => (0, vectorStoresFileBatches_js_1.createVectorStoreFileBatch)(context, vectorStoreId, options),
        getVectorStoreFileBatch: (vectorStoreId, batchId, options) => (0, vectorStoresFileBatches_js_1.getVectorStoreFileBatch)(context, vectorStoreId, batchId, options),
        cancelVectorStoreFileBatch: (vectorStoreId, batchId, options) => (0, vectorStoresFileBatches_js_1.cancelVectorStoreFileBatch)(context, vectorStoreId, batchId, options),
        listVectorStoreFileBatchFiles: (vectorStoreId, batchId, options) => (0, vectorStoresFileBatches_js_1.listVectorStoreFileBatchFiles)(context, vectorStoreId, batchId, options),
        createVectorStoreFileBatchAndPoll: (vectorStoreId, options) => (0, vectorStoresFileBatches_js_1.createVectorStoreFileBatchAndPoll)(context, vectorStoreId, options),
        getRunStep: (threadId, runId, stepId, options) => (0, runSteps_js_1.getRunStep)(context, threadId, runId, stepId, options),
        listRunSteps: (threadId, runId, options) => (0, runSteps_js_1.listRunSteps)(context, threadId, runId, options),
    };
}
function getAgentsOperations(context) {
    return Object.assign({}, getAgents(context));
}
//# sourceMappingURL=index.js.map
"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRunStep = getRunStep;
exports.listRunSteps = listRunSteps;
const tslib_1 = require("tslib");
const core_client_1 = require("@azure-rest/core-client");
const ConverterFromWire = tslib_1.__importStar(require("../customization/convertOutputModelsFromWire.js"));
const inputValidations_js_1 = require("./inputValidations.js");
const convertParametersToWire_js_1 = require("../customization/convertParametersToWire.js");
const openAIError_js_1 = require("./openAIError.js");
const expectedStatuses = ["200"];
/** Gets a single run step from a thread run. */
async function getRunStep(context, threadId, runId, stepId, options = {}) {
    (0, inputValidations_js_1.validateThreadId)(threadId);
    (0, inputValidations_js_1.validateRunId)(runId);
    validateStepId(stepId);
    const getOptions = Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options));
    const result = await context
        .path("/threads/{threadId}/runs/{runId}/steps/{stepId}", threadId, runId, stepId)
        .get(getOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, openAIError_js_1.createOpenAIError)(result);
    }
    return ConverterFromWire.convertRunStepOutput(result.body);
}
/** Gets a list of run steps from a thread run. */
async function listRunSteps(context, threadId, runId, options = {}) {
    const listOptions = Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { queryParameters: (0, convertParametersToWire_js_1.convertToListQueryParameters)(options) });
    validateListRunsParameters(threadId, runId, listOptions);
    const result = await context
        .path("/threads/{threadId}/runs/{runId}/steps", threadId, runId)
        .get(listOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, openAIError_js_1.createOpenAIError)(result);
    }
    return ConverterFromWire.convertOpenAIPageableListOfRunStepOutput(result.body);
}
function validateStepId(stepId) {
    if (!stepId) {
        throw new Error("Step ID is required");
    }
}
function validateListRunsParameters(thread_id, runId, options) {
    var _a, _b, _c;
    (0, inputValidations_js_1.validateThreadId)(thread_id);
    (0, inputValidations_js_1.validateRunId)(runId);
    if (((_a = options === null || options === void 0 ? void 0 : options.queryParameters) === null || _a === void 0 ? void 0 : _a.limit) &&
        (options.queryParameters.limit < 1 || options.queryParameters.limit > 100)) {
        throw new Error("Limit must be between 1 and 100");
    }
    if ((_b = options === null || options === void 0 ? void 0 : options.queryParameters) === null || _b === void 0 ? void 0 : _b.limit) {
        (0, inputValidations_js_1.validateLimit)(options.queryParameters.limit);
    }
    if ((_c = options === null || options === void 0 ? void 0 : options.queryParameters) === null || _c === void 0 ? void 0 : _c.order) {
        (0, inputValidations_js_1.validateOrder)(options.queryParameters.order);
    }
}
//# sourceMappingURL=runSteps.js.map
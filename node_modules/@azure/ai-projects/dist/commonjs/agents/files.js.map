{"version":3,"file":"files.js","sourceRoot":"","sources":["../../../src/agents/files.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Client, StreamableMethod } from \"@azure-rest/core-client\";\nimport { operationOptionsToRequestParameters } from \"@azure-rest/core-client\";\nimport type {\n  FileDeletionStatusOutput,\n  FileListResponseOutput,\n  OpenAIFileOutput,\n} from \"../customization/outputModels.js\";\nimport type { FilePurpose as CustomizedFilePurpose } from \"../customization/models.js\";\nimport type {\n  DeleteFileOptionalParams,\n  GetFileContentOptionalParams,\n  GetFileOptionalParams,\n  ListFilesOptionalParams,\n  UploadFileOptionalParams,\n} from \"./customModels.js\";\nimport { createPoller } from \"./poller.js\";\nimport type * as GeneratedParameters from \"../generated/src/parameters.js\";\nimport * as ConvertFromWire from \"../customization/convertOutputModelsFromWire.js\";\nimport * as ConvertParameters from \"../customization/convertParametersToWire.js\";\nimport { randomUUID } from \"@azure/core-util\";\nimport { createOpenAIError } from \"./openAIError.js\";\nimport type { OperationState, OperationStatus, PollerLike } from \"@azure/core-lro\";\nconst expectedStatuses = [\"200\"];\n\nenum FilePurpose {\n  FineTune = \"fine-tune\",\n  FineTuneResults = \"fine-tune-results\",\n  Assistants = \"assistants\",\n  AssistantsOutput = \"assistants_output\",\n  Batch = \"batch\",\n  BatchOutput = \"batch_output\",\n  Vision = \"vision\",\n}\n\n/** Gets a list of previously uploaded files. */\nexport async function listFiles(\n  context: Client,\n  options: ListFilesOptionalParams = {},\n): Promise<FileListResponseOutput> {\n  const listOptions: GeneratedParameters.ListFilesParameters = {\n    ...operationOptionsToRequestParameters(options),\n    queryParameters: ConvertParameters.convertListFilesQueryParamProperties(options),\n  };\n  validateListFilesParameters(listOptions);\n  const result = await context.path(\"/files\").get(options);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createOpenAIError(result);\n  }\n  return ConvertFromWire.convertFileListResponseOutput(result.body);\n}\n\n/** Uploads a file for use by other operations. */\nexport function uploadFile(\n  context: Client,\n  content: ReadableStream | NodeJS.ReadableStream,\n  purpose: CustomizedFilePurpose,\n  options: UploadFileOptionalParams = {},\n): PollerLike<OperationState<OpenAIFileOutput>, OpenAIFileOutput> {\n  return createPoller<OpenAIFileOutput>({\n    initOperation: async () => {\n      return uploadFileInternal(context, content, purpose, options);\n    },\n    pollOperation: async (currentResult: OpenAIFileOutput) => {\n      return getFile(context, currentResult.id, options);\n    },\n    getOperationStatus: getLroOperationStatus,\n    getOperationError: (result: OpenAIFileOutput) => {\n      return result.status === \"failed\" && result.statusDetails\n        ? new Error(`Operation failed: ${result.statusDetails}`)\n        : undefined;\n    },\n    intervalInMs: options.pollingOptions?.sleepIntervalInMs,\n  });\n}\n\nexport function uploadFileAndPoll(\n  context: Client,\n  content: ReadableStream | NodeJS.ReadableStream,\n  purpose: CustomizedFilePurpose,\n  options: UploadFileOptionalParams = {},\n): PollerLike<OperationState<OpenAIFileOutput>, OpenAIFileOutput> {\n  return createPoller<OpenAIFileOutput>({\n    initOperation: async () => {\n      return uploadFileInternal(context, content, purpose, options);\n    },\n    pollOperation: async (currentResult: OpenAIFileOutput) => {\n      return getFile(context, currentResult.id, options);\n    },\n    getOperationStatus: getLroOperationStatus,\n    getOperationError: (result: OpenAIFileOutput) => {\n      return result.status === \"failed\" && result.statusDetails\n        ? new Error(`Operation failed: ${result.statusDetails}`)\n        : undefined;\n    },\n    intervalInMs: options.pollingOptions?.sleepIntervalInMs,\n  });\n}\n\n/** Delete a previously uploaded file. */\nexport async function deleteFile(\n  context: Client,\n  fileId: string,\n  options: DeleteFileOptionalParams = {},\n): Promise<FileDeletionStatusOutput> {\n  const deleteOptions: GeneratedParameters.ListFilesParameters = {\n    ...operationOptionsToRequestParameters(options),\n  };\n  validateFileId(fileId);\n  const result = await context.path(\"/files/{fileId}\", fileId).delete(deleteOptions);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createOpenAIError(result);\n  }\n  return result.body;\n}\n\n/** Returns information about a specific file. Does not retrieve file content. */\nexport async function getFile(\n  context: Client,\n  fileId: string,\n  options: GetFileOptionalParams = {},\n): Promise<OpenAIFileOutput> {\n  validateFileId(fileId);\n  const getFileOptions: GeneratedParameters.ListFilesParameters = {\n    ...operationOptionsToRequestParameters(options),\n  };\n  const result = await context.path(\"/files/{fileId}\", fileId).get(getFileOptions);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createOpenAIError(result);\n  }\n  return ConvertFromWire.convertOpenAIFileOutput(result.body);\n}\n\n/** Returns file content. */\nexport function getFileContent(\n  context: Client,\n  fileId: string,\n  options: GetFileContentOptionalParams = {},\n): StreamableMethod<string | Uint8Array> {\n  validateFileId(fileId);\n  const getFileContentOptions: GeneratedParameters.ListFilesParameters = {\n    ...operationOptionsToRequestParameters(options),\n  };\n  return context.path(\"/files/{fileId}/content\", fileId).get(getFileContentOptions);\n}\n\nexport async function uploadFileInternal(\n  context: Client,\n  content: ReadableStream | NodeJS.ReadableStream,\n  purpose: CustomizedFilePurpose,\n  options: UploadFileOptionalParams = {},\n): Promise<OpenAIFileOutput> {\n  const uploadFileOptions: GeneratedParameters.UploadFileParameters = {\n    ...operationOptionsToRequestParameters(options),\n    body: [\n      { name: \"file\" as const, body: content, filename: options.fileName ?? randomUUID() },\n      { name: \"purpose\" as const, body: purpose },\n    ],\n    contentType: \"multipart/form-data\",\n  };\n  const result = await context.path(\"/files\").post(uploadFileOptions);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createOpenAIError(result);\n  }\n  return ConvertFromWire.convertOpenAIFileOutput(result.body);\n}\n\nfunction getLroOperationStatus(result: OpenAIFileOutput): OperationStatus {\n  switch (result.status) {\n    case \"running\":\n    case \"pending\":\n      return \"running\";\n    case \"uploaded\":\n    case \"processed\":\n      return \"succeeded\";\n    default:\n      return \"failed\";\n  }\n}\n\nfunction validateListFilesParameters(options?: GeneratedParameters.ListFilesParameters): void {\n  if (options?.queryParameters?.purpose) {\n    if (!Object.values(FilePurpose).includes(options?.queryParameters?.purpose as FilePurpose)) {\n      throw new Error(\n        \"Purpose must be one of 'fine-tune', 'fine-tune-results', 'assistants', 'assistants_output', 'batch', 'batch_output', 'vision'\",\n      );\n    }\n  }\n}\n\nfunction validateFileId(fileId: string): void {\n  if (!fileId) {\n    throw new Error(\"File ID is required\");\n  }\n}\n"]}
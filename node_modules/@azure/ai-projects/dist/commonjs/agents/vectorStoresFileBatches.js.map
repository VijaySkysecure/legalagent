{"version":3,"file":"vectorStoresFileBatches.js","sourceRoot":"","sources":["../../../src/agents/vectorStoresFileBatches.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Client } from \"@azure-rest/core-client\";\nimport { operationOptionsToRequestParameters } from \"@azure-rest/core-client\";\nimport type {\n  OpenAIPageableListOfVectorStoreFileOutput,\n  VectorStoreFileBatchOutput,\n} from \"../customization/outputModels.js\";\nimport { createPoller } from \"./poller.js\";\nimport type {\n  CancelVectorStoreFileBatchOptionalParams,\n  CreateVectorStoreFileBatchOptionalParams,\n  GetVectorStoreFileBatchOptionalParams,\n  ListVectorStoreFileBatchFilesOptionalParams,\n} from \"./customModels.js\";\nimport {\n  validateFileStatusFilter,\n  validateLimit,\n  validateOrder,\n  validateVectorStoreId,\n} from \"./inputValidations.js\";\nimport type {\n  CreateVectorStoreFileBatchParameters,\n  ListVectorStoreFileBatchFilesParameters,\n} from \"../generated/src/parameters.js\";\nimport * as ConvertFromWire from \"../customization/convertOutputModelsFromWire.js\";\nimport * as ConvertParamsToWire from \"../customization/convertParametersToWire.js\";\nimport { createOpenAIError } from \"./openAIError.js\";\nimport type { PollerLike, OperationState, OperationStatus } from \"@azure/core-lro\";\n\nconst expectedStatuses = [\"200\"];\n\n/** Create a vector store file batch. */\nexport function createVectorStoreFileBatch(\n  context: Client,\n  vectorStoreId: string,\n  options: CreateVectorStoreFileBatchOptionalParams = {},\n): PollerLike<OperationState<VectorStoreFileBatchOutput>, VectorStoreFileBatchOutput> {\n  return createPoller<VectorStoreFileBatchOutput>({\n    initOperation: async () => {\n      return createVectorStoreFileBatchInternal(context, vectorStoreId, options);\n    },\n    pollOperation: async (currentResult: VectorStoreFileBatchOutput) => {\n      return getVectorStoreFileBatch(context, vectorStoreId, currentResult.id, options);\n    },\n    getOperationStatus: getLroOperationStatus,\n    intervalInMs: options.pollingOptions?.sleepIntervalInMs,\n  });\n}\n\n/** Retrieve a vector store file batch. */\nexport async function getVectorStoreFileBatch(\n  context: Client,\n  vectorStoreId: string,\n  batchId: string,\n  options: GetVectorStoreFileBatchOptionalParams = {},\n): Promise<VectorStoreFileBatchOutput> {\n  validateVectorStoreId(vectorStoreId);\n  const result = await context\n    .path(\"/vector_stores/{vectorStoreId}/file_batches/{batchId}\", vectorStoreId, batchId)\n    .get(options);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createOpenAIError(result);\n  }\n  return ConvertFromWire.convertVectorStoreFileBatchOutput(result.body);\n}\n\n/** Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. */\nexport async function cancelVectorStoreFileBatch(\n  context: Client,\n  vectorStoreId: string,\n  batchId: string,\n  options: CancelVectorStoreFileBatchOptionalParams = {},\n): Promise<VectorStoreFileBatchOutput> {\n  validateVectorStoreId(vectorStoreId);\n  const result = await context\n    .path(\"/vector_stores/{vectorStoreId}/file_batches/{batchId}/cancel\", vectorStoreId, batchId)\n    .post(options);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createOpenAIError(result);\n  }\n  return ConvertFromWire.convertVectorStoreFileBatchOutput(result.body);\n}\n\n/** Returns a list of vector store files in a batch. */\nexport async function listVectorStoreFileBatchFiles(\n  context: Client,\n  vectorStoreId: string,\n  batchId: string,\n  options: ListVectorStoreFileBatchFilesOptionalParams = {},\n): Promise<OpenAIPageableListOfVectorStoreFileOutput> {\n  const listOptions: ListVectorStoreFileBatchFilesParameters = {\n    ...operationOptionsToRequestParameters(options),\n    queryParameters: ConvertParamsToWire.convertListVectorStoreFileBatchFilesQueryParamProperties(\n      options,\n    ) as Record<string, string>,\n  };\n\n  validateVectorStoreId(vectorStoreId);\n  validateBatchId(batchId);\n  validateListVectorStoreFileBatchFilesParameters(listOptions);\n  const result = await context\n    .path(\"/vector_stores/{vectorStoreId}/file_batches/{batchId}/files\", vectorStoreId, batchId)\n    .get(listOptions);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createOpenAIError(result);\n  }\n  return ConvertFromWire.convertOpenAIPageableListOfVectorStoreFileOutput(result.body);\n}\n\n/** Create a vector store file batch and poll. */\nexport function createVectorStoreFileBatchAndPoll(\n  context: Client,\n  vectorStoreId: string,\n  options: CreateVectorStoreFileBatchOptionalParams = {},\n): PollerLike<OperationState<VectorStoreFileBatchOutput>, VectorStoreFileBatchOutput> {\n  return createPoller<VectorStoreFileBatchOutput>({\n    initOperation: async () => {\n      return createVectorStoreFileBatchInternal(context, vectorStoreId, options);\n    },\n    pollOperation: async (currentResult: VectorStoreFileBatchOutput) => {\n      return getVectorStoreFileBatch(context, vectorStoreId, currentResult.id, options);\n    },\n    getOperationStatus: getLroOperationStatus,\n    intervalInMs: options.pollingOptions?.sleepIntervalInMs,\n  });\n}\n\nexport async function createVectorStoreFileBatchInternal(\n  context: Client,\n  vectorStoreId: string,\n  options: CreateVectorStoreFileBatchOptionalParams = {},\n): Promise<VectorStoreFileBatchOutput> {\n  const createOptions: CreateVectorStoreFileBatchParameters = {\n    ...operationOptionsToRequestParameters(options),\n    ...ConvertParamsToWire.convertCreateVectorStoreFileBatchParam({ body: options }),\n  };\n\n  validateVectorStoreId(vectorStoreId);\n  validateCreateVectorStoreFileBatchParameters(createOptions);\n  const result = await context\n    .path(\"/vector_stores/{vectorStoreId}/file_batches\", vectorStoreId)\n    .post(createOptions);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createOpenAIError(result);\n  }\n  return ConvertFromWire.convertVectorStoreFileBatchOutput(result.body);\n}\n\nfunction getLroOperationStatus(result: VectorStoreFileBatchOutput): OperationStatus {\n  switch (result.status) {\n    case \"in_progress\":\n      return \"running\";\n    case \"completed\":\n      return \"succeeded\";\n    case \"cancelled\":\n      return \"canceled\";\n    default:\n      return \"failed\";\n  }\n}\n\nfunction validateBatchId(batchId: string): void {\n  if (!batchId) {\n    throw new Error(\"Batch ID is required\");\n  }\n}\n\nfunction validateCreateVectorStoreFileBatchParameters(\n  options?: CreateVectorStoreFileBatchParameters,\n): void {\n  if (\n    options?.body?.chunking_strategy &&\n    (!options.body.file_ids || options.body.file_ids.length === 0)\n  ) {\n    throw new Error(\"Chunking strategy is only applicable if fileIds are included\");\n  }\n}\n\nfunction validateListVectorStoreFileBatchFilesParameters(\n  options?: ListVectorStoreFileBatchFilesParameters,\n): void {\n  if (options?.queryParameters?.filter) {\n    validateFileStatusFilter(options.queryParameters.filter);\n  }\n  if (options?.queryParameters?.limit) {\n    validateLimit(options.queryParameters.limit);\n  }\n  if (options?.queryParameters?.order) {\n    validateOrder(options.queryParameters.order);\n  }\n}\n"]}
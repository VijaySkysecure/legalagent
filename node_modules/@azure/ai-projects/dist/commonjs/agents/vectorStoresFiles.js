"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.listVectorStoreFiles = listVectorStoreFiles;
exports.createVectorStoreFile = createVectorStoreFile;
exports.getVectorStoreFile = getVectorStoreFile;
exports.deleteVectorStoreFile = deleteVectorStoreFile;
exports.createVectorStoreFileAndPoll = createVectorStoreFileAndPoll;
const tslib_1 = require("tslib");
const core_client_1 = require("@azure-rest/core-client");
const poller_js_1 = require("./poller.js");
const inputValidations_js_1 = require("./inputValidations.js");
const convertParametersToWire_js_1 = require("../customization/convertParametersToWire.js");
const ConvertFromWire = tslib_1.__importStar(require("../customization/convertOutputModelsFromWire.js"));
const ConvertParamsToWire = tslib_1.__importStar(require("../customization/convertParametersToWire.js"));
const openAIError_js_1 = require("./openAIError.js");
const expectedStatuses = ["200"];
/** Returns a list of vector store files. */
async function listVectorStoreFiles(context, vectorStoreId, options = {}) {
    (0, inputValidations_js_1.validateVectorStoreId)(vectorStoreId);
    const listOptions = Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { queryParameters: (0, convertParametersToWire_js_1.convertToListQueryParameters)(options) });
    validateListVectorStoreFilesParameters(listOptions);
    const result = await context
        .path("/vector_stores/{vectorStoreId}/files", vectorStoreId)
        .get(listOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, openAIError_js_1.createOpenAIError)(result);
    }
    return ConvertFromWire.convertOpenAIPageableListOfVectorStoreFileOutput(result.body);
}
/** Create a vector store file by attaching a file to a vector store. */
function createVectorStoreFile(context, vectorStoreId, options = {}) {
    var _a;
    return (0, poller_js_1.createPoller)({
        initOperation: async () => {
            return createVectorStoreFileInternal(context, vectorStoreId, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStoreFile(context, vectorStoreId, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        getOperationError: (result) => {
            return result.status === "failed" && result.lastError
                ? new Error(`Operation failed with code ${result.lastError.code}: ${result.lastError.message}`)
                : undefined;
        },
        intervalInMs: (_a = options.pollingOptions) === null || _a === void 0 ? void 0 : _a.sleepIntervalInMs,
    });
}
/** Retrieves a vector store file. */
async function getVectorStoreFile(context, vectorStoreId, fileId, options = {}) {
    const getOptions = Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options));
    (0, inputValidations_js_1.validateVectorStoreId)(vectorStoreId);
    (0, inputValidations_js_1.validateFileId)(fileId);
    const result = await context
        .path("/vector_stores/{vectorStoreId}/files/{fileId}", vectorStoreId, fileId)
        .get(getOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, openAIError_js_1.createOpenAIError)(result);
    }
    return ConvertFromWire.convertVectorStoreFileOutput(result.body);
}
/**
 * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted.
 * To delete the file, use the delete file endpoint.
 */
async function deleteVectorStoreFile(context, vectorStoreId, fileId, options = {}) {
    (0, inputValidations_js_1.validateVectorStoreId)(vectorStoreId);
    (0, inputValidations_js_1.validateFileId)(fileId);
    const deleteOptions = Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options));
    const result = await context
        .path("/vector_stores/{vectorStoreId}/files/{fileId}", vectorStoreId, fileId)
        .delete(deleteOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, openAIError_js_1.createOpenAIError)(result);
    }
    return ConvertFromWire.convertVectorStoreFileDeletionStatusOutput(result.body);
}
/** Create a vector store file by attaching a file to a vector store and poll. */
function createVectorStoreFileAndPoll(context, vectorStoreId, options = {}) {
    var _a;
    return (0, poller_js_1.createPoller)({
        initOperation: async () => {
            return createVectorStoreFileInternal(context, vectorStoreId, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStoreFile(context, vectorStoreId, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        getOperationError: (result) => {
            return result.status === "failed" && result.lastError
                ? new Error(`Operation failed with code ${result.lastError.code}: ${result.lastError.message}`)
                : undefined;
        },
        intervalInMs: (_a = options.pollingOptions) === null || _a === void 0 ? void 0 : _a.sleepIntervalInMs,
    });
}
async function createVectorStoreFileInternal(context, vectorStoreId, options = {}) {
    const createOptions = Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), ConvertParamsToWire.convertCreateVectorStoreFileParam({ body: options }));
    (0, inputValidations_js_1.validateVectorStoreId)(vectorStoreId);
    validateCreateVectorStoreFileParameters(createOptions);
    const result = await context
        .path("/vector_stores/{vectorStoreId}/files", vectorStoreId)
        .post(createOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, openAIError_js_1.createOpenAIError)(result);
    }
    return ConvertFromWire.convertVectorStoreFileOutput(result.body);
}
function getLroOperationStatus(result) {
    switch (result.status) {
        case "in_progress":
            return "running";
        case "completed":
            return "succeeded";
        case "cancelled":
            return "canceled";
        default:
            return "failed";
    }
}
function validateListVectorStoreFilesParameters(options) {
    var _a, _b, _c;
    if ((_a = options === null || options === void 0 ? void 0 : options.queryParameters) === null || _a === void 0 ? void 0 : _a.filter) {
        (0, inputValidations_js_1.validateFileStatusFilter)(options.queryParameters.filter);
    }
    if ((_b = options === null || options === void 0 ? void 0 : options.queryParameters) === null || _b === void 0 ? void 0 : _b.limit) {
        (0, inputValidations_js_1.validateLimit)(options.queryParameters.limit);
    }
    if ((_c = options === null || options === void 0 ? void 0 : options.queryParameters) === null || _c === void 0 ? void 0 : _c.order) {
        (0, inputValidations_js_1.validateOrder)(options.queryParameters.order);
    }
}
function validateCreateVectorStoreFileParameters(options) {
    var _a;
    if (((_a = options === null || options === void 0 ? void 0 : options.body) === null || _a === void 0 ? void 0 : _a.chunking_strategy) && !options.body.file_id) {
        throw new Error("Chunking strategy is only applicable if fileId is included");
    }
}
//# sourceMappingURL=vectorStoresFiles.js.map
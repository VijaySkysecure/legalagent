"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.listVectorStores = listVectorStores;
exports.createVectorStore = createVectorStore;
exports.getVectorStore = getVectorStore;
exports.modifyVectorStore = modifyVectorStore;
exports.deleteVectorStore = deleteVectorStore;
exports.createVectorStoreAndPoll = createVectorStoreAndPoll;
const tslib_1 = require("tslib");
const core_client_1 = require("@azure-rest/core-client");
const poller_js_1 = require("./poller.js");
const inputValidations_js_1 = require("./inputValidations.js");
const ConvertFromWire = tslib_1.__importStar(require("../customization/convertOutputModelsFromWire.js"));
const ConvertToWire = tslib_1.__importStar(require("../customization/convertModelsToWrite.js"));
const convertParametersToWire_js_1 = require("../customization/convertParametersToWire.js");
const openAIError_js_1 = require("./openAIError.js");
const expectedStatuses = ["200"];
/** Returns a list of vector stores. */
async function listVectorStores(context, options = {}) {
    const listOptions = Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { queryParameters: (0, convertParametersToWire_js_1.convertToListQueryParameters)(options) });
    validateListVectorStoresParameters(listOptions);
    const result = await context.path("/vector_stores").get(listOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, openAIError_js_1.createOpenAIError)(result);
    }
    return ConvertFromWire.convertOpenAIPageableListOfVectorStoreOutput(result.body);
}
/** Creates a vector store. */
function createVectorStore(context, options = {}) {
    var _a;
    return (0, poller_js_1.createPoller)({
        initOperation: async () => {
            return createVectorStoreInternal(context, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStore(context, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        intervalInMs: (_a = options.pollingOptions) === null || _a === void 0 ? void 0 : _a.sleepIntervalInMs,
    });
}
/** Returns the vector store object matching the specified ID. */
async function getVectorStore(context, vectorStoreId, options = {}) {
    const getOptions = Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options));
    (0, inputValidations_js_1.validateVectorStoreId)(vectorStoreId);
    const result = await context
        .path("/vector_stores/{vectorStoreId}", vectorStoreId)
        .get(getOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, openAIError_js_1.createOpenAIError)(result);
    }
    return ConvertFromWire.convertVectorStoreOutput(result.body);
}
/** The ID of the vector store to modify. */
async function modifyVectorStore(context, vectorStoreId, options = {}) {
    const modifyOptions = Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { body: ConvertToWire.convertVectorStoreUpdateOptions(options) });
    (0, inputValidations_js_1.validateVectorStoreId)(vectorStoreId);
    validateModifyVectorStoreParameters(modifyOptions);
    const result = await context
        .path("/vector_stores/{vectorStoreId}", vectorStoreId)
        .post(modifyOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, openAIError_js_1.createOpenAIError)(result);
    }
    return ConvertFromWire.convertVectorStoreOutput(result.body);
}
/** Deletes the vector store object matching the specified ID. */
async function deleteVectorStore(context, vectorStoreId, options = {}) {
    const deleteOptions = Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options));
    (0, inputValidations_js_1.validateVectorStoreId)(vectorStoreId);
    const result = await context
        .path("/vector_stores/{vectorStoreId}", vectorStoreId)
        .delete(deleteOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, openAIError_js_1.createOpenAIError)(result);
    }
    return ConvertFromWire.convertVectorStoreDeletionStatusOutput(result.body);
}
/**
 * Creates a vector store and poll.
 */
function createVectorStoreAndPoll(context, options = {}) {
    var _a;
    return (0, poller_js_1.createPoller)({
        initOperation: async () => {
            return createVectorStoreInternal(context, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStore(context, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        intervalInMs: (_a = options.pollingOptions) === null || _a === void 0 ? void 0 : _a.sleepIntervalInMs,
    });
}
async function createVectorStoreInternal(context, options = {}) {
    const createOptions = Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { body: ConvertToWire.convertVectorStoreOptions(options) });
    validateCreateVectorStoreParameters(createOptions);
    const result = await context.path("/vector_stores").post(createOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, openAIError_js_1.createOpenAIError)(result);
    }
    return ConvertFromWire.convertVectorStoreOutput(result.body);
}
function getLroOperationStatus(result) {
    switch (result.status) {
        case "in_progress":
            return "running";
        case "completed":
            return "succeeded";
        case "expired":
            return "failed";
        default:
            return "failed";
    }
}
function validateListVectorStoresParameters(options) {
    var _a, _b;
    if ((_a = options === null || options === void 0 ? void 0 : options.queryParameters) === null || _a === void 0 ? void 0 : _a.limit) {
        (0, inputValidations_js_1.validateLimit)(options.queryParameters.limit);
    }
    if ((_b = options === null || options === void 0 ? void 0 : options.queryParameters) === null || _b === void 0 ? void 0 : _b.order) {
        (0, inputValidations_js_1.validateOrder)(options.queryParameters.order);
    }
}
function validateCreateVectorStoreParameters(options) {
    var _a, _b;
    if (((_a = options === null || options === void 0 ? void 0 : options.body) === null || _a === void 0 ? void 0 : _a.chunking_strategy) &&
        (!options.body.file_ids || options.body.file_ids.length === 0)) {
        throw new Error("Chunking strategy is only applicable if fileIds is non-empty");
    }
    if ((_b = options === null || options === void 0 ? void 0 : options.body) === null || _b === void 0 ? void 0 : _b.metadata) {
        (0, inputValidations_js_1.validateMetadata)(options.body.metadata);
    }
}
function validateModifyVectorStoreParameters(options) {
    var _a;
    if ((_a = options === null || options === void 0 ? void 0 : options.body) === null || _a === void 0 ? void 0 : _a.metadata) {
        (0, inputValidations_js_1.validateMetadata)(options.body.metadata);
    }
}
//# sourceMappingURL=vectorStores.js.map
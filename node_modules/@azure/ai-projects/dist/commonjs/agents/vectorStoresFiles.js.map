{"version":3,"file":"vectorStoresFiles.js","sourceRoot":"","sources":["../../../src/agents/vectorStoresFiles.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Client } from \"@azure-rest/core-client\";\nimport { operationOptionsToRequestParameters } from \"@azure-rest/core-client\";\nimport type {\n  ListVectorStoreFilesParameters,\n  CreateVectorStoreFileParameters,\n} from \"../generated/src/parameters.js\";\nimport type {\n  OpenAIPageableListOfVectorStoreFileOutput,\n  VectorStoreFileDeletionStatusOutput,\n  VectorStoreFileOutput,\n} from \"../customization/outputModels.js\";\nimport { createPoller } from \"./poller.js\";\nimport type {\n  CreateVectorStoreFileOptionalParams,\n  DeleteVectorStoreFileOptionalParams,\n  GetVectorStoreFileOptionalParams,\n  ListVectorStoreFilesOptionalParams,\n} from \"./customModels.js\";\nimport {\n  validateFileId,\n  validateFileStatusFilter,\n  validateLimit,\n  validateOrder,\n  validateVectorStoreId,\n} from \"./inputValidations.js\";\nimport { convertToListQueryParameters } from \"../customization/convertParametersToWire.js\";\nimport type * as GeneratedParameters from \"../generated/src/parameters.js\";\nimport * as ConvertFromWire from \"../customization/convertOutputModelsFromWire.js\";\nimport * as ConvertParamsToWire from \"../customization/convertParametersToWire.js\";\nimport { createOpenAIError } from \"./openAIError.js\";\nimport type { OperationState, OperationStatus, PollerLike } from \"@azure/core-lro\";\n\nconst expectedStatuses = [\"200\"];\n\n/** Returns a list of vector store files. */\nexport async function listVectorStoreFiles(\n  context: Client,\n  vectorStoreId: string,\n  options: ListVectorStoreFilesOptionalParams = {},\n): Promise<OpenAIPageableListOfVectorStoreFileOutput> {\n  validateVectorStoreId(vectorStoreId);\n\n  const listOptions: GeneratedParameters.ListVectorStoreFilesParameters = {\n    ...operationOptionsToRequestParameters(options),\n    queryParameters: convertToListQueryParameters(options),\n  };\n\n  validateListVectorStoreFilesParameters(listOptions);\n  const result = await context\n    .path(\"/vector_stores/{vectorStoreId}/files\", vectorStoreId)\n    .get(listOptions);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createOpenAIError(result);\n  }\n  return ConvertFromWire.convertOpenAIPageableListOfVectorStoreFileOutput(result.body);\n}\n\n/** Create a vector store file by attaching a file to a vector store. */\nexport function createVectorStoreFile(\n  context: Client,\n  vectorStoreId: string,\n  options: CreateVectorStoreFileOptionalParams = {},\n): PollerLike<OperationState<VectorStoreFileOutput>, VectorStoreFileOutput> {\n  return createPoller<VectorStoreFileOutput>({\n    initOperation: async () => {\n      return createVectorStoreFileInternal(context, vectorStoreId, options);\n    },\n    pollOperation: async (currentResult: VectorStoreFileOutput) => {\n      return getVectorStoreFile(context, vectorStoreId, currentResult.id, options);\n    },\n    getOperationStatus: getLroOperationStatus,\n    getOperationError: (result: VectorStoreFileOutput) => {\n      return result.status === \"failed\" && result.lastError\n        ? new Error(\n            `Operation failed with code ${result.lastError.code}: ${result.lastError.message}`,\n          )\n        : undefined;\n    },\n    intervalInMs: options.pollingOptions?.sleepIntervalInMs,\n  });\n}\n\n/** Retrieves a vector store file. */\nexport async function getVectorStoreFile(\n  context: Client,\n  vectorStoreId: string,\n  fileId: string,\n  options: GetVectorStoreFileOptionalParams = {},\n): Promise<VectorStoreFileOutput> {\n  const getOptions: GeneratedParameters.GetVectorStoreFileParameters = {\n    ...operationOptionsToRequestParameters(options),\n  };\n\n  validateVectorStoreId(vectorStoreId);\n  validateFileId(fileId);\n  const result = await context\n    .path(\"/vector_stores/{vectorStoreId}/files/{fileId}\", vectorStoreId, fileId)\n    .get(getOptions);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createOpenAIError(result);\n  }\n  return ConvertFromWire.convertVectorStoreFileOutput(result.body);\n}\n\n/**\n * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted.\n * To delete the file, use the delete file endpoint.\n */\nexport async function deleteVectorStoreFile(\n  context: Client,\n  vectorStoreId: string,\n  fileId: string,\n  options: DeleteVectorStoreFileOptionalParams = {},\n): Promise<VectorStoreFileDeletionStatusOutput> {\n  validateVectorStoreId(vectorStoreId);\n  validateFileId(fileId);\n  const deleteOptions: GeneratedParameters.GetVectorStoreFileParameters = {\n    ...operationOptionsToRequestParameters(options),\n  };\n  const result = await context\n    .path(\"/vector_stores/{vectorStoreId}/files/{fileId}\", vectorStoreId, fileId)\n    .delete(deleteOptions);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createOpenAIError(result);\n  }\n  return ConvertFromWire.convertVectorStoreFileDeletionStatusOutput(result.body);\n}\n\n/** Create a vector store file by attaching a file to a vector store and poll. */\nexport function createVectorStoreFileAndPoll(\n  context: Client,\n  vectorStoreId: string,\n  options: CreateVectorStoreFileOptionalParams = {},\n): PollerLike<OperationState<VectorStoreFileOutput>, VectorStoreFileOutput> {\n  return createPoller<VectorStoreFileOutput>({\n    initOperation: async () => {\n      return createVectorStoreFileInternal(context, vectorStoreId, options);\n    },\n    pollOperation: async (currentResult: VectorStoreFileOutput) => {\n      return getVectorStoreFile(context, vectorStoreId, currentResult.id, options);\n    },\n    getOperationStatus: getLroOperationStatus,\n    getOperationError: (result: VectorStoreFileOutput) => {\n      return result.status === \"failed\" && result.lastError\n        ? new Error(\n            `Operation failed with code ${result.lastError.code}: ${result.lastError.message}`,\n          )\n        : undefined;\n    },\n    intervalInMs: options.pollingOptions?.sleepIntervalInMs,\n  });\n}\n\nasync function createVectorStoreFileInternal(\n  context: Client,\n  vectorStoreId: string,\n  options: CreateVectorStoreFileOptionalParams = {},\n): Promise<VectorStoreFileOutput> {\n  const createOptions: CreateVectorStoreFileParameters = {\n    ...operationOptionsToRequestParameters(options),\n    ...ConvertParamsToWire.convertCreateVectorStoreFileParam({ body: options }),\n  };\n\n  validateVectorStoreId(vectorStoreId);\n  validateCreateVectorStoreFileParameters(createOptions);\n  const result = await context\n    .path(\"/vector_stores/{vectorStoreId}/files\", vectorStoreId)\n    .post(createOptions);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createOpenAIError(result);\n  }\n  return ConvertFromWire.convertVectorStoreFileOutput(result.body);\n}\n\nfunction getLroOperationStatus(result: VectorStoreFileOutput): OperationStatus {\n  switch (result.status) {\n    case \"in_progress\":\n      return \"running\";\n    case \"completed\":\n      return \"succeeded\";\n    case \"cancelled\":\n      return \"canceled\";\n    default:\n      return \"failed\";\n  }\n}\n\nfunction validateListVectorStoreFilesParameters(options?: ListVectorStoreFilesParameters): void {\n  if (options?.queryParameters?.filter) {\n    validateFileStatusFilter(options.queryParameters.filter);\n  }\n  if (options?.queryParameters?.limit) {\n    validateLimit(options.queryParameters.limit);\n  }\n  if (options?.queryParameters?.order) {\n    validateOrder(options.queryParameters.order);\n  }\n}\n\nfunction validateCreateVectorStoreFileParameters(options?: CreateVectorStoreFileParameters): void {\n  if (options?.body?.chunking_strategy && !options.body.file_id) {\n    throw new Error(\"Chunking strategy is only applicable if fileId is included\");\n  }\n}\n"]}
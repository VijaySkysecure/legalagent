{"version":3,"file":"messages.js","sourceRoot":"","sources":["../../../src/agents/messages.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Client } from \"@azure-rest/core-client\";\nimport { operationOptionsToRequestParameters } from \"@azure-rest/core-client\";\nimport type {\n  OpenAIPageableListOfThreadMessageOutput,\n  ThreadMessageOutput,\n} from \"../customization/outputModels.js\";\nimport type {\n  CreateMessageParameters,\n  ListMessagesParameters,\n} from \"../generated/src/parameters.js\";\nimport { validateMetadata, validateVectorStoreDataType } from \"./inputValidations.js\";\nimport { TracingUtility } from \"../tracing.js\";\nimport {\n  traceEndCreateMessage,\n  traceEndListMessages,\n  traceStartCreateMessage,\n  traceStartListMessages,\n} from \"./messagesTrace.js\";\nimport { traceStartAgentGeneric } from \"./traceUtility.js\";\nimport type { ThreadMessageOptions } from \"../customization/models.js\";\nimport type {\n  CreateMessageOptionalParams,\n  ListMessagesOptionalParams,\n  UpdateMessageOptionalParams,\n} from \"./customModels.js\";\nimport type * as GeneratedParameters from \"../generated/src/parameters.js\";\nimport * as ConvertFromWire from \"../customization/convertOutputModelsFromWire.js\";\nimport { createOpenAIError } from \"./openAIError.js\";\n\nconst expectedStatuses = [\"200\"];\n\n/** Creates a new message on a specified thread. */\nexport async function createMessage(\n  context: Client,\n  threadId: string,\n  messageOptions: ThreadMessageOptions,\n  options: CreateMessageOptionalParams = {},\n): Promise<ThreadMessageOutput> {\n  const createOptions: GeneratedParameters.CreateMessageParameters = {\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      ...messageOptions,\n    },\n  };\n\n  validateThreadId(threadId);\n  validateCreateMessageParameters(createOptions);\n  const response = await TracingUtility.withSpan(\n    \"CreateMessage\",\n    createOptions,\n    async (updateOptions) => {\n      const result = await context\n        .path(\"/threads/{threadId}/messages\", threadId)\n        .post(updateOptions);\n      if (!expectedStatuses.includes(result.status)) {\n        throw createOpenAIError(result);\n      }\n      return result.body;\n    },\n    (span, updatedOptions) => traceStartCreateMessage(span, threadId, updatedOptions),\n    traceEndCreateMessage,\n  );\n  return ConvertFromWire.convertThreadMessageOutput(response);\n}\n\n/** Gets a list of messages that exist on a thread. */\nexport async function listMessages(\n  context: Client,\n  threadId: string,\n  options: ListMessagesOptionalParams = {},\n): Promise<OpenAIPageableListOfThreadMessageOutput> {\n  const listOptions: GeneratedParameters.ListMessagesParameters = {\n    ...operationOptionsToRequestParameters(options),\n    queryParameters: {\n      ...(options.runId && { run_id: options.runId }),\n      ...(options.limit && { run_id: options.limit }),\n      ...(options.order && { run_id: options.order }),\n      ...(options.after && { run_id: options.after }),\n      ...(options.before && { run_id: options.before }),\n    },\n  };\n\n  validateThreadId(threadId);\n  validateListMessagesParameters(listOptions);\n  const output = await TracingUtility.withSpan(\n    \"ListMessages\",\n    listOptions,\n    async (updateOptions) => {\n      const result = await context\n        .path(\"/threads/{threadId}/messages\", threadId)\n        .get(updateOptions);\n      if (!expectedStatuses.includes(result.status)) {\n        throw createOpenAIError(result);\n      }\n      return result.body;\n    },\n    (span, updatedOptions) => traceStartListMessages(span, threadId, updatedOptions),\n    traceEndListMessages,\n  );\n\n  return ConvertFromWire.convertOpenAIPageableListOfThreadMessageOutput(output);\n}\n\n/** Modifies an existing message on an existing thread. */\nexport async function updateMessage(\n  context: Client,\n  threadId: string,\n  messageId: string,\n  options: UpdateMessageOptionalParams = {},\n): Promise<ThreadMessageOutput> {\n  const updateMessageOptions: GeneratedParameters.UpdateMessageParameters = {\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      ...(options.metadata ? { metadata: options.metadata } : {}),\n    },\n  };\n  validateThreadId(threadId);\n  validateMessageId(messageId);\n  const response = await TracingUtility.withSpan(\n    \"UpdateMessage\",\n    updateMessageOptions,\n    async (updateOptions) => {\n      const result = await context\n        .path(\"/threads/{threadId}/messages/{messageId}\", threadId, messageId)\n        .post(updateOptions);\n      if (!expectedStatuses.includes(result.status)) {\n        throw createOpenAIError(result);\n      }\n      return result.body;\n    },\n    (span, updatedOptions) =>\n      traceStartAgentGeneric(span, {\n        ...updatedOptions,\n        tracingAttributeOptions: { threadId: threadId, messageId: messageId },\n      }),\n  );\n\n  return ConvertFromWire.convertThreadMessageOutput(response);\n}\n\nfunction validateThreadId(threadId: string): void {\n  if (!threadId) {\n    throw new Error(\"Thread ID is required\");\n  }\n}\n\nfunction validateMessageId(messageId: string): void {\n  if (!messageId) {\n    throw new Error(\"Message ID is required\");\n  }\n}\n\nfunction validateCreateMessageParameters(options: CreateMessageParameters): void {\n  if (options.body.role && ![\"user\", \"assistant\"].includes(options.body.role)) {\n    throw new Error(\"Role must be either 'user' or 'assistant'\");\n  }\n  if (options.body.metadata) {\n    validateMetadata(options.body.metadata);\n  }\n  if (options.body.attachments) {\n    if (\n      options.body.attachments.some((value) => {\n        value.tools.some((tool) => ![\"code_interpreter\", \"file_search\"].includes(tool.type));\n      })\n    ) {\n      throw new Error(\"Tool type must be either 'code_interpreter' or 'file_search'\");\n    }\n    if (options.body.attachments) {\n      options.body.attachments.forEach((value) => {\n        if (value.data_source) {\n          validateVectorStoreDataType([value.data_source]);\n        }\n      });\n    }\n  }\n}\n\nfunction validateListMessagesParameters(options?: ListMessagesParameters): void {\n  if (\n    options?.queryParameters?.limit &&\n    (options.queryParameters.limit < 1 || options.queryParameters.limit > 100)\n  ) {\n    throw new Error(\"Limit must be between 1 and 100\");\n  }\n  if (options?.queryParameters?.order && ![\"asc\", \"desc\"].includes(options.queryParameters.order)) {\n    throw new Error(\"Order must be either 'asc' or 'desc'\");\n  }\n}\n"]}
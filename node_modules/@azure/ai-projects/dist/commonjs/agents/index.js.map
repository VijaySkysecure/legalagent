{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/agents/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { type Client, type StreamableMethod } from \"@azure-rest/core-client\";\nimport type {\n  FileDeletionStatusOutput,\n  FileListResponseOutput,\n  OpenAIFileOutput,\n} from \"../customization/outputModels.js\";\nimport type {\n  OpenAIPageableListOfThreadRunOutput,\n  ThreadRunOutput,\n  AgentThreadOutput,\n  RunStepOutput,\n  OpenAIPageableListOfRunStepOutput,\n  ThreadMessageOutput,\n  ThreadDeletionStatusOutput,\n  OpenAIPageableListOfThreadMessageOutput,\n  OpenAIPageableListOfVectorStoreOutput,\n  VectorStoreOutput,\n  VectorStoreFileOutput,\n  VectorStoreDeletionStatusOutput,\n  VectorStoreFileDeletionStatusOutput,\n  VectorStoreFileBatchOutput,\n  OpenAIPageableListOfVectorStoreFileOutput,\n  AgentDeletionStatusOutput,\n  AgentOutput,\n  OpenAIPageableListOfAgentOutput,\n} from \"../customization/outputModels.js\";\nimport { createAgent, deleteAgent, getAgent, listAgents, updateAgent } from \"./assistants.js\";\nimport {\n  deleteFile,\n  getFile,\n  getFileContent,\n  listFiles,\n  uploadFile,\n  uploadFileAndPoll,\n} from \"./files.js\";\nimport { createThread, deleteThread, getThread, updateThread } from \"./threads.js\";\nimport {\n  cancelRun,\n  createRun,\n  createThreadAndRun,\n  getRun,\n  listRuns,\n  submitToolOutputsToRun,\n  updateRun,\n} from \"./runs.js\";\nimport { createMessage, listMessages, updateMessage } from \"./messages.js\";\nimport type { FilePurpose } from \"../customization/models.js\";\nimport {\n  createVectorStore,\n  createVectorStoreAndPoll,\n  deleteVectorStore,\n  getVectorStore,\n  listVectorStores,\n  modifyVectorStore,\n} from \"./vectorStores.js\";\nimport { getRunStep, listRunSteps } from \"./runSteps.js\";\nimport {\n  createVectorStoreFile,\n  createVectorStoreFileAndPoll,\n  deleteVectorStoreFile,\n  getVectorStoreFile,\n  listVectorStoreFiles,\n} from \"./vectorStoresFiles.js\";\nimport {\n  cancelVectorStoreFileBatch,\n  createVectorStoreFileBatch,\n  createVectorStoreFileBatchAndPoll,\n  getVectorStoreFileBatch,\n  listVectorStoreFileBatchFiles,\n} from \"./vectorStoresFileBatches.js\";\nimport type {\n  AgentRunResponse,\n  CreateRunOptionalParams,\n  GetRunOptionalParams,\n  CancelRunOptionalParams,\n  SubmitToolOutputsToRunOptionalParams,\n  UpdateRunOptionalParams,\n  ListRunQueryOptionalParams,\n  CreateAndRunThreadOptionalParams,\n  CreateAgentThreadOptionalParams,\n  GetAgentThreadOptionalParams,\n  UpdateAgentThreadOptionalParams,\n  DeleteAgentThreadOptionalParams,\n  GetRunStepOptionalParams,\n  ListRunStepsOptionalParams,\n  CreateMessageOptionalParams,\n  ListMessagesOptionalParams,\n  UpdateMessageOptionalParams,\n  GetVectorStoreOptionalParams,\n  ListVectorStoresOptionalParams,\n  UpdateVectorStoreOptionalParams,\n  DeleteVectorStoreOptionalParams,\n  CreateVectorStoreOptionalParams,\n  CreateVectorStoreFileOptionalParams,\n  ListVectorStoreFilesOptionalParams,\n  GetVectorStoreFileOptionalParams,\n  DeleteVectorStoreFileOptionalParams,\n  CreateVectorStoreFileBatchOptionalParams,\n  GetVectorStoreFileBatchOptionalParams,\n  ListVectorStoreFileBatchFilesOptionalParams,\n  CreateAgentOptionalParams,\n  ListAgentsOptionalParams,\n  GetAgentOptionalParams,\n  UpdateAgentOptionalParams,\n  DeleteFileOptionalParams,\n  GetFileOptionalParams,\n  GetFileContentOptionalParams,\n  ListFilesOptionalParams,\n  UploadFileOptionalParams,\n  CancelVectorStoreFileBatchOptionalParams,\n  DeleteAgentOptionalParams,\n} from \"./customModels.js\";\nimport type { ThreadMessageOptions, ToolOutput } from \"../customization/models.js\";\nimport type { PollerLike, OperationState } from \"@azure/core-lro\";\n\n/**\n * Agents Interface Contains operations for creating, listing, updating, and deleting agents, threads, runs, messages, and files.\n */\nexport interface AgentsOperations {\n  /** Creates a new agent. */\n  createAgent: (model: string, options?: CreateAgentOptionalParams) => Promise<AgentOutput>;\n\n  /** Gets a list of agents that were previously created. */\n  listAgents: (options?: ListAgentsOptionalParams) => Promise<OpenAIPageableListOfAgentOutput>;\n  /** Retrieves an existing agent. */\n  getAgent: (assistantId: string, options?: GetAgentOptionalParams) => Promise<AgentOutput>;\n  /** Modifies an existing agent. */\n  updateAgent: (assistantId: string, options: UpdateAgentOptionalParams) => Promise<AgentOutput>;\n  /** Deletes an agent. */\n  deleteAgent: (\n    assistantId: string,\n    options?: DeleteAgentOptionalParams,\n  ) => Promise<AgentDeletionStatusOutput>;\n\n  /** Creates a new thread. Threads contain messages and can be run by agents. */\n  createThread: (options?: CreateAgentThreadOptionalParams) => Promise<AgentThreadOutput>;\n  /** Gets information about an existing thread. */\n  getThread: (\n    threadId: string,\n    options?: GetAgentThreadOptionalParams,\n  ) => Promise<AgentThreadOutput>;\n  /** Modifies an existing thread. */\n  updateThread: (\n    threadId: string,\n    options?: UpdateAgentThreadOptionalParams,\n  ) => Promise<AgentThreadOutput>;\n  /** Deletes an existing thread. */\n  deleteThread: (\n    threadId: string,\n    options?: DeleteAgentThreadOptionalParams,\n  ) => Promise<ThreadDeletionStatusOutput>;\n\n  /** Creates and starts a new run of the specified thread using the specified agent. */\n  createRun: (\n    threadId: string,\n    assistantId: string,\n    options?: CreateRunOptionalParams,\n  ) => AgentRunResponse;\n\n  /** Gets a list of runs for a specified thread. */\n  listRuns: (\n    threadId: string,\n    options?: ListRunQueryOptionalParams,\n  ) => Promise<OpenAIPageableListOfThreadRunOutput>;\n  /** Gets an existing run from an existing thread. */\n  getRun: (\n    threadId: string,\n    runId: string,\n    options?: GetRunOptionalParams,\n  ) => Promise<ThreadRunOutput>;\n  /** Modifies an existing thread run. */\n  updateRun: (\n    threadId: string,\n    runId: string,\n    options?: UpdateRunOptionalParams,\n  ) => Promise<ThreadRunOutput>;\n  /** Submits outputs from tools as requested by tool calls in a run. Runs that need submitted tool outputs will have a status of 'requires_action' with a required_action.type of 'submit_tool_outputs'. */\n  submitToolOutputsToRun: (\n    threadId: string,\n    runId: string,\n    toolOutputs: Array<ToolOutput>,\n    options?: SubmitToolOutputsToRunOptionalParams,\n  ) => AgentRunResponse;\n\n  /** Cancels a run of an in progress thread. */\n  cancelRun: (\n    threadId: string,\n    runId: string,\n    options?: CancelRunOptionalParams,\n  ) => Promise<ThreadRunOutput>;\n  /** Creates a new thread and immediately starts a run of that thread. */\n  createThreadAndRun: (\n    assistantId: string,\n    options?: CreateAndRunThreadOptionalParams,\n  ) => AgentRunResponse;\n\n  /** Creates a new message on a specified thread. */\n  createMessage: (\n    threadId: string,\n    messageOptions: ThreadMessageOptions,\n    options?: CreateMessageOptionalParams,\n  ) => Promise<ThreadMessageOutput>;\n  /** Gets a list of messages that exist on a thread. */\n  listMessages: (\n    threadId: string,\n    options?: ListMessagesOptionalParams,\n  ) => Promise<OpenAIPageableListOfThreadMessageOutput>;\n  /** Modifies an existing message on an existing thread. */\n  updateMessage: (\n    threadId: string,\n    messageId: string,\n    options?: UpdateMessageOptionalParams,\n  ) => Promise<ThreadMessageOutput>;\n\n  /** Gets a list of previously uploaded files. */\n  listFiles: (options?: ListFilesOptionalParams) => Promise<FileListResponseOutput>;\n  /** Uploads a file for use by other operations. */\n  uploadFile: (\n    data: ReadableStream | NodeJS.ReadableStream,\n    purpose: FilePurpose,\n    options?: UploadFileOptionalParams,\n  ) => PollerLike<OperationState<OpenAIFileOutput>, OpenAIFileOutput>;\n\n  /** Uploads a file for use by other operations. */\n  uploadFileAndPoll: (\n    data: ReadableStream | NodeJS.ReadableStream,\n    purpose: FilePurpose,\n    options?: UploadFileOptionalParams,\n  ) => PollerLike<OperationState<OpenAIFileOutput>, OpenAIFileOutput>;\n  /** Delete a previously uploaded file. */\n  deleteFile: (\n    fileId: string,\n    options?: DeleteFileOptionalParams,\n  ) => Promise<FileDeletionStatusOutput>;\n  /** Returns information about a specific file. Does not retrieve file content. */\n  getFile: (fileId: string, options?: GetFileOptionalParams) => Promise<OpenAIFileOutput>;\n  /** Returns the content of a specific file. */\n  getFileContent: (\n    fileId: string,\n    options?: GetFileContentOptionalParams,\n  ) => StreamableMethod<string | Uint8Array>;\n\n  /** Returns a list of vector stores. */\n  listVectorStores: (\n    options?: DeleteVectorStoreOptionalParams,\n  ) => Promise<OpenAIPageableListOfVectorStoreOutput>;\n  /** Creates a vector store. */\n  createVectorStore: (\n    options?: CreateVectorStoreOptionalParams,\n  ) => PollerLike<OperationState<VectorStoreOutput>, VectorStoreOutput>;\n  /** Returns the vector store object object matching the specific ID. */\n  getVectorStore: (\n    vectorStoreId: string,\n    options?: DeleteVectorStoreOptionalParams,\n  ) => Promise<VectorStoreOutput>;\n  /** The ID of the vector store to modify. */\n  modifyVectorStore: (\n    vectorStoreId: string,\n    options?: UpdateVectorStoreOptionalParams,\n  ) => Promise<VectorStoreOutput>;\n  /** Deletes the vector store object matching the specified ID. */\n  deleteVectorStore: (\n    vectorStoreId: string,\n    options?: DeleteVectorStoreOptionalParams,\n  ) => Promise<VectorStoreDeletionStatusOutput>;\n\n  /** Create vector store and poll. */\n  createVectorStoreAndPoll: (\n    options?: CreateVectorStoreOptionalParams,\n  ) => PollerLike<OperationState<VectorStoreOutput>, VectorStoreOutput>;\n\n  /** Create a vector store file by attching a file to a vector store. */\n  createVectorStoreFile: (\n    vectorStoreId: string,\n    options?: CreateVectorStoreFileOptionalParams,\n  ) => PollerLike<OperationState<VectorStoreFileOutput>, VectorStoreFileOutput>;\n  /** Retrieves a vector store file. */\n  getVectorStoreFile: (\n    vectorStoreId: string,\n    fileId: string,\n    options?: GetVectorStoreFileOptionalParams,\n  ) => Promise<VectorStoreFileOutput>;\n  /** Returns a list of vector store files. */\n  listVectorStoreFiles: (\n    vectorStoreId: string,\n    options?: ListVectorStoreFilesOptionalParams,\n  ) => Promise<OpenAIPageableListOfVectorStoreFileOutput>;\n  /**\n   * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted.\n   * To delete the file, use the delete file endpoint.\n   */\n  deleteVectorStoreFile: (\n    vectorStoreId: string,\n    fileId: string,\n    options?: DeleteVectorStoreFileOptionalParams,\n  ) => Promise<VectorStoreFileDeletionStatusOutput>;\n  /** Create a vector store file by attaching a file to a vector store and poll. */\n  createVectorStoreFileAndPoll: (\n    vectorStoreId: string,\n    options?: CreateVectorStoreFileOptionalParams,\n  ) => PollerLike<OperationState<VectorStoreFileOutput>, VectorStoreFileOutput>;\n\n  /** Create a vector store file batch. */\n  createVectorStoreFileBatch: (\n    vectorStoreId: string,\n    options?: CreateVectorStoreFileBatchOptionalParams,\n  ) => PollerLike<OperationState<VectorStoreFileBatchOutput>, VectorStoreFileBatchOutput>;\n  /** Retrieve a vector store file batch. */\n  getVectorStoreFileBatch: (\n    vectorStoreId: string,\n    batchId: string,\n    options?: GetVectorStoreFileBatchOptionalParams,\n  ) => Promise<VectorStoreFileBatchOutput>;\n  /** Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. */\n  cancelVectorStoreFileBatch: (\n    vectorStoreId: string,\n    batchId: string,\n    options?: CancelVectorStoreFileBatchOptionalParams,\n  ) => Promise<VectorStoreFileBatchOutput>;\n  /** Returns a list of vector store files in a batch. */\n  listVectorStoreFileBatchFiles: (\n    vectorStoreId: string,\n    batchId: string,\n    options?: ListVectorStoreFileBatchFilesOptionalParams,\n  ) => Promise<OpenAIPageableListOfVectorStoreFileOutput>;\n  /** Create a vector store file batch and poll. */\n  createVectorStoreFileBatchAndPoll: (\n    vectorStoreId: string,\n    options?: CreateVectorStoreFileBatchOptionalParams,\n  ) => PollerLike<OperationState<VectorStoreFileBatchOutput>, VectorStoreFileBatchOutput>;\n\n  /** Gets a single run step from a thread run. */\n  getRunStep: (\n    threadId: string,\n    runId: string,\n    stepId: string,\n    options?: GetRunStepOptionalParams,\n  ) => Promise<RunStepOutput>;\n  /** Gets a list of run steps from a thread run. */\n  listRunSteps: (\n    threadId: string,\n    runId: string,\n    options?: ListRunQueryOptionalParams,\n  ) => Promise<OpenAIPageableListOfRunStepOutput>;\n}\n\nfunction getAgents(context: Client): AgentsOperations {\n  return {\n    createAgent: (model: string, options?: CreateAgentOptionalParams) =>\n      createAgent(context, model, options),\n    listAgents: (options?: ListAgentsOptionalParams) => listAgents(context, options),\n    getAgent: (assistantId: string, options?: GetAgentOptionalParams) =>\n      getAgent(context, assistantId, options),\n    updateAgent: (assistantId: string, options: UpdateAgentOptionalParams) =>\n      updateAgent(context, assistantId, options),\n    deleteAgent: (assistantId: string, options?: DeleteAgentOptionalParams) =>\n      deleteAgent(context, assistantId, options),\n\n    createThread: (options?: CreateAgentThreadOptionalParams) => createThread(context, options),\n    getThread: (threadId: string, options?: GetAgentThreadOptionalParams) =>\n      getThread(context, threadId, options),\n    updateThread: (threadId: string, options?: UpdateAgentThreadOptionalParams) =>\n      updateThread(context, threadId, options),\n    deleteThread: (threadId: string, options?: DeleteAgentThreadOptionalParams) =>\n      deleteThread(context, threadId, options),\n\n    createRun: (threadId: string, assistantId: string, options?: CreateRunOptionalParams) =>\n      createRun(context, threadId, assistantId, options ?? {}),\n    listRuns: (threadId: string, options?: ListRunQueryOptionalParams) =>\n      listRuns(context, threadId, options ?? {}),\n    getRun: (threadId: string, runId: string, options?: GetRunOptionalParams) =>\n      getRun(context, threadId, runId, options),\n    updateRun: (threadId: string, runId: string, options?: UpdateRunOptionalParams) =>\n      updateRun(context, threadId, runId, options),\n    submitToolOutputsToRun: (\n      threadId: string,\n      runId: string,\n      toolOutputs: Array<ToolOutput>,\n      options?: SubmitToolOutputsToRunOptionalParams,\n    ) => submitToolOutputsToRun(context, threadId, runId, toolOutputs, options),\n    cancelRun: (threadId: string, runId: string, options?: CancelRunOptionalParams) =>\n      cancelRun(context, threadId, runId, options),\n    createThreadAndRun: (assistantId: string, options?: CreateAndRunThreadOptionalParams) =>\n      createThreadAndRun(context, assistantId, options ?? {}),\n\n    createMessage: (\n      threadId: string,\n      messageOptions: ThreadMessageOptions,\n      options?: CreateMessageOptionalParams,\n    ) => createMessage(context, threadId, messageOptions, options),\n    listMessages: (threadId: string, options?: ListMessagesOptionalParams) =>\n      listMessages(context, threadId, options),\n    updateMessage: (threadId: string, messageId: string, options?: UpdateMessageOptionalParams) =>\n      updateMessage(context, threadId, messageId, options),\n\n    listFiles: (options?: ListFilesOptionalParams) => listFiles(context, options),\n    uploadFile: (\n      content: ReadableStream | NodeJS.ReadableStream,\n      purpose: FilePurpose,\n      options?: UploadFileOptionalParams,\n    ) => uploadFile(context, content, purpose, options),\n    uploadFileAndPoll: (\n      content: ReadableStream | NodeJS.ReadableStream,\n      purpose: FilePurpose,\n      options?: UploadFileOptionalParams,\n    ) => uploadFileAndPoll(context, content, purpose, options),\n    deleteFile: (fileId: string, options?: DeleteFileOptionalParams) =>\n      deleteFile(context, fileId, options),\n    getFile: (fileId: string, options?: GetFileOptionalParams) => getFile(context, fileId, options),\n    getFileContent: (fileId: string, options?: GetFileContentOptionalParams) =>\n      getFileContent(context, fileId, options),\n\n    listVectorStores: (options?: ListVectorStoresOptionalParams) =>\n      listVectorStores(context, options),\n    createVectorStore: (options?: CreateVectorStoreOptionalParams) =>\n      createVectorStore(context, options),\n    getVectorStore: (vectorStoreId: string, options?: GetVectorStoreOptionalParams) =>\n      getVectorStore(context, vectorStoreId, options),\n    modifyVectorStore: (vectorStoreId: string, options?: UpdateVectorStoreOptionalParams) =>\n      modifyVectorStore(context, vectorStoreId, options),\n    deleteVectorStore: (vectorStoreId: string, options?: DeleteVectorStoreOptionalParams) =>\n      deleteVectorStore(context, vectorStoreId, options),\n    createVectorStoreAndPoll: (options?: CreateVectorStoreOptionalParams) =>\n      createVectorStoreAndPoll(context, options),\n\n    createVectorStoreFile: (vectorStoreId: string, options?: CreateVectorStoreFileOptionalParams) =>\n      createVectorStoreFile(context, vectorStoreId, options),\n    getVectorStoreFile: (\n      vectorStoreId: string,\n      fileId: string,\n      options?: GetVectorStoreFileOptionalParams,\n    ) => getVectorStoreFile(context, vectorStoreId, fileId, options),\n    listVectorStoreFiles: (vectorStoreId: string, options?: ListVectorStoreFilesOptionalParams) =>\n      listVectorStoreFiles(context, vectorStoreId, options),\n    deleteVectorStoreFile: (\n      vectorStoreId: string,\n      fileId: string,\n      options?: DeleteVectorStoreFileOptionalParams,\n    ) => deleteVectorStoreFile(context, vectorStoreId, fileId, options),\n    createVectorStoreFileAndPoll: (\n      vectorStoreId: string,\n      options?: CreateVectorStoreFileOptionalParams,\n    ) => createVectorStoreFileAndPoll(context, vectorStoreId, options),\n\n    createVectorStoreFileBatch: (\n      vectorStoreId: string,\n      options?: CreateVectorStoreFileBatchOptionalParams,\n    ) => createVectorStoreFileBatch(context, vectorStoreId, options),\n    getVectorStoreFileBatch: (\n      vectorStoreId: string,\n      batchId: string,\n      options?: GetVectorStoreFileBatchOptionalParams,\n    ) => getVectorStoreFileBatch(context, vectorStoreId, batchId, options),\n    cancelVectorStoreFileBatch: (\n      vectorStoreId: string,\n      batchId: string,\n      options?: CancelVectorStoreFileBatchOptionalParams,\n    ) => cancelVectorStoreFileBatch(context, vectorStoreId, batchId, options),\n    listVectorStoreFileBatchFiles: (\n      vectorStoreId: string,\n      batchId: string,\n      options?: ListVectorStoreFileBatchFilesOptionalParams,\n    ) => listVectorStoreFileBatchFiles(context, vectorStoreId, batchId, options),\n    createVectorStoreFileBatchAndPoll: (\n      vectorStoreId: string,\n      options?: CreateVectorStoreFileBatchOptionalParams,\n    ) => createVectorStoreFileBatchAndPoll(context, vectorStoreId, options),\n\n    getRunStep: (\n      threadId: string,\n      runId: string,\n      stepId: string,\n      options?: GetRunStepOptionalParams,\n    ) => getRunStep(context, threadId, runId, stepId, options),\n    listRunSteps: (threadId: string, runId: string, options?: ListRunStepsOptionalParams) =>\n      listRunSteps(context, threadId, runId, options),\n  };\n}\n\nexport function getAgentsOperations(context: Client): AgentsOperations {\n  return {\n    ...getAgents(context),\n  };\n}\n"]}
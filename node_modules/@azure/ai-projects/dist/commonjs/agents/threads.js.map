{"version":3,"file":"threads.js","sourceRoot":"","sources":["../../../src/agents/threads.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Client } from \"@azure-rest/core-client\";\nimport { operationOptionsToRequestParameters } from \"@azure-rest/core-client\";\nimport type * as GeneratedParameters from \"../generated/src/parameters.js\";\nimport * as ConverterToWire from \"../customization/convertModelsToWrite.js\";\nimport * as ConverterFromWire from \"../customization/convertOutputModelsFromWire.js\";\nimport type {\n  AgentThreadOutput,\n  ThreadDeletionStatusOutput,\n} from \"../customization/outputModels.js\";\nimport { TracingUtility } from \"../tracing.js\";\nimport { traceEndCreateThread, traceStartCreateThread } from \"./threadsTrace.js\";\nimport {\n  validateMessages,\n  validateMetadata,\n  validateThreadId,\n  validateToolResources,\n} from \"./inputValidations.js\";\nimport { traceStartAgentGeneric } from \"./traceUtility.js\";\nimport type {\n  CreateAgentThreadOptionalParams,\n  DeleteAgentThreadOptionalParams,\n  GetAgentThreadOptionalParams,\n  UpdateAgentThreadOptionalParams,\n} from \"./customModels.js\";\nimport { convertThreadDeletionStatusOutput } from \"../customization/convertOutputModelsFromWire.js\";\nimport { createOpenAIError } from \"./openAIError.js\";\n\nconst expectedStatuses = [\"200\"];\n\n/** Creates a new thread. Threads contain messages and can be run by agents. */\nexport async function createThread(\n  context: Client,\n  options: CreateAgentThreadOptionalParams = {},\n): Promise<AgentThreadOutput> {\n  const createThreadOptions: GeneratedParameters.CreateThreadParameters = {\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      ...ConverterToWire.convertAgentThreadCreationOptions(options),\n    },\n  };\n\n  validateCreateThreadParameters(createThreadOptions);\n  const response = await TracingUtility.withSpan(\n    \"CreateThread\",\n    createThreadOptions,\n    async (updatedOptions) => {\n      const result = await context.path(\"/threads\").post(updatedOptions);\n      if (!expectedStatuses.includes(result.status)) {\n        throw createOpenAIError(result);\n      }\n      return result.body;\n    },\n    traceStartCreateThread,\n    traceEndCreateThread,\n  );\n\n  return ConverterFromWire.convertAgentThreadOutput(response);\n}\n\n/** Gets information about an existing thread. */\nexport async function getThread(\n  context: Client,\n  threadId: string,\n  options: GetAgentThreadOptionalParams = {},\n): Promise<AgentThreadOutput> {\n  const getThreadOptions: GeneratedParameters.GetThreadParameters = {\n    ...operationOptionsToRequestParameters(options),\n  };\n\n  validateThreadId(threadId);\n  const response = await TracingUtility.withSpan(\n    \"GetThread\",\n    getThreadOptions,\n    async (updatedOptions) => {\n      const result = await context.path(\"/threads/{threadId}\", threadId).get(updatedOptions);\n      if (!expectedStatuses.includes(result.status)) {\n        throw createOpenAIError(result);\n      }\n      return result.body;\n    },\n    (span, updatedOptions) =>\n      traceStartAgentGeneric(span, {\n        ...updatedOptions,\n        tracingAttributeOptions: { threadId: threadId },\n      }),\n  );\n\n  return ConverterFromWire.convertAgentThreadOutput(response);\n}\n\n/** Modifies an existing thread. */\nexport async function updateThread(\n  context: Client,\n  threadId: string,\n  options: UpdateAgentThreadOptionalParams = {},\n): Promise<AgentThreadOutput> {\n  const updateThreadOptions: GeneratedParameters.UpdateThreadParameters = {\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      ...ConverterToWire.convertAgentThreadUpdateOptions(options),\n    },\n  };\n\n  validateUpdateThreadParameters(threadId, updateThreadOptions);\n  const response = await TracingUtility.withSpan(\n    \"UpdateThread\",\n    updateThreadOptions,\n    async (updatedOptions) => {\n      const result = await context.path(\"/threads/{threadId}\", threadId).post(updatedOptions);\n      if (!expectedStatuses.includes(result.status)) {\n        throw createOpenAIError(result);\n      }\n      return result.body;\n    },\n    (span, updatedOptions) =>\n      traceStartAgentGeneric(span, {\n        ...updatedOptions,\n        tracingAttributeOptions: { threadId: threadId },\n      }),\n  );\n\n  return ConverterFromWire.convertAgentThreadOutput(response);\n}\n\n/** Deletes an existing thread. */\nexport async function deleteThread(\n  context: Client,\n  threadId: string,\n  options: DeleteAgentThreadOptionalParams = {},\n): Promise<ThreadDeletionStatusOutput> {\n  const deleteThreadOptions: GeneratedParameters.DeleteAgentParameters = {\n    ...operationOptionsToRequestParameters(options),\n  };\n\n  validateThreadId(threadId);\n  const response = await TracingUtility.withSpan(\n    \"DeleteThread\",\n    deleteThreadOptions,\n    async (updatedOptions) => {\n      const result = await context.path(\"/threads/{threadId}\", threadId).delete(updatedOptions);\n      if (!expectedStatuses.includes(result.status)) {\n        throw createOpenAIError(result);\n      }\n      return result.body;\n    },\n    (span, updatedOptions) =>\n      traceStartAgentGeneric(span, {\n        ...updatedOptions,\n        tracingAttributeOptions: { threadId: threadId },\n      }),\n  );\n\n  return convertThreadDeletionStatusOutput(response);\n}\n\nfunction validateCreateThreadParameters(\n  options?: GeneratedParameters.CreateThreadParameters,\n): void {\n  if (options?.body.messages) {\n    options.body.messages.forEach((message) => validateMessages(message.role));\n  }\n  if (options?.body.tool_resources) {\n    validateToolResources(options.body.tool_resources);\n  }\n  if (options?.body.metadata) {\n    validateMetadata(options.body.metadata);\n  }\n}\n\nfunction validateUpdateThreadParameters(\n  threadId: string,\n  options?: GeneratedParameters.UpdateThreadParameters,\n): void {\n  validateThreadId(threadId);\n  if (options?.body.tool_resources) {\n    validateToolResources(options.body.tool_resources);\n  }\n  if (options?.body.metadata) {\n    validateMetadata(options.body.metadata);\n  }\n}\n"]}
"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVectorStoreFileBatch = createVectorStoreFileBatch;
exports.getVectorStoreFileBatch = getVectorStoreFileBatch;
exports.cancelVectorStoreFileBatch = cancelVectorStoreFileBatch;
exports.listVectorStoreFileBatchFiles = listVectorStoreFileBatchFiles;
exports.createVectorStoreFileBatchAndPoll = createVectorStoreFileBatchAndPoll;
exports.createVectorStoreFileBatchInternal = createVectorStoreFileBatchInternal;
const tslib_1 = require("tslib");
const core_client_1 = require("@azure-rest/core-client");
const poller_js_1 = require("./poller.js");
const inputValidations_js_1 = require("./inputValidations.js");
const ConvertFromWire = tslib_1.__importStar(require("../customization/convertOutputModelsFromWire.js"));
const ConvertParamsToWire = tslib_1.__importStar(require("../customization/convertParametersToWire.js"));
const openAIError_js_1 = require("./openAIError.js");
const expectedStatuses = ["200"];
/** Create a vector store file batch. */
function createVectorStoreFileBatch(context, vectorStoreId, options = {}) {
    var _a;
    return (0, poller_js_1.createPoller)({
        initOperation: async () => {
            return createVectorStoreFileBatchInternal(context, vectorStoreId, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStoreFileBatch(context, vectorStoreId, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        intervalInMs: (_a = options.pollingOptions) === null || _a === void 0 ? void 0 : _a.sleepIntervalInMs,
    });
}
/** Retrieve a vector store file batch. */
async function getVectorStoreFileBatch(context, vectorStoreId, batchId, options = {}) {
    (0, inputValidations_js_1.validateVectorStoreId)(vectorStoreId);
    const result = await context
        .path("/vector_stores/{vectorStoreId}/file_batches/{batchId}", vectorStoreId, batchId)
        .get(options);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, openAIError_js_1.createOpenAIError)(result);
    }
    return ConvertFromWire.convertVectorStoreFileBatchOutput(result.body);
}
/** Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. */
async function cancelVectorStoreFileBatch(context, vectorStoreId, batchId, options = {}) {
    (0, inputValidations_js_1.validateVectorStoreId)(vectorStoreId);
    const result = await context
        .path("/vector_stores/{vectorStoreId}/file_batches/{batchId}/cancel", vectorStoreId, batchId)
        .post(options);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, openAIError_js_1.createOpenAIError)(result);
    }
    return ConvertFromWire.convertVectorStoreFileBatchOutput(result.body);
}
/** Returns a list of vector store files in a batch. */
async function listVectorStoreFileBatchFiles(context, vectorStoreId, batchId, options = {}) {
    const listOptions = Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { queryParameters: ConvertParamsToWire.convertListVectorStoreFileBatchFilesQueryParamProperties(options) });
    (0, inputValidations_js_1.validateVectorStoreId)(vectorStoreId);
    validateBatchId(batchId);
    validateListVectorStoreFileBatchFilesParameters(listOptions);
    const result = await context
        .path("/vector_stores/{vectorStoreId}/file_batches/{batchId}/files", vectorStoreId, batchId)
        .get(listOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, openAIError_js_1.createOpenAIError)(result);
    }
    return ConvertFromWire.convertOpenAIPageableListOfVectorStoreFileOutput(result.body);
}
/** Create a vector store file batch and poll. */
function createVectorStoreFileBatchAndPoll(context, vectorStoreId, options = {}) {
    var _a;
    return (0, poller_js_1.createPoller)({
        initOperation: async () => {
            return createVectorStoreFileBatchInternal(context, vectorStoreId, options);
        },
        pollOperation: async (currentResult) => {
            return getVectorStoreFileBatch(context, vectorStoreId, currentResult.id, options);
        },
        getOperationStatus: getLroOperationStatus,
        intervalInMs: (_a = options.pollingOptions) === null || _a === void 0 ? void 0 : _a.sleepIntervalInMs,
    });
}
async function createVectorStoreFileBatchInternal(context, vectorStoreId, options = {}) {
    const createOptions = Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), ConvertParamsToWire.convertCreateVectorStoreFileBatchParam({ body: options }));
    (0, inputValidations_js_1.validateVectorStoreId)(vectorStoreId);
    validateCreateVectorStoreFileBatchParameters(createOptions);
    const result = await context
        .path("/vector_stores/{vectorStoreId}/file_batches", vectorStoreId)
        .post(createOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, openAIError_js_1.createOpenAIError)(result);
    }
    return ConvertFromWire.convertVectorStoreFileBatchOutput(result.body);
}
function getLroOperationStatus(result) {
    switch (result.status) {
        case "in_progress":
            return "running";
        case "completed":
            return "succeeded";
        case "cancelled":
            return "canceled";
        default:
            return "failed";
    }
}
function validateBatchId(batchId) {
    if (!batchId) {
        throw new Error("Batch ID is required");
    }
}
function validateCreateVectorStoreFileBatchParameters(options) {
    var _a;
    if (((_a = options === null || options === void 0 ? void 0 : options.body) === null || _a === void 0 ? void 0 : _a.chunking_strategy) &&
        (!options.body.file_ids || options.body.file_ids.length === 0)) {
        throw new Error("Chunking strategy is only applicable if fileIds are included");
    }
}
function validateListVectorStoreFileBatchFilesParameters(options) {
    var _a, _b, _c;
    if ((_a = options === null || options === void 0 ? void 0 : options.queryParameters) === null || _a === void 0 ? void 0 : _a.filter) {
        (0, inputValidations_js_1.validateFileStatusFilter)(options.queryParameters.filter);
    }
    if ((_b = options === null || options === void 0 ? void 0 : options.queryParameters) === null || _b === void 0 ? void 0 : _b.limit) {
        (0, inputValidations_js_1.validateLimit)(options.queryParameters.limit);
    }
    if ((_c = options === null || options === void 0 ? void 0 : options.queryParameters) === null || _c === void 0 ? void 0 : _c.order) {
        (0, inputValidations_js_1.validateOrder)(options.queryParameters.order);
    }
}
//# sourceMappingURL=vectorStoresFileBatches.js.map
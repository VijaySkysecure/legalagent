"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertAgentOutput = convertAgentOutput;
exports.convertOpenAIPageableListOfAgentOutput = convertOpenAIPageableListOfAgentOutput;
exports.convertAgentDeletionStatusOutput = convertAgentDeletionStatusOutput;
exports.convertAgentThreadOutput = convertAgentThreadOutput;
exports.convertThreadDeletionStatusOutput = convertThreadDeletionStatusOutput;
exports.convertThreadMessageOutput = convertThreadMessageOutput;
exports.convertThreadRunOutput = convertThreadRunOutput;
exports.convertOpenAIPageableListOfThreadRunOutput = convertOpenAIPageableListOfThreadRunOutput;
exports.convertRunStepOutput = convertRunStepOutput;
exports.convertOpenAIPageableListOfRunStepOutput = convertOpenAIPageableListOfRunStepOutput;
exports.convertOpenAIPageableListOfThreadMessageOutput = convertOpenAIPageableListOfThreadMessageOutput;
exports.convertOpenAIPageableListOfVectorStoreOutput = convertOpenAIPageableListOfVectorStoreOutput;
exports.convertVectorStoreOutput = convertVectorStoreOutput;
exports.convertVectorStoreDeletionStatusOutput = convertVectorStoreDeletionStatusOutput;
exports.convertVectorStoreFileBatchOutput = convertVectorStoreFileBatchOutput;
exports.convertOpenAIPageableListOfVectorStoreFileOutput = convertOpenAIPageableListOfVectorStoreFileOutput;
exports.convertVectorStoreFileOutput = convertVectorStoreFileOutput;
exports.convertVectorStoreFileDeletionStatusOutput = convertVectorStoreFileDeletionStatusOutput;
exports.convertOpenAIFileOutput = convertOpenAIFileOutput;
exports.convertFileListResponseOutput = convertFileListResponseOutput;
exports.convertMessageDeltaChunkOutput = convertMessageDeltaChunkOutput;
exports.convertRunStepDeltaChunk = convertRunStepDeltaChunk;
const logger_js_1 = require("../logger.js");
// Conversion functions
function convertAzureFunctionToolDefinitionOutput(input) {
    return {
        type: "azure_function",
        azureFunction: Object.assign(Object.assign({}, input.azure_function), { inputBinding: Object.assign(Object.assign({}, input.azure_function.input_binding), { storageQueue: {
                    queueServiceEndpoint: input.azure_function.input_binding.storage_queue.queue_service_endpoint,
                    queueName: input.azure_function.input_binding.storage_queue.queue_name,
                } }), outputBinding: Object.assign(Object.assign({}, input.azure_function.output_binding), { storageQueue: {
                    queueServiceEndpoint: input.azure_function.output_binding.storage_queue.queue_service_endpoint,
                    queueName: input.azure_function.output_binding.storage_queue.queue_name,
                } }) }),
    };
}
function convertCodeInterpreterToolDefinitionOutput(input) {
    return Object.assign({}, input);
}
function convertFileSearchToolDefinitionOutput(input) {
    return {
        type: "file_search",
        fileSearch: input.file_search
            ? convertFileSearchToolDefinitionDetailsOutput(input.file_search)
            : undefined,
    };
}
function convertFileSearchToolDefinitionDetailsOutput(input) {
    return {
        maxNumResults: input.max_num_results,
        rankingOptions: input.ranking_options
            ? convertFileSearchRankingOptionsOutput(input.ranking_options)
            : undefined,
    };
}
function convertFileSearchRankingOptionsOutput(input) {
    return {
        ranker: input.ranker,
        scoreThreshold: input.score_threshold,
    };
}
function convertFunctionToolDefinitionOutput(input) {
    return {
        type: "function",
        function: input.function && convertFunctionDefinitionOutput(input.function),
    };
}
function convertFunctionDefinitionOutput(input) {
    return Object.assign({}, input);
}
function convertBingGroundingToolDefinitionOutput(input) {
    return {
        type: "bing_grounding",
        bingGrounding: input.bing_grounding && convertToolConnectionListOutput(input.bing_grounding),
    };
}
function convertToolConnectionListOutput(input) {
    var _a;
    return {
        connections: (_a = input.connections) === null || _a === void 0 ? void 0 : _a.map(convertToolConnectionOutput),
    };
}
function convertToolConnectionOutput(input) {
    return { connectionId: input.connection_id };
}
function convertMicrosoftFabricToolDefinitionOutput(input) {
    return {
        type: "fabric_dataagent",
        fabricDataAgent: input.fabric_dataagent && convertToolConnectionListOutput(input.fabric_dataagent),
    };
}
function convertSharepointToolDefinitionOutput(input) {
    return {
        type: "sharepoint_grounding",
        sharepointGrounding: input.sharepoint_grounding && convertToolConnectionListOutput(input.sharepoint_grounding),
    };
}
function convertAzureAISearchToolDefinitionOutput(input) {
    return Object.assign({}, input);
}
function convertToolResourcesOutput(input) {
    return {
        codeInterpreter: input.code_interpreter
            ? convertCodeInterpreterToolResourceOutput(input.code_interpreter)
            : undefined,
        fileSearch: input.file_search
            ? convertFileSearchToolResourceOutput(input.file_search)
            : undefined,
        azureAISearch: input.azure_ai_search
            ? convertAzureAISearchResourceOutput(input.azure_ai_search)
            : undefined,
    };
}
function convertCodeInterpreterToolResourceOutput(input) {
    var _a;
    return {
        fileIds: input.file_ids,
        dataSources: (_a = input.data_sources) === null || _a === void 0 ? void 0 : _a.map(convertVectorStoreDataSourceOutput),
    };
}
function convertVectorStoreDataSourceOutput(input) {
    return Object.assign({}, input);
}
function convertFileSearchToolResourceOutput(input) {
    var _a;
    return {
        vectorStoreIds: input.vector_store_ids,
        vectorStores: (_a = input.vector_stores) === null || _a === void 0 ? void 0 : _a.map(convertVectorStoreConfigurationsOutput),
    };
}
function convertVectorStoreConfigurationsOutput(input) {
    return {
        name: input.name,
        configuration: input.configuration && convertVectorStoreConfigurationOutput(input.configuration),
    };
}
function convertVectorStoreConfigurationOutput(input) {
    var _a;
    return Object.assign(Object.assign({}, input), { dataSources: (_a = input.data_sources) === null || _a === void 0 ? void 0 : _a.map(convertVectorStoreDataSourceOutput) });
}
function convertAzureAISearchResourceOutput(input) {
    var _a;
    return {
        indexes: (_a = input.indexes) === null || _a === void 0 ? void 0 : _a.map(convertIndexResourceOutput),
    };
}
function convertIndexResourceOutput(input) {
    return { indexConnectionId: input.index_connection_id, indexName: input.index_name };
}
function convertAgentOutput(input) {
    var _a;
    return {
        id: input.id,
        object: input.object,
        createdAt: new Date(input.created_at),
        name: input.name,
        description: input.description,
        model: input.model,
        instructions: input.instructions,
        tools: (_a = input.tools) === null || _a === void 0 ? void 0 : _a.map(convertToolDefinitionOutput),
        toolResources: input.tool_resources ? convertToolResourcesOutput(input.tool_resources) : null,
        temperature: input.temperature,
        topP: input.top_p,
        responseFormat: input.response_format
            ? convertAgentsApiResponseFormatOptionOutput(input.response_format)
            : null,
        metadata: input.metadata,
    };
}
function convertToolDefinitionOutput(tool) {
    switch (tool.type) {
        case "code_interpreter":
            return convertCodeInterpreterToolDefinitionOutput(tool);
        case "file_search":
            return convertFileSearchToolDefinitionOutput(tool);
        case "function":
            return convertFunctionToolDefinitionOutput(tool);
        case "bing_grounding":
            return convertBingGroundingToolDefinitionOutput(tool);
        case "fabric_dataagent":
            return convertMicrosoftFabricToolDefinitionOutput(tool);
        case "sharepoint_grounding":
            return convertSharepointToolDefinitionOutput(tool);
        case "azure_ai_search":
            return convertAzureAISearchToolDefinitionOutput(tool);
        case "azure_function":
            return convertAzureFunctionToolDefinitionOutput(tool);
        default:
            return tool;
    }
}
function convertAgentsApiResponseFormatOptionOutput(input) {
    const formatOutput = input;
    if (formatOutput && formatOutput.type) {
        switch (formatOutput.type) {
            case "json_schema":
                return {
                    type: formatOutput.type,
                    jsonSchema: formatOutput
                        .json_schema,
                };
            default:
                return input;
        }
    }
    return input;
}
function convertOpenAIPageableListOfAgentOutput(input) {
    return {
        object: input.object,
        firstId: input.first_id,
        lastId: input.last_id,
        hasMore: input.has_more,
        data: input.data.map(convertAgentOutput),
    };
}
function convertAgentDeletionStatusOutput(input) {
    return Object.assign({}, input);
}
function convertMessageAttachmentOutput(input) {
    var _a;
    return {
        fileId: input.file_id,
        dataSource: input.data_source && convertVectorStoreDataSourceOutput(input.data_source),
        tools: (_a = input.tools) === null || _a === void 0 ? void 0 : _a.map(convertMessageAttachmentToolDefinitionOutput),
    };
}
function convertMessageAttachmentToolDefinitionOutput(input) {
    switch (input.type) {
        case "code_interpreter":
            return convertCodeInterpreterToolDefinitionOutput(input);
        case "file_search":
            return convertFileSearchToolDefinitionOutput(input);
        default:
            throw new Error(`Unknown tool type: ${input}`);
    }
}
function convertAgentThreadOutput(input) {
    return {
        id: input.id,
        object: input.object,
        createdAt: new Date(input.created_at),
        toolResources: input.tool_resources ? convertToolResourcesOutput(input.tool_resources) : null,
        metadata: input.metadata,
    };
}
function convertThreadDeletionStatusOutput(input) {
    return Object.assign({}, input);
}
function convertThreadMessageOutput(input) {
    var _a, _b;
    return {
        id: input.id,
        object: input.object,
        createdAt: new Date(input.created_at),
        threadId: input.thread_id,
        status: input.status,
        incompleteDetails: input.incomplete_details
            ? convertMessageIncompleteDetailsOutput(input.incomplete_details)
            : null,
        completedAt: input.completed_at ? new Date(input.completed_at) : null,
        incompleteAt: input.incomplete_at ? new Date(input.incomplete_at) : null,
        role: input.role,
        content: (_a = input.content) === null || _a === void 0 ? void 0 : _a.map(convertMessageContentOutput),
        assistantId: input.assistant_id,
        runId: input.run_id,
        attachments: !input.attachments
            ? input.attachments
            : (_b = input.attachments) === null || _b === void 0 ? void 0 : _b.map(convertMessageAttachmentOutput),
        metadata: input.metadata,
    };
}
function convertMessageIncompleteDetailsOutput(input) {
    return Object.assign({}, input);
}
function convertMessageContentOutput(input) {
    switch (input.type) {
        case "text":
            return convertMessageTextContentOutput(input);
        case "image_file":
            return convertMessageImageFileContentOutput(input);
        default:
            return Object.assign({}, input);
    }
}
function convertMessageTextContentOutput(input) {
    return {
        type: input.type,
        text: input.text && convertMessageTextDetailsOutput(input.text),
    };
}
function convertMessageTextDetailsOutput(input) {
    var _a;
    return {
        value: input.value,
        annotations: (_a = input.annotations) === null || _a === void 0 ? void 0 : _a.map(convertMessageTextAnnotationOutput),
    };
}
function convertMessageTextAnnotationOutput(input) {
    switch (input.type) {
        case "file_citation":
            return convertMessageTextFileCitationAnnotationOutput(input);
        case "file_path":
            return convertMessageTextFilePathAnnotationOutput(input);
        default:
            return Object.assign({}, input);
    }
}
function convertMessageTextFileCitationAnnotationOutput(input) {
    return {
        type: input.type,
        text: input.text,
        fileCitation: input.file_citation && convertMessageTextFileCitationDetailsOutput(input.file_citation),
    };
}
function convertMessageTextFileCitationDetailsOutput(input) {
    return {
        fileId: input.file_id,
        quote: input.quote,
    };
}
function convertMessageTextFilePathAnnotationOutput(input) {
    return {
        type: input.type,
        filePath: input.file_path && convertMessageTextFilePathDetailsOutput(input.file_path),
        startIndex: input.start_index,
        endIndex: input.end_index,
        text: input.text,
    };
}
function convertMessageTextFilePathDetailsOutput(input) {
    return { fileId: input.file_id };
}
function convertMessageImageFileContentOutput(input) {
    return {
        type: input.type,
        imageFile: input.image_file && convertMessageImageFileDetailsOutput(input.image_file),
    };
}
function convertMessageImageFileDetailsOutput(input) {
    return { fileId: input.file_id };
}
function convertThreadRunOutput(input) {
    var _a, _b;
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ id: input.id, object: input.object, threadId: input.thread_id, assistantId: input.assistant_id, status: input.status }, (input.required_action && {
        requiredAction: convertRequiredActionOutput(input.required_action),
    })), { lastError: input.last_error, model: input.model, instructions: input.instructions, tools: (_b = (_a = input.tools) === null || _a === void 0 ? void 0 : _a.map(convertToolDefinitionOutput)) !== null && _b !== void 0 ? _b : [], createdAt: new Date(input.created_at), expiresAt: input.expires_at ? new Date(input.expires_at) : null, startedAt: input.started_at ? new Date(input.started_at) : null, completedAt: input.completed_at ? new Date(input.completed_at) : null, cancelledAt: input.cancelled_at ? new Date(input.cancelled_at) : null, failedAt: input.failed_at ? new Date(input.failed_at) : null, incompleteDetails: input.incomplete_details, usage: input.usage ? convertRunStepCompletionUsageOutput(input.usage) : null }), (input.temperature && { temperature: input.temperature })), (input.top_p && { topP: input.top_p })), { maxPromptTokens: input.max_prompt_tokens, maxCompletionTokens: input.max_completion_tokens, truncationStrategy: input.truncation_strategy
            ? convertTruncationObjectOutput(input.truncation_strategy)
            : null, toolChoice: input.tool_choice, responseFormat: input.response_format, metadata: input.metadata }), (input.tool_resources && {
        toolResources: convertToolResourcesOutput(input.tool_resources),
    })), { parallelToolCalls: input.parallel_tool_calls });
}
function convertRunCompletionUsageOutput(input) {
    return {
        completionTokens: input.completion_tokens,
        promptTokens: input.prompt_tokens,
        totalTokens: input.total_tokens,
    };
}
function convertRequiredActionOutput(input) {
    switch (input.type) {
        case "submit_tool_outputs":
            return convertSubmitToolOutputsActionOutput(input);
        default:
            return Object.assign({}, input);
    }
}
function convertSubmitToolOutputsActionOutput(input) {
    return {
        type: input.type,
        submitToolOutputs: input.submit_tool_outputs && convertSubmitToolOutputsDetailsOutput(input.submit_tool_outputs),
    };
}
function convertSubmitToolOutputsDetailsOutput(input) {
    var _a;
    return {
        toolCalls: (_a = input.tool_calls) === null || _a === void 0 ? void 0 : _a.map(convertRequiredToolCallOutput),
    };
}
function convertRequiredToolCallOutput(input) {
    switch (input.type) {
        case "function":
            return convertRequiredFunctionToolCallOutput(input);
        default:
            return Object.assign({}, input);
    }
}
function convertRequiredFunctionToolCallOutput(input) {
    return {
        id: input.id,
        type: input.type,
        function: input.function && convertRequiredFunctionToolCallDetailsOutput(input.function),
    };
}
function convertRequiredFunctionToolCallDetailsOutput(input) {
    return {
        name: input.name,
        arguments: input.arguments,
    };
}
function convertTruncationObjectOutput(input) {
    return {
        type: input.type,
        lastMessages: input.last_messages,
    };
}
function convertOpenAIPageableListOfThreadRunOutput(input) {
    var _a;
    return {
        object: input.object,
        firstId: input.first_id,
        lastId: input.last_id,
        hasMore: input.has_more,
        data: (_a = input.data) === null || _a === void 0 ? void 0 : _a.map(convertThreadRunOutput),
    };
}
function convertRunStepOutput(input) {
    return Object.assign(Object.assign({ id: input.id, object: input.object, type: input.type, assistantId: input.assistant_id, threadId: input.thread_id, runId: input.run_id, status: input.status, stepDetails: input.step_details && convertRunStepDetailsOutput(input.step_details), lastError: input.last_error ? convertRunStepErrorOutput(input.last_error) : null, createdAt: new Date(input.created_at), expiredAt: input.expired_at ? new Date(input.expired_at) : null, completedAt: input.completed_at ? new Date(input.completed_at) : null, failedAt: input.failed_at ? new Date(input.failed_at) : null, cancelledAt: input.cancelled_at ? new Date(input.cancelled_at) : null }, (input.usage && { usage: convertRunCompletionUsageOutput(input.usage) })), { metadata: input.metadata });
}
function convertRunStepDetailsOutput(input) {
    switch (input.type) {
        case "message_creation":
            return convertRunStepMessageCreationDetailsOutput(input);
        case "tool_call":
            return convertRunStepToolCallDetailsOutput(input);
        default: {
            throw new Error(`Unknown run step type: ${input.type}`);
        }
    }
}
function convertRunStepMessageCreationDetailsOutput(input) {
    return {
        type: input.type,
        messageCreation: convertRunStepMessageCreationReferenceOutput(input.message_creation),
    };
}
function convertRunStepMessageCreationReferenceOutput(input) {
    return {
        messageId: input.message_id,
    };
}
function convertRunStepToolCallDetailsOutput(input) {
    return {
        type: input.type,
        toolCalls: input.tool_calls && input.tool_calls.map(convertRunStepToolCallOutput),
    };
}
function convertRunStepToolCallOutput(input) {
    switch (input.type) {
        case "code_interpreter":
            return convertRunStepCodeInterpreterToolCallOutput(input);
        case "file_search":
            return convertRunStepFileSearchToolCallOutput(input);
        case "bing_grounding":
            return convertRunStepBingGroundingToolCallOutput(input);
        case "azure_ai_search":
            return convertRunStepAzureAISearchToolCallOutput(input);
        case "sharepoint_grounding":
            return convertRunStepSharepointToolCallOutput(input);
        case "fabric_dataagent":
            return convertRunStepMicrosoftFabricToolCallOutput(input);
        case "function":
            return convertRunStepFunctionToolCallOutput(input);
        default: {
            throw new Error(`Unknown run step tool call type: ${input.type}`);
        }
    }
}
function convertRunStepCodeInterpreterToolCallOutput(input) {
    return {
        type: input.type,
        id: input.id,
        codeInterpreter: input.code_interpreter &&
            convertRunStepCodeInterpreterToolCallDetailsOutput(input.code_interpreter),
    };
}
function convertRunStepFileSearchToolCallOutput(input) {
    return {
        type: input.type,
        id: input.id,
        fileSearch: input.file_search && convertRunStepFileSearchToolCallResultsOutput(input.file_search),
    };
}
function convertRunStepFileSearchToolCallResultsOutput(input) {
    var _a;
    return {
        rankingOptions: input.ranking_options && convertFileSearchRankingOptionsOutput(input.ranking_options),
        results: (_a = input.results) === null || _a === void 0 ? void 0 : _a.map(convertRunStepFileSearchToolCallResultOutput),
    };
}
function convertRunStepFileSearchToolCallResultOutput(input) {
    return {
        fileId: input.file_id,
        fileName: input.file_name,
        score: input.score,
        content: input.content,
    };
}
function convertRunStepBingGroundingToolCallOutput(input) {
    return {
        type: input.type,
        id: input.id,
        bingGrounding: input.bing_grounding,
    };
}
function convertRunStepAzureAISearchToolCallOutput(input) {
    return {
        type: input.type,
        id: input.id,
        azureAISearch: input.azure_ai_search,
    };
}
function convertRunStepSharepointToolCallOutput(input) {
    return {
        type: input.type,
        id: input.id,
        sharepointGrounding: input.sharepoint_grounding,
    };
}
function convertRunStepMicrosoftFabricToolCallOutput(input) {
    return {
        type: input.type,
        id: input.id,
        fabricDataAgent: input.fabric_dataagent,
    };
}
function convertRunStepFunctionToolCallOutput(input) {
    return {
        type: input.type,
        id: input.id,
        function: convertRunStepFunctionToolCallDetailsOutput(input.function),
    };
}
function convertRunStepFunctionToolCallDetailsOutput(input) {
    return {
        name: input.name,
        arguments: input.arguments,
        output: input.output,
    };
}
function convertRunStepCodeInterpreterToolCallDetailsOutput(input) {
    return {
        input: input.input,
        outputs: input.outputs && input.outputs.map(convertRunStepCodeInterpreterToolCallOutputOutput),
    };
}
function convertRunStepCodeInterpreterToolCallOutputOutput(input) {
    switch (input.type) {
        case "logs":
            return convertRunStepCodeInterpreterLogOutputOutput(input);
        case "image":
            return convertRunStepCodeInterpreterImageOutputOutput(input);
        default:
            return input;
    }
}
function convertRunStepCodeInterpreterLogOutputOutput(input) {
    return {
        type: input.type,
        logs: input.logs,
    };
}
function convertRunStepCodeInterpreterImageOutputOutput(input) {
    return {
        type: input.type,
        image: convertRunStepCodeInterpreterImageReferenceOutput(input.image),
    };
}
function convertRunStepCodeInterpreterImageReferenceOutput(input) {
    return {
        fileId: input.file_id,
    };
}
function convertRunStepErrorOutput(input) {
    return {
        code: input.code,
        message: input.message,
    };
}
function convertRunStepCompletionUsageOutput(input) {
    return {
        completionTokens: input.completion_tokens,
        promptTokens: input.prompt_tokens,
        totalTokens: input.total_tokens,
    };
}
function convertOpenAIPageableListOfRunStepOutput(input) {
    var _a;
    return {
        object: input.object,
        firstId: input.first_id,
        lastId: input.last_id,
        hasMore: input.has_more,
        data: (_a = input.data) === null || _a === void 0 ? void 0 : _a.map(convertRunStepOutput),
    };
}
function convertOpenAIPageableListOfThreadMessageOutput(input) {
    var _a;
    return {
        object: input.object,
        firstId: input.first_id,
        lastId: input.last_id,
        hasMore: input.has_more,
        data: (_a = input.data) === null || _a === void 0 ? void 0 : _a.map(convertThreadMessageOutput),
    };
}
function convertOpenAIPageableListOfVectorStoreOutput(input) {
    return {
        object: input.object,
        firstId: input.first_id,
        lastId: input.last_id,
        hasMore: input.has_more,
        data: input.data.map(convertVectorStoreOutput),
    };
}
function convertVectorStoreOutput(input) {
    return {
        id: input.id,
        object: input.object,
        createdAt: new Date(input.created_at),
        name: input.name,
        usageBytes: input.usage_bytes,
        fileCounts: convertVectorStoreFileCountOutput(input.file_counts),
        status: input.status,
        expiresAfter: input.expires_after
            ? convertVectorStoreExpirationPolicyOutput(input.expires_after)
            : undefined,
        expiresAt: input.expires_at ? new Date(input.expires_at) : null,
        lastActiveAt: input.last_active_at ? new Date(input.last_active_at) : null,
        metadata: input.metadata,
    };
}
function convertVectorStoreFileCountOutput(input) {
    return {
        inProgress: input.in_progress,
        completed: input.completed,
        failed: input.failed,
        cancelled: input.cancelled,
        total: input.total,
    };
}
function convertVectorStoreExpirationPolicyOutput(input) {
    return {
        anchor: input.anchor,
        days: input.days,
    };
}
function convertVectorStoreDeletionStatusOutput(input) {
    return {
        id: input.id,
        deleted: input.deleted,
        object: input.object,
    };
}
function convertVectorStoreFileBatchOutput(input) {
    return {
        id: input.id,
        object: input.object,
        createdAt: new Date(input.created_at),
        vectorStoreId: input.vector_store_id,
        status: input.status,
        fileCounts: convertVectorStoreFileCountOutput(input.file_counts),
    };
}
function convertOpenAIPageableListOfVectorStoreFileOutput(input) {
    return {
        object: input.object,
        firstId: input.first_id,
        lastId: input.last_id,
        hasMore: input.has_more,
        data: input.data.map(convertVectorStoreFileOutput),
    };
}
function convertVectorStoreFileOutput(input) {
    return {
        id: input.id,
        object: input.object,
        usageBytes: input.usage_bytes,
        createdAt: new Date(input.created_at),
        vectorStoreId: input.vector_store_id,
        status: input.status,
        lastError: input.last_error,
        chunkingStrategy: input.chunking_strategy &&
            convertVectorStoreChunkingStrategyResponseOutput(input.chunking_strategy),
    };
}
function convertVectorStoreChunkingStrategyResponseOutput(input) {
    switch (input.type) {
        case "auto":
            return input;
        case "static":
            return convertVectorStoreStaticChunkingStrategyResponseOutput(input);
        default:
            throw new Error(`Unknown chunking strategy type: ${input.type}`);
    }
}
function convertVectorStoreStaticChunkingStrategyResponseOutput(input) {
    return {
        type: input.type,
        static: input.static && convertVectorStoreStaticChunkingStrategyOptionsOutput(input.static),
    };
}
function convertVectorStoreStaticChunkingStrategyOptionsOutput(input) {
    return {
        maxChunkSizeTokens: input.max_chunk_size_tokens,
        chunkOverlapTokens: input.chunk_overlap_tokens,
    };
}
function convertVectorStoreFileDeletionStatusOutput(input) {
    return {
        id: input.id,
        deleted: input.deleted,
        object: input.object,
    };
}
function convertOpenAIFileOutput(input) {
    return {
        id: input.id,
        object: input.object,
        bytes: input.bytes,
        filename: input.filename,
        createdAt: new Date(input.created_at),
        purpose: input.purpose,
        status: input.status,
        statusDetails: input.status_details,
    };
}
function convertFileListResponseOutput(input) {
    return {
        object: input.object,
        data: input.data.map(convertOpenAIFileOutput),
    };
}
function convertMessageDelta(input) {
    var _a;
    return {
        role: input.role,
        content: (_a = input.content) === null || _a === void 0 ? void 0 : _a.map(convertStreamingMessageDeltaContent),
    };
}
function convertMessageDeltaChunkOutput(input) {
    return {
        id: input.id,
        object: input.object,
        delta: input.delta && convertMessageDelta(input.delta),
    };
}
function convertStreamingMessageDeltaContent(input) {
    switch (input.type) {
        case "text":
            return convertStreamingMessageTextContent(input);
        case "image":
            return convertStreamingMessageImageContent(input);
        default:
            logger_js_1.logger.error(`Unknown message content type: ${input.type}`);
            return {
                index: input.index,
                type: input.type,
            };
    }
}
function convertStreamingMessageTextContent(input) {
    return {
        index: input.index,
        type: input.type,
        text: input.text && convertStreamingMessageTextDetails(input.text),
    };
}
function convertStreamingMessageTextDetails(input) {
    var _a;
    return {
        value: input.value,
        annotations: (_a = input.annotations) === null || _a === void 0 ? void 0 : _a.map(convertStreamingMessageTextAnnotation),
    };
}
function convertStreamingMessageTextAnnotation(input) {
    switch (input.type) {
        case "file_citation":
            return convertStreamingMessageTextFileCitationAnnotation(input);
        case "file_path":
            return convertStreamingMessageTextFilePathAnnotation(input);
        default:
            return input;
    }
}
function convertStreamingMessageTextFileCitationAnnotation(input) {
    return {
        index: input.index,
        type: input.type,
        text: input.text,
        fileCitation: input.file_citation && convertStreamingMessageTextFileCitationDetails(input.file_citation),
        startIndex: input.start_index,
        endIndex: input.end_index,
    };
}
function convertStreamingMessageTextFileCitationDetails(input) {
    return {
        fileId: input.file_id,
        quote: input.quote,
    };
}
function convertStreamingMessageTextFilePathAnnotation(input) {
    return {
        index: input.index,
        type: input.type,
        text: input.text,
        filePath: input.file_path && convertStreamingMessageTextFilePathDetails(input.file_path),
        startIndex: input.start_index,
        endIndex: input.end_index,
    };
}
function convertStreamingMessageTextFilePathDetails(input) {
    return {
        fileId: input.file_id,
    };
}
function convertStreamingMessageImageContent(input) {
    return {
        index: input.index,
        type: input.type,
        imageFile: input.image_file && convertStreamingMessageImageFileDetails(input.image_file),
    };
}
function convertStreamingMessageImageFileDetails(input) {
    return {
        fileId: input.file_id,
    };
}
function convertRunStepDeltaChunk(input) {
    return {
        id: input.id,
        object: input.object,
        delta: input.delta && convertRunStepDelta(input.delta),
    };
}
function convertRunStepDelta(input) {
    return {
        stepDetails: input.step_details && convertRunStepDetailsDelta(input.step_details),
    };
}
function convertRunStepDetailsDelta(input) {
    switch (input.type) {
        case "message_creation":
            return convertRunStepMessageCreationDetailsDelta(input);
        case "tool_call":
            return convertRunStepToolCallDetailsDelta(input);
        default:
            logger_js_1.logger.error(`Unknown run step type: ${input.type}`);
            return { type: input.type };
    }
}
function convertRunStepMessageCreationDetailsDelta(input) {
    return {
        type: input.type,
        messageCreation: input.message_creation && convertRunStepDeltaMessageCreationObject(input.message_creation),
    };
}
function convertRunStepDeltaMessageCreationObject(input) {
    return {
        messageId: input.message_id,
    };
}
function convertRunStepToolCallDetailsDelta(input) {
    return {
        type: input.type,
        toolCalls: input.tool_calls && input.tool_calls.map(convertRunStepToolCallDelta),
    };
}
function convertRunStepToolCallDelta(input) {
    switch (input.type) {
        case "code_interpreter":
            return convertRunStepCodeInterpreterToolCallDelta(input);
        case "file_search":
            return convertRunStepFileSearchToolCallDelta(input);
        case "function":
            return convertRunStepFunctionToolCallDelta(input);
        default:
            logger_js_1.logger.error(`Unknown run step tool call type: ${input.type}`);
            return {
                index: input.index,
                id: input.id,
                type: input.type,
            };
    }
}
function convertRunStepCodeInterpreterToolCallDelta(input) {
    return {
        index: input.index,
        type: input.type,
        id: input.id,
        codeInterpreter: input.code_interpreter &&
            convertRunStepCodeInterpreterToolCallDetailsDelta(input.code_interpreter),
    };
}
function convertRunStepCodeInterpreterToolCallDetailsDelta(input) {
    return {
        input: input.input,
        outputs: input.outputs && input.outputs.map(convertRunStepCodeInterpreterToolCallOutputDelta),
    };
}
function convertRunStepCodeInterpreterToolCallOutputDelta(input) {
    switch (input.type) {
        case "logs":
            return convertRunStepCodeInterpreterLogOutputDelta(input);
        case "image":
            return convertRunStepCodeInterpreterImageOutputDelta(input);
        default:
            return input;
    }
}
function convertRunStepCodeInterpreterLogOutputDelta(input) {
    return {
        index: input.index,
        type: input.type,
        logs: input.logs,
    };
}
function convertRunStepCodeInterpreterImageOutputDelta(input) {
    return {
        index: input.index,
        type: input.type,
        image: input.image && convertRunStepCodeInterpreterImageReferenceDelta(input.image),
    };
}
function convertRunStepCodeInterpreterImageReferenceDelta(input) {
    return {
        fileId: input.file_id,
    };
}
function convertRunStepFunctionToolCallDelta(input) {
    return {
        index: input.index,
        type: input.type,
        id: input.id,
        function: input.function && convertRunStepFunctionToolCallDetailsDelta(input.function),
    };
}
function convertRunStepFunctionToolCallDetailsDelta(input) {
    return {
        name: input.name,
        arguments: input.arguments,
        output: input.output,
    };
}
function convertRunStepFileSearchToolCallDelta(input) {
    return {
        index: input.index,
        type: input.type,
        id: input.id,
        fileSearch: convertRunStepFileSearchToolCallResultsOutput(input.file_search),
    };
}
//# sourceMappingURL=convertOutputModelsFromWire.js.map
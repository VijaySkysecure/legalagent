{"version":3,"file":"convertParametersToWire.js","sourceRoot":"","sources":["../../../src/customization/convertParametersToWire.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAmBlC,wFAcC;AAED,8EAcC;AAED,oEASC;AAED,4HAOC;AAED,oFAMC;AAzED,uEAGmC;AAYnC,SAAgB,sCAAsC,CACpD,KAA2D;IAE3D,OAAO;QACL,IAAI,EAAE,KAAK,CAAC,IAAI,kDACX,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,GACxD,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,IAAI;YAC5B,YAAY,EAAE,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,sDAA4B,CAAC;SACvE,CAAC,GACC,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,IAAI;YACjC,iBAAiB,EAAE,IAAA,mEAAyC,EAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC;SAC1F,CAAC,CACH;KACF,CAAC;AACJ,CAAC;AAED,SAAgB,iCAAiC,CAC/C,KAAsD;IAEtD,OAAO;QACL,IAAI,EAAE,KAAK,CAAC,IAAI,kDACX,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GACrD,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,IAAI;YAC5B,YAAY,EAAE,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,sDAA4B,CAAC;SACvE,CAAC,GACC,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,IAAI;YACjC,iBAAiB,EAAE,IAAA,mEAAyC,EAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC;SAC1F,CAAC,CACH;KACF,CAAC;AACJ,CAAC;AAED,SAAgB,4BAA4B,CAC1C,OAAU;IAEV,mEACK,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,GAC3C,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,GAC3C,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,GAC3C,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,EACjD;AACJ,CAAC;AAED,SAAgB,wDAAwD,CACtE,OAA2E;IAE3E,uCACK,4BAA4B,CAAC,OAAO,CAAC,GACrC,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,EACjD;AACJ,CAAC;AAED,SAAgB,oCAAoC,CAClD,OAAuD;IAEvD,yBACK,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC,EACpD;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type * as PublicParameters from \"./parameters.js\";\nimport type * as GeneratedParameters from \"../generated/src/parameters.js\";\nimport {\n  convertVectorStoreChunkingStrategyRequest,\n  convertVectorStoreDataSource,\n} from \"./convertModelsToWrite.js\";\n\n/**\n * Request options for list requests.\n */\ninterface ListQueryParameters {\n  limit?: number;\n  order?: string;\n  after?: string;\n  before?: string;\n}\n\nexport function convertCreateVectorStoreFileBatchParam(\n  input: PublicParameters.CreateVectorStoreFileBatchBodyParam,\n): GeneratedParameters.CreateVectorStoreFileBatchBodyParam {\n  return {\n    body: input.body && {\n      ...(input.body.fileIds && { file_ids: input.body.fileIds }),\n      ...(input.body.dataSources && {\n        data_sources: input.body.dataSources.map(convertVectorStoreDataSource),\n      }),\n      ...(input.body.chunkingStrategy && {\n        chunking_strategy: convertVectorStoreChunkingStrategyRequest(input.body.chunkingStrategy),\n      }),\n    },\n  };\n}\n\nexport function convertCreateVectorStoreFileParam(\n  input: PublicParameters.CreateVectorStoreFileBodyParam,\n): GeneratedParameters.CreateVectorStoreFileBodyParam {\n  return {\n    body: input.body && {\n      ...(input.body.fileId && { file_id: input.body.fileId }),\n      ...(input.body.dataSources && {\n        data_sources: input.body.dataSources.map(convertVectorStoreDataSource),\n      }),\n      ...(input.body.chunkingStrategy && {\n        chunking_strategy: convertVectorStoreChunkingStrategyRequest(input.body.chunkingStrategy),\n      }),\n    },\n  };\n}\n\nexport function convertToListQueryParameters<T extends ListQueryParameters>(\n  options: T,\n): ListQueryParameters & Record<string, unknown> {\n  return {\n    ...(options.limit && { limit: options.limit }),\n    ...(options.order && { order: options.order }),\n    ...(options.after && { after: options.after }),\n    ...(options.before && { before: options.before }),\n  };\n}\n\nexport function convertListVectorStoreFileBatchFilesQueryParamProperties(\n  options: PublicParameters.ListVectorStoreFileBatchFilesQueryParamProperties,\n): GeneratedParameters.ListVectorStoreFileBatchFilesQueryParamProperties {\n  return {\n    ...convertToListQueryParameters(options),\n    ...(options.filter && { filter: options.filter }),\n  };\n}\n\nexport function convertListFilesQueryParamProperties(\n  options: PublicParameters.ListFilesQueryParamProperties,\n): GeneratedParameters.ListFilesQueryParamProperties & Record<string, unknown> {\n  return {\n    ...(options.purpose && { purpose: options.purpose }),\n  };\n}\n"]}
{"version":3,"file":"outputModels.js","sourceRoot":"","sources":["../../../src/customization/outputModels.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/** An abstract representation of an input tool definition that an agent can use. */\nexport interface ToolDefinitionOutputParent {\n  type: string;\n}\n\n/** The input definition information for a code interpreter tool as used to configure an agent. */\nexport interface CodeInterpreterToolDefinitionOutput extends ToolDefinitionOutputParent {\n  /** The object type, which is always 'code_interpreter'. */\n  type: \"code_interpreter\";\n}\n\n/** The input definition information for a file search tool as used to configure an agent. */\nexport interface FileSearchToolDefinitionOutput extends ToolDefinitionOutputParent {\n  /** The object type, which is always 'file_search'. */\n  type: \"file_search\";\n  /** Options overrides for the file search tool. */\n  fileSearch?: FileSearchToolDefinitionDetailsOutput;\n}\n\n/** Options overrides for the file search tool. */\nexport interface FileSearchToolDefinitionDetailsOutput {\n  /**\n   * The maximum number of results the file search tool should output. The default is 20 for gpt-4* models and 5 for gpt-3.5-turbo. This number should be between 1 and 50 inclusive.\n   *\n   * Note that the file search tool may output fewer than `maxNumResults` results. See the file search tool documentation for more information.\n   */\n  maxNumResults?: number;\n  /** Ranking options for file search. */\n  rankingOptions?: FileSearchRankingOptionsOutput;\n}\n\n/** Ranking options for file search. */\nexport interface FileSearchRankingOptionsOutput {\n  /** File search ranker. */\n  ranker: string;\n  /** Ranker search threshold. */\n  scoreThreshold: number;\n}\n\n/** The input definition information for a function tool as used to configure an agent. */\nexport interface FunctionToolDefinitionOutput extends ToolDefinitionOutputParent {\n  /** The object type, which is always 'function'. */\n  type: \"function\";\n  /** The definition of the concrete function that the function tool should call. */\n  function: FunctionDefinitionOutput;\n}\n\n/** The input definition information for a function. */\nexport interface FunctionDefinitionOutput {\n  /** The name of the function to be called. */\n  name: string;\n  /** A description of what the function does, used by the model to choose when and how to call the function. */\n  description?: string;\n  /** The parameters the functions accepts, described as a JSON Schema object. */\n  parameters: any;\n}\n\n/** The input definition information for a bing grounding search tool as used to configure an agent. */\nexport interface BingGroundingToolDefinitionOutput extends ToolDefinitionOutputParent {\n  /** The object type, which is always 'bing_grounding'. */\n  type: \"bing_grounding\";\n  /** The list of connections used by the bing grounding tool. */\n  bingGrounding: ToolConnectionListOutput;\n}\n\n/** A set of connection resources currently used by either the `bing_grounding`, `fabric_dataagent`, or `sharepoint_grounding` tools. */\nexport interface ToolConnectionListOutput {\n  /**\n   * The connections attached to this tool. There can be a maximum of 1 connection\n   * resource attached to the tool.\n   */\n  connections?: Array<ToolConnectionOutput>;\n}\n\n/** A connection resource. */\nexport interface ToolConnectionOutput {\n  /** A connection in a ToolConnectionList attached to this tool. */\n  connectionId: string;\n}\n\n/** The input definition information for a Microsoft Fabric tool as used to configure an agent. */\nexport interface MicrosoftFabricToolDefinitionOutput extends ToolDefinitionOutputParent {\n  /** The object type, which is always 'fabric_dataagent'. */\n  type: \"fabric_dataagent\";\n  /** The list of connections used by the Microsoft Fabric tool. */\n  fabricDataAgent: ToolConnectionListOutput;\n}\n\n/** The input definition information for a sharepoint tool as used to configure an agent. */\nexport interface SharepointToolDefinitionOutput extends ToolDefinitionOutputParent {\n  /** The object type, which is always 'sharepoint_grounding'. */\n  type: \"sharepoint_grounding\";\n  /** The list of connections used by the SharePoint tool. */\n  sharepointGrounding: ToolConnectionListOutput;\n}\n\n/** The input definition information for an Azure AI search tool as used to configure an agent. */\nexport interface AzureAISearchToolDefinitionOutput extends ToolDefinitionOutputParent {\n  /** The object type, which is always 'azure_ai_search'. */\n  type: \"azure_ai_search\";\n}\n\n/** The input definition information for an OpenAPI tool as used to configure an agent. */\nexport interface OpenApiToolDefinitionOutput extends ToolDefinitionOutputParent {\n  /** The object type, which is always 'openapi'. */\n  type: \"openapi\";\n  /** The openapi function definition. */\n  openapi: OpenApiFunctionDefinitionOutput;\n}\n\n/** The input definition information for an openapi function. */\nexport interface OpenApiFunctionDefinitionOutput {\n  /** The name of the function to be called. */\n  name: string;\n  /** A description of what the function does, used by the model to choose when and how to call the function. */\n  description?: string;\n  /** The openapi function shape, described as a JSON Schema object. */\n  spec: any;\n  /** Open API authentication details */\n  auth: OpenApiAuthDetailsOutput;\n}\n\n/** authentication details for OpenApiFunctionDefinition */\nexport interface OpenApiAuthDetailsOutputParent {\n  type: OpenApiAuthTypeOutput;\n}\n\n/** Security details for OpenApi anonymous authentication */\nexport interface OpenApiAnonymousAuthDetailsOutput extends OpenApiAuthDetailsOutputParent {\n  /** The object type, which is always 'anonymous'. */\n  type: \"anonymous\";\n}\n\n/** Security details for OpenApi connection authentication */\nexport interface OpenApiConnectionAuthDetailsOutput extends OpenApiAuthDetailsOutputParent {\n  /** The object type, which is always 'connection'. */\n  type: \"connection\";\n  /** Connection auth security details */\n  securityScheme: OpenApiConnectionSecuritySchemeOutput;\n}\n\n/** Security scheme for OpenApi managed_identity authentication */\nexport interface OpenApiConnectionSecuritySchemeOutput {\n  /** Connection id for Connection auth type */\n  connectionId: string;\n}\n\n/** Security details for OpenApi managed_identity authentication */\nexport interface OpenApiManagedAuthDetailsOutput extends OpenApiAuthDetailsOutputParent {\n  /** The object type, which is always 'managed_identity'. */\n  type: \"managed_identity\";\n  /** Connection auth security details */\n  securityScheme: OpenApiManagedSecuritySchemeOutput;\n}\n\n/** Security scheme for OpenApi managed_identity authentication */\nexport interface OpenApiManagedSecuritySchemeOutput {\n  /** Authentication scope for managed_identity auth type */\n  audience: string;\n}\n\n/** The input definition information for a azure function tool as used to configure an agent. */\nexport interface AzureFunctionToolDefinitionOutput extends ToolDefinitionOutputParent {\n  /** The object type, which is always 'azure_function'. */\n  type: \"azure_function\";\n  /** The definition of the concrete function that the function tool should call. */\n  azureFunction: AzureFunctionDefinitionOutput;\n}\n\n/** The definition of Azure function. */\nexport interface AzureFunctionDefinitionOutput {\n  /** The definition of azure function and its parameters. */\n  function: FunctionDefinitionOutput;\n  /** Input storage queue. The queue storage trigger runs a function as messages are added to it. */\n  inputBinding: AzureFunctionBindingOutput;\n  /** Output storage queue. The function writes output to this queue when the input items are processed. */\n  outputBinding: AzureFunctionBindingOutput;\n}\n\n/** The structure for keeping storage queue name and URI. */\nexport interface AzureFunctionBindingOutput {\n  /** The type of binding, which is always 'storage_queue'. */\n  type: \"storage_queue\";\n  /** Storage queue. */\n  storageQueue: AzureFunctionStorageQueueOutput;\n}\n\n/** The structure for keeping storage queue name and URI. */\nexport interface AzureFunctionStorageQueueOutput {\n  /** URI to the Azure Storage Queue service allowing you to manipulate a queue. */\n  queueServiceEndpoint: string;\n  /** The name of an Azure function storage queue. */\n  queueName: string;\n}\n\n/**\n * A set of resources that are used by the agent's tools. The resources are specific to the type of\n * tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search`\n * tool requires a list of vector store IDs.\n */\nexport interface ToolResourcesOutput {\n  /** Resources to be used by the `code_interpreter` tool consisting of file IDs. */\n  codeInterpreter?: CodeInterpreterToolResourceOutput;\n  /** Resources to be used by the `file_search` tool consisting of vector store IDs. */\n  fileSearch?: FileSearchToolResourceOutput;\n  /** Resources to be used by the `azure_ai_search` tool consisting of index IDs and names. */\n  azureAISearch?: AzureAISearchResourceOutput;\n}\n\n/** A set of resources that are used by the `code_interpreter` tool. */\nexport interface CodeInterpreterToolResourceOutput {\n  /**\n   * A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files\n   * associated with the tool.\n   */\n  fileIds?: string[];\n  /** The data sources to be used. This option is mutually exclusive with the `fileIds` property. */\n  dataSources?: Array<VectorStoreDataSourceOutput>;\n}\n\n/**\n * The structure, containing Azure asset URI path and the asset type of the file used as a data source\n * for the enterprise file search.\n */\nexport interface VectorStoreDataSourceOutput {\n  /** Asset URI. */\n  uri: string;\n  /**\n   * The asset type\n   *\n   * Possible values: \"uri_asset\", \"id_asset\"\n   */\n  type: VectorStoreDataSourceAssetTypeOutput;\n}\n\n/** A set of resources that are used by the `file_search` tool. */\nexport interface FileSearchToolResourceOutput {\n  /**\n   * The ID of the vector store attached to this agent. There can be a maximum of 1 vector\n   * store attached to the agent.\n   */\n  vectorStoreIds?: string[];\n  /**\n   * The list of vector store configuration objects from Azure.\n   * This list is limited to one element.\n   * The only element of this list contains the list of azure asset IDs used by the search tool.\n   */\n  vectorStores?: Array<VectorStoreConfigurationsOutput>;\n}\n\n/** The structure, containing the list of vector storage configurations i.e. the list of azure asset IDs. */\nexport interface VectorStoreConfigurationsOutput {\n  /** Name */\n  name: string;\n  /** Configurations */\n  configuration: VectorStoreConfigurationOutput;\n}\n\n/**\n * Vector storage configuration is the list of data sources, used when multiple\n * files can be used for the enterprise file search.\n */\nexport interface VectorStoreConfigurationOutput {\n  /** Data sources */\n  dataSources: Array<VectorStoreDataSourceOutput>;\n}\n\n/** A set of index resources used by the `azure_ai_search` tool. */\nexport interface AzureAISearchResourceOutput {\n  /**\n   * The indices attached to this agent. There can be a maximum of 1 index\n   * resource attached to the agent.\n   */\n  indexes?: Array<IndexResourceOutput>;\n}\n\n/** A Index resource. */\nexport interface IndexResourceOutput {\n  /** An index connection id in an IndexResource attached to this agent. */\n  indexConnectionId: string;\n  /** The name of an index in an IndexResource attached to this agent. */\n  indexName: string;\n}\n\n/**\n * An object describing the expected output of the model. If `json_object` only `function` type `tools` are allowed to be passed to the Run.\n * If `text` the model can return text or any value needed.\n */\nexport interface AgentsApiResponseFormatOutput {\n  /**\n   * Must be one of `text` or `json_object`.\n   *\n   * Possible values: \"text\", \"json_object\"\n   */\n  type?: ResponseFormatOutput;\n}\n\n/** The type of response format being defined: `json_schema` */\nexport interface ResponseFormatJsonSchemaTypeOutput {\n  /** Type */\n  type: \"json_schema\";\n  /** The JSON schema, describing response format. */\n  jsonSchema: ResponseFormatJsonSchemaOutput;\n}\n\n/** A description of what the response format is for, used by the model to determine how to respond in the format. */\nexport interface ResponseFormatJsonSchemaOutput {\n  /** A description of what the response format is for, used by the model to determine how to respond in the format. */\n  description?: string;\n  /** The name of a schema. */\n  name: string;\n  /** The JSON schema object, describing the response format. */\n  schema: any;\n}\n\n/** Represents an agent that can call the model and use tools. */\nexport interface AgentOutput {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The object type, which is always assistant. */\n  object: \"assistant\";\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  createdAt: Date;\n  /** The name of the agent. */\n  name: string | null;\n  /** The description of the agent. */\n  description: string | null;\n  /** The ID of the model to use. */\n  model: string;\n  /** The system instructions for the agent to use. */\n  instructions: string | null;\n  /** The collection of tools enabled for the agent. */\n  tools: Array<ToolDefinitionOutput>;\n  /**\n   * A set of resources that are used by the agent's tools. The resources are specific to the type of tool. For example, the `code_interpreter`\n   * tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n   */\n  toolResources: ToolResourcesOutput | null;\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,\n   * while lower values like 0.2 will make it more focused and deterministic.\n   */\n  temperature: number | null;\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.\n   * So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or temperature but not both.\n   */\n  topP: number | null;\n  /** The response format of the tool calls used by this agent. */\n  responseFormat?: AgentsApiResponseFormatOptionOutput | null;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata: Record<string, string> | null;\n}\n\n/** The response data for a requested list of items. */\nexport interface OpenAIPageableListOfAgentOutput {\n  /** The object type, which is always list. */\n  object: \"list\";\n  /** The requested list of items. */\n  data: Array<AgentOutput>;\n  /** The first ID represented in this list. */\n  firstId: string;\n  /** The last ID represented in this list. */\n  lastId: string;\n  /** A value indicating whether there are additional values available not captured in this list. */\n  hasMore: boolean;\n}\n\n/** The status of an agent deletion operation. */\nexport interface AgentDeletionStatusOutput {\n  /** The ID of the resource specified for deletion. */\n  id: string;\n  /** A value indicating whether deletion was successful. */\n  deleted: boolean;\n  /** The object type, which is always 'assistant.deleted'. */\n  object: \"assistant.deleted\";\n}\n\n/** This describes to which tools a file has been attached. */\nexport interface MessageAttachmentOutput {\n  /** The ID of the file to attach to the message. */\n  fileId?: string;\n  /** Azure asset ID. */\n  dataSource?: VectorStoreDataSourceOutput;\n  /** The tools to add to this file. */\n  tools: MessageAttachmentToolDefinitionOutput[];\n}\n\n/** Information about a single thread associated with an agent. */\nexport interface AgentThreadOutput {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The object type, which is always 'thread'. */\n  object: \"thread\";\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  createdAt: Date;\n  /**\n   * A set of resources that are made available to the agent's tools in this thread. The resources are specific to the type\n   * of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list\n   * of vector store IDs.\n   */\n  toolResources: ToolResourcesOutput | null;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata: Record<string, string> | null;\n}\n\n/** The status of a thread deletion operation. */\nexport interface ThreadDeletionStatusOutput {\n  /** The ID of the resource specified for deletion. */\n  id: string;\n  /** A value indicating whether deletion was successful. */\n  deleted: boolean;\n  /** The object type, which is always 'thread.deleted'. */\n  object: \"thread.deleted\";\n}\n\n/** A single, existing message within an agent thread. */\nexport interface ThreadMessageOutput {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The object type, which is always 'thread.message'. */\n  object: \"thread.message\";\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  createdAt: Date;\n  /** The ID of the thread that this message belongs to. */\n  threadId: string;\n  /**\n   * The status of the message.\n   *\n   * Possible values: \"in_progress\", \"incomplete\", \"completed\"\n   */\n  status: MessageStatusOutput;\n  /** On an incomplete message, details about why the message is incomplete. */\n  incompleteDetails: MessageIncompleteDetailsOutput | null;\n  /** The Unix timestamp (in seconds) for when the message was completed. */\n  completedAt: Date | null;\n  /** The Unix timestamp (in seconds) for when the message was marked as incomplete. */\n  incompleteAt: Date | null;\n  /**\n   * The role associated with the agent thread message.\n   *\n   * Possible values: \"user\", \"assistant\"\n   */\n  role: MessageRoleOutput;\n  /** The list of content items associated with the agent thread message. */\n  content: Array<MessageContentOutput>;\n  /** If applicable, the ID of the agent that authored this message. */\n  assistantId: string | null;\n  /** If applicable, the ID of the run associated with the authoring of this message. */\n  runId: string | null;\n  /** A list of files attached to the message, and the tools they were added to. */\n  attachments: Array<MessageAttachmentOutput> | null;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata: Record<string, string> | null;\n}\n\n/** Information providing additional detail about a message entering an incomplete status. */\nexport interface MessageIncompleteDetailsOutput {\n  /**\n   * The provided reason describing why the message was marked as incomplete.\n   *\n   * Possible values: \"content_filter\", \"max_tokens\", \"run_cancelled\", \"run_failed\", \"run_expired\"\n   */\n  reason: MessageIncompleteDetailsReasonOutput;\n}\n\n/** An abstract representation of a single item of thread message content. */\nexport interface MessageContentOutputParent {\n  type: string;\n}\n\n/** A representation of a textual item of thread message content. */\nexport interface MessageTextContentOutput extends MessageContentOutputParent {\n  /** The object type, which is always 'text'. */\n  type: \"text\";\n  /** The text and associated annotations for this thread message content item. */\n  text: MessageTextDetailsOutput;\n}\n\n/** The text and associated annotations for a single item of agent thread message content. */\nexport interface MessageTextDetailsOutput {\n  /** The text data. */\n  value: string;\n  /** A list of annotations associated with this text. */\n  annotations: Array<MessageTextAnnotationOutput>;\n}\n\n/** An abstract representation of an annotation to text thread message content. */\nexport interface MessageTextAnnotationOutputParent {\n  /** The textual content associated with this text annotation item. */\n  text: string;\n  type: string;\n}\n\n/** A citation within the message that points to a specific quote from a specific File associated with the agent or the message. Generated when the agent uses the 'file_search' tool to search files. */\nexport interface MessageTextFileCitationAnnotationOutput extends MessageTextAnnotationOutputParent {\n  /** The object type, which is always 'file_citation'. */\n  type: \"file_citation\";\n  /**\n   * A citation within the message that points to a specific quote from a specific file.\n   * Generated when the agent uses the \"file_search\" tool to search files.\n   */\n  fileCitation: MessageTextFileCitationDetailsOutput;\n  /** The first text index associated with this text annotation. */\n  startIndex?: number;\n  /** The last text index associated with this text annotation. */\n  endIndex?: number;\n}\n\n/** A representation of a file-based text citation, as used in a file-based annotation of text thread message content. */\nexport interface MessageTextFileCitationDetailsOutput {\n  /** The ID of the file associated with this citation. */\n  fileId: string;\n  /** The specific quote cited in the associated file. */\n  quote: string;\n}\n\n/** A citation within the message that points to a file located at a specific path. */\nexport interface MessageTextFilePathAnnotationOutput extends MessageTextAnnotationOutputParent {\n  /** The object type, which is always 'file_path'. */\n  type: \"file_path\";\n  /** A URL for the file that's generated when the agent used the code_interpreter tool to generate a file. */\n  filePath: MessageTextFilePathDetailsOutput;\n  /** The first text index associated with this text annotation. */\n  startIndex?: number;\n  /** The last text index associated with this text annotation. */\n  endIndex?: number;\n}\n\n/** An encapsulation of an image file ID, as used by message image content. */\nexport interface MessageTextFilePathDetailsOutput {\n  /** The ID of the specific file that the citation is from. */\n  fileId: string;\n}\n\n/** A representation of image file content in a thread message. */\nexport interface MessageImageFileContentOutput extends MessageContentOutputParent {\n  /** The object type, which is always 'image_file'. */\n  type: \"image_file\";\n  /** The image file for this thread message content item. */\n  imageFile: MessageImageFileDetailsOutput;\n}\n\n/** An image reference, as represented in thread message content. */\nexport interface MessageImageFileDetailsOutput {\n  /** The ID for the file associated with this image. */\n  fileId: string;\n}\n\n/** The response data for a requested list of items. */\nexport interface OpenAIPageableListOfThreadMessageOutput {\n  /** The object type, which is always list. */\n  object: \"list\";\n  /** The requested list of items. */\n  data: Array<ThreadMessageOutput>;\n  /** The first ID represented in this list. */\n  firstId: string;\n  /** The last ID represented in this list. */\n  lastId: string;\n  /** A value indicating whether there are additional values available not captured in this list. */\n  hasMore: boolean;\n}\n\n/**\n * Controls for how a thread will be truncated prior to the run. Use this to control the initial\n * context window of the run.\n */\nexport interface TruncationObjectOutput {\n  /**\n   * The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will\n   * be truncated to the `lastMessages` count most recent messages in the thread. When set to `auto`, messages in the middle of the thread\n   * will be dropped to fit the context length of the model, `max_prompt_tokens`.\n   *\n   * Possible values: \"auto\", \"last_messages\"\n   */\n  type: TruncationStrategyOutput;\n  /** The number of most recent messages from the thread when constructing the context for the run. */\n  lastMessages?: number | null;\n}\n\n/** Specifies a tool the model should use. Use to force the model to call a specific tool. */\nexport interface AgentsNamedToolChoiceOutput {\n  /**\n   * the type of tool. If type is `function`, the function name must be set.\n   *\n   * Possible values: \"function\", \"code_interpreter\", \"file_search\", \"bing_grounding\", \"fabric_dataagent\", \"sharepoint_grounding\", \"azure_ai_search\"\n   */\n  type: AgentsNamedToolChoiceTypeOutput;\n  /** The name of the function to call */\n  function?: FunctionNameOutput;\n}\n\n/** The function name that will be used, if using the `function` tool */\nexport interface FunctionNameOutput {\n  /** The name of the function to call */\n  name: string;\n}\n\n/** Data representing a single evaluation run of an agent thread. */\nexport interface ThreadRunOutput {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The object type, which is always 'thread.run'. */\n  object: \"thread.run\";\n  /** The ID of the thread associated with this run. */\n  threadId: string;\n  /** The ID of the agent associated with the thread this run was performed against. */\n  assistantId: string;\n  /**\n   * The status of the agent thread run.\n   *\n   * Possible values: \"queued\", \"in_progress\", \"requires_action\", \"cancelling\", \"cancelled\", \"failed\", \"completed\", \"expired\"\n   */\n  status: RunStatusOutput;\n  /** The details of the action required for the agent thread run to continue. */\n  requiredAction?: RequiredActionOutput | null;\n  /** The last error, if any, encountered by this agent thread run. */\n  lastError: RunErrorOutput | null;\n  /** The ID of the model to use. */\n  model: string;\n  /** The overridden system instructions used for this agent thread run. */\n  instructions: string;\n  /** The overridden enabled tools used for this agent thread run. */\n  tools: Array<ToolDefinitionOutput>;\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  createdAt: Date;\n  /** The Unix timestamp, in seconds, representing when this item expires. */\n  expiresAt: Date | null;\n  /** The Unix timestamp, in seconds, representing when this item was started. */\n  startedAt: Date | null;\n  /** The Unix timestamp, in seconds, representing when this completed. */\n  completedAt: Date | null;\n  /** The Unix timestamp, in seconds, representing when this was cancelled. */\n  cancelledAt: Date | null;\n  /** The Unix timestamp, in seconds, representing when this failed. */\n  failedAt: Date | null;\n  /** Details on why the run is incomplete. Will be `null` if the run is not incomplete. */\n  incompleteDetails: IncompleteRunDetailsOutput | null;\n  /** Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.). */\n  usage: RunCompletionUsageOutput | null;\n  /** The sampling temperature used for this run. If not set, defaults to 1. */\n  temperature?: number | null;\n  /** The nucleus sampling value used for this run. If not set, defaults to 1. */\n  topP?: number | null;\n  /** The maximum number of prompt tokens specified to have been used over the course of the run. */\n  maxPromptTokens: number | null;\n  /** The maximum number of completion tokens specified to have been used over the course of the run. */\n  maxCompletionTokens: number | null;\n  /** The strategy to use for dropping messages as the context windows moves forward. */\n  truncationStrategy: TruncationObjectOutput | null;\n  /** Controls whether or not and which tool is called by the model. */\n  toolChoice: AgentsApiToolChoiceOptionOutput | null;\n  /** The response format of the tool calls used in this run. */\n  responseFormat: AgentsApiResponseFormatOptionOutput | null;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata: Record<string, string> | null;\n  /** Override the tools the agent can use for this run. This is useful for modifying the behavior on a per-run basis */\n  toolResources?: UpdateToolResourcesOptionsOutput | null;\n  /** Determines if tools can be executed in parallel within the run. */\n  parallelToolCalls: boolean;\n}\n\n/** An abstract representation of a required action for an agent thread run to continue. */\nexport interface RequiredActionOutputParent {\n  type: string;\n}\n\n/** The details for required tool calls that must be submitted for an agent thread run to continue. */\nexport interface SubmitToolOutputsActionOutput extends RequiredActionOutputParent {\n  /** The object type, which is always 'submit_tool_outputs'. */\n  type: \"submit_tool_outputs\";\n  /** The details describing tools that should be called to submit tool outputs. */\n  submitToolOutputs: SubmitToolOutputsDetailsOutput;\n}\n\n/** The details describing tools that should be called to submit tool outputs. */\nexport interface SubmitToolOutputsDetailsOutput {\n  /** The list of tool calls that must be resolved for the agent thread run to continue. */\n  toolCalls: Array<RequiredToolCallOutput>;\n}\n\n/** An abstract representation of a tool invocation needed by the model to continue a run. */\nexport interface RequiredToolCallOutputParent {\n  /** The ID of the tool call. This ID must be referenced when submitting tool outputs. */\n  id: string;\n  type: string;\n}\n\n/** A representation of a requested call to a function tool, needed by the model to continue evaluation of a run. */\nexport interface RequiredFunctionToolCallOutput extends RequiredToolCallOutputParent {\n  /** The object type of the required tool call. Always 'function' for function tools. */\n  type: \"function\";\n  /** Detailed information about the function to be executed by the tool that includes name and arguments. */\n  function: RequiredFunctionToolCallDetailsOutput;\n}\n\n/** The detailed information for a function invocation, as provided by a required action invoking a function tool, that includes the name of and arguments to the function. */\nexport interface RequiredFunctionToolCallDetailsOutput {\n  /** The name of the function. */\n  name: string;\n  /** The arguments to use when invoking the named function, as provided by the model. Arguments are presented as a JSON document that should be validated and parsed for evaluation. */\n  arguments: string;\n}\n\n/** The details of an error as encountered by an agent thread run. */\nexport interface RunErrorOutput {\n  /** The status for the error. */\n  code: string;\n  /** The human-readable text associated with the error. */\n  message: string;\n}\n\n/** Details on why the run is incomplete. Will be `null` if the run is not incomplete. */\nexport interface IncompleteRunDetailsOutput {\n  /**\n   * The reason why the run is incomplete. This indicates which specific token limit was reached during the run.\n   *\n   * Possible values: \"max_completion_tokens\", \"max_prompt_tokens\"\n   */\n  reason: IncompleteDetailsReasonOutput;\n}\n\n/** Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.). */\nexport interface RunCompletionUsageOutput {\n  /** Number of completion tokens used over the course of the run. */\n  completionTokens: number;\n  /** Number of prompt tokens used over the course of the run. */\n  promptTokens: number;\n  /** Total number of tokens used (prompt + completion). */\n  totalTokens: number;\n}\n\n/**\n * Request object. A set of resources that are used by the agent's tools. The resources are specific to the type of tool.\n * For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of\n * vector store IDs.\n */\nexport interface UpdateToolResourcesOptionsOutput {\n  /**\n   * Overrides the list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files\n   * associated with the tool.\n   */\n  codeInterpreter?: UpdateCodeInterpreterToolResourceOptionsOutput;\n  /** Overrides the vector store attached to this agent. There can be a maximum of 1 vector store attached to the agent. */\n  fileSearch?: UpdateFileSearchToolResourceOptionsOutput;\n  /** Overrides the resources to be used by the `azure_ai_search` tool consisting of index IDs and names. */\n  azureAISearch?: AzureAISearchResourceOutput;\n}\n\n/** Request object to update `code_interpreted` tool resources. */\nexport interface UpdateCodeInterpreterToolResourceOptionsOutput {\n  /** A list of file IDs to override the current list of the agent. */\n  fileIds?: string[];\n}\n\n/** Request object to update `file_search` tool resources. */\nexport interface UpdateFileSearchToolResourceOptionsOutput {\n  /** A list of vector store IDs to override the current list of the agent. */\n  vectorStoreIds?: string[];\n}\n\n/** The response data for a requested list of items. */\nexport interface OpenAIPageableListOfThreadRunOutput {\n  /** The object type, which is always list. */\n  object: \"list\";\n  /** The requested list of items. */\n  data: Array<ThreadRunOutput>;\n  /** The first ID represented in this list. */\n  firstId: string;\n  /** The last ID represented in this list. */\n  lastId: string;\n  /** A value indicating whether there are additional values available not captured in this list. */\n  hasMore: boolean;\n}\n\n/** Detailed information about a single step of an agent thread run. */\nexport interface RunStepOutput {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The object type, which is always 'thread.run.step'. */\n  object: \"thread.run.step\";\n  /**\n   * The type of run step, which can be either message_creation or tool_calls.\n   *\n   * Possible values: \"message_creation\", \"tool_calls\"\n   */\n  type: RunStepTypeOutput;\n  /** The ID of the agent associated with the run step. */\n  assistantId: string;\n  /** The ID of the thread that was run. */\n  threadId: string;\n  /** The ID of the run that this run step is a part of. */\n  runId: string;\n  /**\n   * The status of this run step.\n   *\n   * Possible values: \"in_progress\", \"cancelled\", \"failed\", \"completed\", \"expired\"\n   */\n  status: RunStepStatusOutput;\n  /** The details for this run step. */\n  stepDetails: RunStepDetailsOutput;\n  /** If applicable, information about the last error encountered by this run step. */\n  lastError: RunStepErrorOutput | null;\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  createdAt: Date;\n  /** The Unix timestamp, in seconds, representing when this item expired. */\n  expiredAt: Date | null;\n  /** The Unix timestamp, in seconds, representing when this completed. */\n  completedAt: Date | null;\n  /** The Unix timestamp, in seconds, representing when this was cancelled. */\n  cancelledAt: Date | null;\n  /** The Unix timestamp, in seconds, representing when this failed. */\n  failedAt: Date | null;\n  /** Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`. */\n  usage?: RunStepCompletionUsageOutput | null;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata: Record<string, string> | null;\n}\n\n/** An abstract representation of the details for a run step. */\nexport interface RunStepDetailsOutputParent {\n  type: RunStepTypeOutput;\n}\n\n/** The detailed information associated with a message creation run step. */\nexport interface RunStepMessageCreationDetailsOutput extends RunStepDetailsOutputParent {\n  /** The object type, which is always 'message_creation'. */\n  type: \"message_creation\";\n  /** Information about the message creation associated with this run step. */\n  messageCreation: RunStepMessageCreationReferenceOutput;\n}\n\n/** The details of a message created as a part of a run step. */\nexport interface RunStepMessageCreationReferenceOutput {\n  /** The ID of the message created by this run step. */\n  messageId: string;\n}\n\n/** The detailed information associated with a run step calling tools. */\nexport interface RunStepToolCallDetailsOutput extends RunStepDetailsOutputParent {\n  /** The object type, which is always 'tool_calls'. */\n  type: \"tool_calls\";\n  /** A list of tool call details for this run step. */\n  toolCalls: Array<RunStepToolCallOutput>;\n}\n\n/** An abstract representation of a detailed tool call as recorded within a run step for an existing run. */\nexport interface RunStepToolCallOutputParent {\n  /** The ID of the tool call. This ID must be referenced when you submit tool outputs. */\n  id: string;\n  type: string;\n}\n\n/**\n * A record of a call to a code interpreter tool, issued by the model in evaluation of a defined tool, that\n * represents inputs and outputs consumed and emitted by the code interpreter.\n */\nexport interface RunStepCodeInterpreterToolCallOutput extends RunStepToolCallOutputParent {\n  /** The object type, which is always 'code_interpreter'. */\n  type: \"code_interpreter\";\n  /** The details of the tool call to the code interpreter tool. */\n  codeInterpreter: RunStepCodeInterpreterToolCallDetailsOutput;\n}\n\n/** The detailed information about a code interpreter invocation by the model. */\nexport interface RunStepCodeInterpreterToolCallDetailsOutput {\n  /** The input provided by the model to the code interpreter tool. */\n  input: string;\n  /** The outputs produced by the code interpreter tool back to the model in response to the tool call. */\n  outputs: Array<RunStepCodeInterpreterToolCallOutputOutput>;\n}\n\n/** An abstract representation of an emitted output from a code interpreter tool. */\nexport interface RunStepCodeInterpreterToolCallOutputOutputParent {\n  type: string;\n}\n\n/** A representation of a log output emitted by a code interpreter tool in response to a tool call by the model. */\nexport interface RunStepCodeInterpreterLogOutputOutput\n  extends RunStepCodeInterpreterToolCallOutputOutputParent {\n  /** The object type, which is always 'logs'. */\n  type: \"logs\";\n  /** The serialized log output emitted by the code interpreter. */\n  logs: string;\n}\n\n/** A representation of an image output emitted by a code interpreter tool in response to a tool call by the model. */\nexport interface RunStepCodeInterpreterImageOutputOutput\n  extends RunStepCodeInterpreterToolCallOutputOutputParent {\n  /** The object type, which is always 'image'. */\n  type: \"image\";\n  /** Referential information for the image associated with this output. */\n  image: RunStepCodeInterpreterImageReferenceOutput;\n}\n\n/** An image reference emitted by a code interpreter tool in response to a tool call by the model. */\nexport interface RunStepCodeInterpreterImageReferenceOutput {\n  /** The ID of the file associated with this image. */\n  fileId: string;\n}\n\n/**\n * A record of a call to a file search tool, issued by the model in evaluation of a defined tool, that represents\n * executed file search.\n */\nexport interface RunStepFileSearchToolCallOutput extends RunStepToolCallOutputParent {\n  /** The object type, which is always 'file_search'. */\n  type: \"file_search\";\n  /** The ID of the tool call. This ID must be referenced when you submit tool outputs. */\n  id: string;\n  /** For now, this is always going to be an empty object. */\n  fileSearch: RunStepFileSearchToolCallResultsOutput;\n}\n\n/** The results of the file search. */\nexport interface RunStepFileSearchToolCallResultsOutput {\n  /** Ranking options for file search. */\n  rankingOptions?: FileSearchRankingOptionsOutput;\n  /** The array of a file search results */\n  results: Array<RunStepFileSearchToolCallResultOutput>;\n}\n\n/**   File search tool call result. */\nexport interface RunStepFileSearchToolCallResultOutput {\n  /** The ID of the file that result was found in. */\n  fileId: string;\n  /** The name of the file that result was found in. */\n  fileName: string;\n  /** The score of the result. All values must be a floating point number between 0 and 1. */\n  score: number;\n  /** The content of the result that was found. The content is only included if requested via the include query parameter. */\n  content?: Array<FileSearchToolCallContentOutput>;\n}\n\n/** The file search result content object. */\nexport interface FileSearchToolCallContentOutput {\n  /** The type of the content. */\n  type: \"text\";\n  /** The text content of the file. */\n  text: string;\n}\n\n/**\n * A record of a call to a bing grounding tool, issued by the model in evaluation of a defined tool, that represents\n * executed search with bing grounding.\n */\nexport interface RunStepBingGroundingToolCallOutput extends RunStepToolCallOutputParent {\n  /** The object type, which is always 'bing_grounding'. */\n  type: \"bing_grounding\";\n  /** Reserved for future use. */\n  bingGrounding: Record<string, string>;\n}\n\n/**\n * A record of a call to an Azure AI Search tool, issued by the model in evaluation of a defined tool, that represents\n * executed Azure AI search.\n */\nexport interface RunStepAzureAISearchToolCallOutput extends RunStepToolCallOutputParent {\n  /** The object type, which is always 'azure_ai_search'. */\n  type: \"azure_ai_search\";\n  /** Reserved for future use. */\n  azureAISearch: Record<string, string>;\n}\n\n/**\n * A record of a call to a SharePoint tool, issued by the model in evaluation of a defined tool, that represents\n * executed SharePoint actions.\n */\nexport interface RunStepSharepointToolCallOutput extends RunStepToolCallOutputParent {\n  /** The object type, which is always 'sharepoint_grounding'. */\n  type: \"sharepoint_grounding\";\n  /** Reserved for future use. */\n  sharepointGrounding: Record<string, string>;\n}\n\n/**\n * A record of a call to a Microsoft Fabric tool, issued by the model in evaluation of a defined tool, that represents\n * executed Microsoft Fabric operations.\n */\nexport interface RunStepMicrosoftFabricToolCallOutput extends RunStepToolCallOutputParent {\n  /** The object type, which is always 'fabric_dataagent'. */\n  type: \"fabric_dataagent\";\n  /** Reserved for future use. */\n  fabricDataAgent: Record<string, string>;\n}\n\n/**\n * A record of a call to a function tool, issued by the model in evaluation of a defined tool, that represents the inputs\n * and output consumed and emitted by the specified function.\n */\nexport interface RunStepFunctionToolCallOutput extends RunStepToolCallOutputParent {\n  /** The object type, which is always 'function'. */\n  type: \"function\";\n  /** The detailed information about the function called by the model. */\n  function: RunStepFunctionToolCallDetailsOutput;\n}\n\n/** The detailed information about the function called by the model. */\nexport interface RunStepFunctionToolCallDetailsOutput {\n  /** The name of the function. */\n  name: string;\n  /** The arguments that the model requires are provided to the named function. */\n  arguments: string;\n  /** The output of the function, only populated for function calls that have already have had their outputs submitted. */\n  output: string | null;\n}\n\n/** The error information associated with a failed run step. */\nexport interface RunStepErrorOutput {\n  /**\n   * The error code for this error.\n   *\n   * Possible values: \"server_error\", \"rate_limit_exceeded\"\n   */\n  code: RunStepErrorCodeOutput;\n  /** The human-readable text associated with this error. */\n  message: string;\n}\n\n/** Usage statistics related to the run step. */\nexport interface RunStepCompletionUsageOutput {\n  /** Number of completion tokens used over the course of the run step. */\n  completionTokens: number;\n  /** Number of prompt tokens used over the course of the run step. */\n  promptTokens: number;\n  /** Total number of tokens used (prompt + completion). */\n  totalTokens: number;\n}\n\n/** The response data for a requested list of items. */\nexport interface OpenAIPageableListOfRunStepOutput {\n  /** The object type, which is always list. */\n  object: \"list\";\n  /** The requested list of items. */\n  data: Array<RunStepOutput>;\n  /** The first ID represented in this list. */\n  firstId: string;\n  /** The last ID represented in this list. */\n  lastId: string;\n  /** A value indicating whether there are additional values available not captured in this list. */\n  hasMore: boolean;\n}\n\n/** The response data from a file list operation. */\nexport interface FileListResponseOutput {\n  /** The object type, which is always 'list'. */\n  object: \"list\";\n  /** The files returned for the request. */\n  data: Array<OpenAIFileOutput>;\n}\n\n/** Represents an agent that can call the model and use tools. */\nexport interface OpenAIFileOutput {\n  /** The object type, which is always 'file'. */\n  object: \"file\";\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The size of the file, in bytes. */\n  bytes: number;\n  /** The name of the file. */\n  filename: string;\n  /** The Unix timestamp, in seconds, representing when this object was created. */\n  createdAt: Date;\n  /**\n   * The intended purpose of a file.\n   *\n   * Possible values: \"fine-tune\", \"fine-tune-results\", \"assistants\", \"assistants_output\", \"batch\", \"batch_output\", \"vision\"\n   */\n  purpose: FilePurposeOutput;\n  /**\n   * The state of the file. This field is available in Azure OpenAI only.\n   *\n   * Possible values: \"uploaded\", \"pending\", \"running\", \"processed\", \"error\", \"deleting\", \"deleted\"\n   */\n  status?: FileStateOutput;\n  /** The error message with details in case processing of this file failed. This field is available in Azure OpenAI only. */\n  statusDetails?: string;\n}\n\n/** A status response from a file deletion operation. */\nexport interface FileDeletionStatusOutput {\n  /** The ID of the resource specified for deletion. */\n  id: string;\n  /** A value indicating whether deletion was successful. */\n  deleted: boolean;\n  /** The object type, which is always 'file'. */\n  object: \"file\";\n}\n\n/** The response data for a requested list of items. */\nexport interface OpenAIPageableListOfVectorStoreOutput {\n  /** The object type, which is always list. */\n  object: \"list\";\n  /** The requested list of items. */\n  data: Array<VectorStoreOutput>;\n  /** The first ID represented in this list. */\n  firstId: string;\n  /** The last ID represented in this list. */\n  lastId: string;\n  /** A value indicating whether there are additional values available not captured in this list. */\n  hasMore: boolean;\n}\n\n/** A vector store is a collection of processed files can be used by the `file_search` tool. */\nexport interface VectorStoreOutput {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The object type, which is always `vector_store` */\n  object: \"vector_store\";\n  /** The Unix timestamp (in seconds) for when the vector store was created. */\n  createdAt: Date;\n  /** The name of the vector store. */\n  name: string;\n  /** The total number of bytes used by the files in the vector store. */\n  usageBytes: number;\n  /** Files count grouped by status processed or being processed by this vector store. */\n  fileCounts: VectorStoreFileCountOutput;\n  /**\n   * The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.\n   *\n   * Possible values: \"expired\", \"in_progress\", \"completed\"\n   */\n  status: VectorStoreStatusOutput;\n  /** Details on when this vector store expires */\n  expiresAfter?: VectorStoreExpirationPolicyOutput;\n  /** The Unix timestamp (in seconds) for when the vector store will expire. */\n  expiresAt?: Date | null;\n  /** The Unix timestamp (in seconds) for when the vector store was last active. */\n  lastActiveAt: Date | null;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata: Record<string, string> | null;\n}\n\n/** Counts of files processed or being processed by this vector store grouped by status. */\nexport interface VectorStoreFileCountOutput {\n  /** The number of files that are currently being processed. */\n  inProgress: number;\n  /** The number of files that have been successfully processed. */\n  completed: number;\n  /** The number of files that have failed to process. */\n  failed: number;\n  /** The number of files that were cancelled. */\n  cancelled: number;\n  /** The total number of files. */\n  total: number;\n}\n\n/** The expiration policy for a vector store. */\nexport interface VectorStoreExpirationPolicyOutput {\n  /**\n   * Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.\n   *\n   * Possible values: \"last_active_at\"\n   */\n  anchor: VectorStoreExpirationPolicyAnchorOutput;\n  /** The anchor timestamp after which the expiration policy applies. */\n  days: number;\n}\n\n/** Options to configure a vector store static chunking strategy. */\nexport interface VectorStoreStaticChunkingStrategyOptionsOutput {\n  /** The maximum number of tokens in each chunk. The default value is 800. The minimum value is 100 and the maximum value is 4096. */\n  maxChunkSizeTokens: number;\n  /**\n   * The number of tokens that overlap between chunks. The default value is 400.\n   * Note that the overlap must not exceed half of max_chunk_size_tokens.\n   */\n  chunkOverlapTokens: number;\n}\n\n/** Response object for deleting a vector store. */\nexport interface VectorStoreDeletionStatusOutput {\n  /** The ID of the resource specified for deletion. */\n  id: string;\n  /** A value indicating whether deletion was successful. */\n  deleted: boolean;\n  /** The object type, which is always 'vector_store.deleted'. */\n  object: \"vector_store.deleted\";\n}\n\n/** The response data for a requested list of items. */\nexport interface OpenAIPageableListOfVectorStoreFileOutput {\n  /** The object type, which is always list. */\n  object: \"list\";\n  /** The requested list of items. */\n  data: Array<VectorStoreFileOutput>;\n  /** The first ID represented in this list. */\n  firstId: string;\n  /** The last ID represented in this list. */\n  lastId: string;\n  /** A value indicating whether there are additional values available not captured in this list. */\n  hasMore: boolean;\n}\n\n/** Description of a file attached to a vector store. */\nexport interface VectorStoreFileOutput {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The object type, which is always `vector_store.file`. */\n  object: \"vector_store.file\";\n  /**\n   * The total vector store usage in bytes. Note that this may be different from the original file\n   * size.\n   */\n  usageBytes: number;\n  /** The Unix timestamp (in seconds) for when the vector store file was created. */\n  createdAt: Date;\n  /** The ID of the vector store that the file is attached to. */\n  vectorStoreId: string;\n  /**\n   * The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.\n   *\n   * Possible values: \"in_progress\", \"completed\", \"failed\", \"cancelled\"\n   */\n  status: VectorStoreFileStatusOutput;\n  /** The last error associated with this vector store file. Will be `null` if there are no errors. */\n  lastError: VectorStoreFileErrorOutput | null;\n  /** The strategy used to chunk the file. */\n  chunkingStrategy: VectorStoreChunkingStrategyResponseOutput;\n}\n\n/** Details on the error that may have occurred while processing a file for this vector store */\nexport interface VectorStoreFileErrorOutput {\n  /**\n   * One of `server_error` or `rate_limit_exceeded`.\n   *\n   * Possible values: \"server_error\", \"invalid_file\", \"unsupported_file\"\n   */\n  code: VectorStoreFileErrorCodeOutput;\n  /** A human-readable description of the error. */\n  message: string;\n}\n\n/** An abstract representation of a vector store chunking strategy configuration. */\nexport interface VectorStoreChunkingStrategyResponseOutputParent {\n  type: VectorStoreChunkingStrategyResponseTypeOutput;\n}\n\n/** This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the chunking_strategy concept was introduced in the API. */\nexport interface VectorStoreAutoChunkingStrategyResponseOutput\n  extends VectorStoreChunkingStrategyResponseOutputParent {\n  /** The object type, which is always 'other'. */\n  type: \"other\";\n}\n\n/** A statically configured chunking strategy. */\nexport interface VectorStoreStaticChunkingStrategyResponseOutput\n  extends VectorStoreChunkingStrategyResponseOutputParent {\n  /** The object type, which is always 'static'. */\n  type: \"static\";\n  /** The options for the static chunking strategy. */\n  static: VectorStoreStaticChunkingStrategyOptionsOutput;\n}\n\n/** Response object for deleting a vector store file relationship. */\nexport interface VectorStoreFileDeletionStatusOutput {\n  /** The ID of the resource specified for deletion. */\n  id: string;\n  /** A value indicating whether deletion was successful. */\n  deleted: boolean;\n  /** The object type, which is always 'vector_store.deleted'. */\n  object: \"vector_store.file.deleted\";\n}\n\n/** A batch of files attached to a vector store. */\nexport interface VectorStoreFileBatchOutput {\n  /** The identifier, which can be referenced in API endpoints. */\n  id: string;\n  /** The object type, which is always `vector_store.file_batch`. */\n  object: \"vector_store.files_batch\";\n  /** The Unix timestamp (in seconds) for when the vector store files batch was created. */\n  createdAt: Date;\n  /** The ID of the vector store that the file is attached to. */\n  vectorStoreId: string;\n  /**\n   * The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.\n   *\n   * Possible values: \"in_progress\", \"completed\", \"cancelled\", \"failed\"\n   */\n  status: VectorStoreFileBatchStatusOutput;\n  /** Files count grouped by status processed or being processed by this vector store. */\n  fileCounts: VectorStoreFileCountOutput;\n}\n\n/** Response from the Workspace - Get operation */\nexport interface GetWorkspaceResponseOutput {\n  /** A unique identifier for the resource */\n  id: string;\n  /** The name of the resource */\n  name: string;\n  /** The properties of the resource */\n  properties: WorkspacePropertiesOutput;\n}\n\n/** workspace properties */\nexport interface WorkspacePropertiesOutput {\n  /** Authentication type of the connection target */\n  applicationInsights: string;\n}\n\n/** Response from the list operation */\nexport interface ListConnectionsResponseOutput {\n  /** A list of connection list secrets */\n  value: Array<GetConnectionResponseOutput>;\n}\n\n/** Response from the listSecrets operation */\nexport interface GetConnectionResponseOutput {\n  /** A unique identifier for the connection */\n  id: string;\n  /** The name of the resource */\n  name: string;\n  /** The properties of the resource */\n  properties: InternalConnectionPropertiesOutput;\n}\n\n/** Connection properties */\nexport interface InternalConnectionPropertiesOutputParent {\n  /** Category of the connection */\n  category: ConnectionTypeOutput;\n  /** The connection URL to be used for this service */\n  target: string;\n  authType: AuthenticationTypeOutput;\n}\n\n/** Connection properties for connections with API key authentication */\nexport interface InternalConnectionPropertiesApiKeyAuthOutput\n  extends InternalConnectionPropertiesOutputParent {\n  /** Authentication type of the connection target */\n  authType: \"ApiKey\";\n  /** Credentials will only be present for authType=ApiKey */\n  credentials: CredentialsApiKeyAuthOutput;\n}\n\n/** The credentials needed for API key authentication */\nexport interface CredentialsApiKeyAuthOutput {\n  /** The API key */\n  key: string;\n}\n\n/** Connection properties for connections with AAD authentication (aka `Entra ID passthrough`) */\nexport interface InternalConnectionPropertiesAADAuthOutput\n  extends InternalConnectionPropertiesOutputParent {\n  /** Authentication type of the connection target */\n  authType: \"AAD\";\n}\n\n/** Connection properties for connections with SAS authentication */\nexport interface InternalConnectionPropertiesSASAuthOutput\n  extends InternalConnectionPropertiesOutputParent {\n  /** Authentication type of the connection target */\n  authType: \"SAS\";\n  /** Credentials will only be present for authType=ApiKey */\n  credentials: CredentialsSASAuthOutput;\n}\n\n/** The credentials needed for Shared Access Signatures (SAS) authentication */\nexport interface CredentialsSASAuthOutput {\n  /** The Shared Access Signatures (SAS) token */\n  SAS: string;\n}\n\n/** Response from getting properties of the Application Insights resource */\nexport interface GetAppInsightsResponseOutput {\n  /** A unique identifier for the resource */\n  id: string;\n  /** The name of the resource */\n  name: string;\n  /** The properties of the resource */\n  properties: AppInsightsPropertiesOutput;\n}\n\n/** The properties of the Application Insights resource */\nexport interface AppInsightsPropertiesOutput {\n  /** Authentication type of the connection target */\n  ConnectionString: string;\n}\n\n/** Evaluation Definition */\nexport interface EvaluationOutput {\n  /** Identifier of the evaluation. */\n  readonly id: string;\n  /** Data for evaluation. */\n  data: InputDataOutput;\n  /** Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique. */\n  displayName?: string;\n  /** Description of the evaluation. It can be used to store additional information about the evaluation and is mutable. */\n  description?: string;\n  /** Metadata containing createdBy and modifiedBy information. */\n  readonly systemData?: SystemDataOutput;\n  /** Status of the evaluation. It is set by service and is read-only. */\n  readonly status?: string;\n  /** Evaluation's tags. Unlike properties, tags are fully mutable. */\n  tags?: Record<string, string>;\n  /** Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. */\n  properties?: Record<string, string>;\n  /** Evaluators to be used for the evaluation. */\n  evaluators: Record<string, EvaluatorConfigurationOutput>;\n}\n\n/** Abstract data class for input data configuration. */\nexport interface InputDataOutputParent {\n  type: string;\n}\n\n/** Data Source for Application Insights. */\nexport interface ApplicationInsightsConfigurationOutput extends InputDataOutputParent {\n  readonly type: \"app_insights\";\n  /** LogAnalytic Workspace resourceID associated with ApplicationInsights */\n  resourceId: string;\n  /** Query to fetch the data. */\n  query: string;\n  /** Service name. */\n  serviceName: string;\n  /** Connection String to connect to ApplicationInsights. */\n  connectionString?: string;\n}\n\n/** Dataset as source for evaluation. */\nexport interface DatasetOutput extends InputDataOutputParent {\n  readonly type: \"dataset\";\n  /** Evaluation input data */\n  id: string;\n}\n\n/** Metadata pertaining to creation and last modification of the resource. */\nexport interface SystemDataOutput {\n  /** The timestamp the resource was created at. */\n  readonly createdAt?: string;\n  /** The identity that created the resource. */\n  readonly createdBy?: string;\n  /** The identity type that created the resource. */\n  readonly createdByType?: string;\n  /** The timestamp of resource last modification (UTC) */\n  readonly lastModifiedAt?: string;\n}\n\n/** Evaluator Configuration */\nexport interface EvaluatorConfigurationOutput {\n  /** Identifier of the evaluator. */\n  id: string;\n  /** Initialization parameters of the evaluator. */\n  initParams?: Record<string, any>;\n  /** Data parameters of the evaluator. */\n  dataMapping?: Record<string, string>;\n}\n\n/** Paged collection of Evaluation items */\nexport interface PagedEvaluationOutput {\n  /** The Evaluation items on this page */\n  value: Array<EvaluationOutput>;\n  /** The link to the next page of items */\n  nextLink?: string;\n}\n\n/** Evaluation Schedule Definition */\nexport interface EvaluationScheduleOutput {\n  /** Name of the schedule, which also serves as the unique identifier for the evaluation */\n  readonly name: string;\n  /** Data for evaluation. */\n  data: ApplicationInsightsConfigurationOutput;\n  /** Description of the evaluation. It can be used to store additional information about the evaluation and is mutable. */\n  description?: string;\n  /** Metadata containing createdBy and modifiedBy information. */\n  readonly systemData?: SystemDataOutput;\n  /** Provisioning State of the evaluation. It is set by service and is read-only. */\n  readonly provisioningState?: string;\n  /** Evaluation's tags. Unlike properties, tags are fully mutable. */\n  tags?: Record<string, string>;\n  /** Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. */\n  properties?: Record<string, string>;\n  /** Enabled status of the evaluation. It is set by service and is read-only. */\n  readonly isEnabled?: string;\n  /** Evaluators to be used for the evaluation. */\n  evaluators: Record<string, EvaluatorConfigurationOutput>;\n  /** Trigger for the evaluation. */\n  trigger: TriggerOutput;\n}\n\n/** Abstract data class for input data configuration. */\nexport interface TriggerOutputParent {\n  type: string;\n}\n\n/** Recurrence Trigger Definition */\nexport interface RecurrenceTriggerOutput extends TriggerOutputParent {\n  readonly type: \"Recurrence\";\n  /**\n   * The frequency to trigger schedule.\n   *\n   * Possible values: \"Month\", \"Week\", \"Day\", \"Hour\", \"Minute\"\n   */\n  frequency: FrequencyOutput;\n  /** Specifies schedule interval in conjunction with frequency */\n  interval: number;\n  /** The recurrence schedule. */\n  schedule?: RecurrenceScheduleOutput;\n}\n\n/** RecurrenceSchedule Definition */\nexport interface RecurrenceScheduleOutput {\n  /** List of hours for the schedule. */\n  hours: number[];\n  /** List of minutes for the schedule. */\n  minutes: number[];\n  /** List of days for the schedule. */\n  weekDays?: WeekDaysOutput[];\n  /** List of month days for the schedule */\n  monthDays?: number[];\n}\n\n/** Cron Trigger Definition */\nexport interface CronTriggerOutput extends TriggerOutputParent {\n  readonly type: \"Cron\";\n  /** Cron expression for the trigger. */\n  expression: string;\n}\n\n/** Paged collection of EvaluationSchedule items */\nexport interface PagedEvaluationScheduleOutput {\n  /** The EvaluationSchedule items on this page */\n  value: Array<EvaluationScheduleOutput>;\n  /** The link to the next page of items */\n  nextLink?: string;\n}\n\n/** An abstract representation of an input tool definition that an agent can use. */\nexport type ToolDefinitionOutput =\n  | ToolDefinitionOutputParent\n  | CodeInterpreterToolDefinitionOutput\n  | FileSearchToolDefinitionOutput\n  | FunctionToolDefinitionOutput\n  | BingGroundingToolDefinitionOutput\n  | MicrosoftFabricToolDefinitionOutput\n  | SharepointToolDefinitionOutput\n  | AzureAISearchToolDefinitionOutput\n  | OpenApiToolDefinitionOutput\n  | AzureFunctionToolDefinitionOutput;\n/** authentication details for OpenApiFunctionDefinition */\nexport type OpenApiAuthDetailsOutput =\n  | OpenApiAuthDetailsOutputParent\n  | OpenApiAnonymousAuthDetailsOutput\n  | OpenApiConnectionAuthDetailsOutput\n  | OpenApiManagedAuthDetailsOutput;\n/** An abstract representation of a single item of thread message content. */\nexport type MessageContentOutput =\n  | MessageContentOutputParent\n  | MessageTextContentOutput\n  | MessageImageFileContentOutput;\n/** An abstract representation of an annotation to text thread message content. */\nexport type MessageTextAnnotationOutput =\n  | MessageTextAnnotationOutputParent\n  | MessageTextFileCitationAnnotationOutput\n  | MessageTextFilePathAnnotationOutput;\n/** An abstract representation of a required action for an agent thread run to continue. */\nexport type RequiredActionOutput = RequiredActionOutputParent | SubmitToolOutputsActionOutput;\n/** An abstract representation of a tool invocation needed by the model to continue a run. */\nexport type RequiredToolCallOutput = RequiredToolCallOutputParent | RequiredFunctionToolCallOutput;\n/** An abstract representation of the details for a run step. */\nexport type RunStepDetailsOutput =\n  | RunStepDetailsOutputParent\n  | RunStepMessageCreationDetailsOutput\n  | RunStepToolCallDetailsOutput;\n/** An abstract representation of a detailed tool call as recorded within a run step for an existing run. */\nexport type RunStepToolCallOutput =\n  | RunStepToolCallOutputParent\n  | RunStepCodeInterpreterToolCallOutput\n  | RunStepFileSearchToolCallOutput\n  | RunStepBingGroundingToolCallOutput\n  | RunStepAzureAISearchToolCallOutput\n  | RunStepSharepointToolCallOutput\n  | RunStepMicrosoftFabricToolCallOutput\n  | RunStepFunctionToolCallOutput;\n/** An abstract representation of an emitted output from a code interpreter tool. */\nexport type RunStepCodeInterpreterToolCallOutputOutput =\n  | RunStepCodeInterpreterToolCallOutputOutputParent\n  | RunStepCodeInterpreterLogOutputOutput\n  | RunStepCodeInterpreterImageOutputOutput;\n/** An abstract representation of a vector store chunking strategy configuration. */\nexport type VectorStoreChunkingStrategyResponseOutput =\n  | VectorStoreChunkingStrategyResponseOutputParent\n  | VectorStoreAutoChunkingStrategyResponseOutput\n  | VectorStoreStaticChunkingStrategyResponseOutput;\n/** Connection properties */\nexport type InternalConnectionPropertiesOutput =\n  | InternalConnectionPropertiesOutputParent\n  | InternalConnectionPropertiesApiKeyAuthOutput\n  | InternalConnectionPropertiesAADAuthOutput\n  | InternalConnectionPropertiesSASAuthOutput;\n/** Abstract data class for input data configuration. */\nexport type InputDataOutput =\n  | InputDataOutputParent\n  | ApplicationInsightsConfigurationOutput\n  | DatasetOutput;\n/** Abstract data class for input data configuration. */\nexport type TriggerOutput = TriggerOutputParent | RecurrenceTriggerOutput | CronTriggerOutput;\n/** Alias for OpenApiAuthTypeOutput */\nexport type OpenApiAuthTypeOutput = string;\n/** Alias for VectorStoreDataSourceAssetTypeOutput */\nexport type VectorStoreDataSourceAssetTypeOutput = string;\n/** Alias for AgentsApiResponseFormatModeOutput */\nexport type AgentsApiResponseFormatModeOutput = string;\n/** Alias for ResponseFormatOutput */\nexport type ResponseFormatOutput = string;\n/** Alias for AgentsApiResponseFormatOptionOutput */\nexport type AgentsApiResponseFormatOptionOutput =\n  | string\n  | AgentsApiResponseFormatModeOutput\n  | AgentsApiResponseFormatOutput\n  | ResponseFormatJsonSchemaTypeOutput;\n/** Alias for MessageRoleOutput */\nexport type MessageRoleOutput = string;\n/** Alias for MessageAttachmentToolDefinitionOutput */\nexport type MessageAttachmentToolDefinitionOutput =\n  | CodeInterpreterToolDefinitionOutput\n  | FileSearchToolDefinitionOutput;\n/** Alias for MessageStatusOutput */\nexport type MessageStatusOutput = string;\n/** Alias for MessageIncompleteDetailsReasonOutput */\nexport type MessageIncompleteDetailsReasonOutput = string;\n/** Alias for TruncationStrategyOutput */\nexport type TruncationStrategyOutput = string;\n/** Alias for AgentsApiToolChoiceOptionModeOutput */\nexport type AgentsApiToolChoiceOptionModeOutput = string;\n/** Alias for AgentsNamedToolChoiceTypeOutput */\nexport type AgentsNamedToolChoiceTypeOutput = string;\n/** Alias for AgentsApiToolChoiceOptionOutput */\nexport type AgentsApiToolChoiceOptionOutput =\n  | string\n  | AgentsApiToolChoiceOptionModeOutput\n  | AgentsNamedToolChoiceOutput;\n/** Alias for RunStatusOutput */\nexport type RunStatusOutput = string;\n/** Alias for IncompleteDetailsReasonOutput */\nexport type IncompleteDetailsReasonOutput = string;\n/** Alias for RunStepTypeOutput */\nexport type RunStepTypeOutput = string;\n/** Alias for RunStepStatusOutput */\nexport type RunStepStatusOutput = string;\n/** Alias for RunStepErrorCodeOutput */\nexport type RunStepErrorCodeOutput = string;\n/** Alias for FilePurposeOutput */\nexport type FilePurposeOutput = string;\n/** Alias for FileStateOutput */\nexport type FileStateOutput = string;\n/** Alias for VectorStoreStatusOutput */\nexport type VectorStoreStatusOutput = string;\n/** Alias for VectorStoreExpirationPolicyAnchorOutput */\nexport type VectorStoreExpirationPolicyAnchorOutput = string;\n/** Alias for VectorStoreFileStatusOutput */\nexport type VectorStoreFileStatusOutput = string;\n/** Alias for VectorStoreFileErrorCodeOutput */\nexport type VectorStoreFileErrorCodeOutput = string;\n/** Alias for VectorStoreChunkingStrategyResponseTypeOutput */\nexport type VectorStoreChunkingStrategyResponseTypeOutput = string;\n/** Alias for VectorStoreFileBatchStatusOutput */\nexport type VectorStoreFileBatchStatusOutput = string;\n/** The Type (or category) of the connection */\nexport type ConnectionTypeOutput =\n  | \"AzureOpenAI\"\n  | \"Serverless\"\n  | \"AzureBlob\"\n  | \"AIServices\"\n  | \"CognitiveSearch\";\n/** Authentication type used by Azure AI service to connect to another service */\nexport type AuthenticationTypeOutput = \"ApiKey\" | \"AAD\" | \"SAS\";\n/** Alias for FrequencyOutput */\nexport type FrequencyOutput = string;\n/** Alias for WeekDaysOutput */\nexport type WeekDaysOutput = string;\n"]}
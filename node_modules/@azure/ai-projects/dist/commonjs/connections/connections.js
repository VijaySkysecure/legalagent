"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWorkspace = getWorkspace;
exports.listConnections = listConnections;
exports.getConnection = getConnection;
exports.getConnectionWithSecrets = getConnectionWithSecrets;
const core_client_1 = require("@azure-rest/core-client");
const expectedStatuses = ["200"];
/** Gets the properties of the specified machine learning workspace. */
async function getWorkspace(context, options = {}) {
    const getOptions = Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options));
    const result = await context.path("/").get(getOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return result.body;
}
/** List the details of all the connections (not including their credentials) */
async function listConnections(context, options = {}) {
    const listOptions = Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { queryParameters: Object.assign(Object.assign(Object.assign({}, (options.includeAll && { includeAll: options.includeAll })), (options.category && { category: options.category })), (options.target && { target: options.target })) });
    const result = await context.path("/connections").get(listOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return result.body.value;
}
/** Get the details of a single connection, without credentials. */
async function getConnection(context, connectionName, options = {}) {
    const getOptions = Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options));
    const result = await context
        .path("/connections/{connectionName}", connectionName)
        .get(getOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return result.body;
}
/** Get the details of a single connection, including credentials (if available). */
async function getConnectionWithSecrets(context, connectionName, options = {}) {
    const getOptions = Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { body: {
            ignored: "",
        } });
    const result = await context
        .path("/connections/{connectionName}/listsecrets", connectionName)
        .post(getOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return result.body;
}
//# sourceMappingURL=connections.js.map
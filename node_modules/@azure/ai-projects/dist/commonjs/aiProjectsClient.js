"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AIProjectsClient = void 0;
const tslib_1 = require("tslib");
const index_js_1 = require("./agents/index.js");
const index_js_2 = require("./connections/index.js");
const projectsClient_js_1 = tslib_1.__importDefault(require("./generated/src/projectsClient.js"));
const index_js_3 = require("./telemetry/index.js");
/**
 * The Azure AI Projects client
 */
class AIProjectsClient {
    /*
     * @param endpointParam - The Azure AI Foundry project endpoint, in the form `https://<azure-region>.api.azureml.ms` or `https://<private-link-guid>.<azure-region>.api.azureml.ms`, where <azure-region> is the Azure region where the project is deployed (e.g. westus) and <private-link-guid> is the GUID of the Enterprise private link.
     * @param subscriptionId - The Azure subscription ID.
     * @param resourceGroupName - The name of the Azure Resource Group.
     * @param projectName - The Azure AI Foundry project name.
     * @param options - the parameter for all optional parameters
     */
    constructor(endpointParam, subscriptionId, resourceGroupName, projectName, credential, options = {}) {
        const connectionEndPoint = `https://management.azure.com/subscriptions/${subscriptionId}/resourceGroups/${resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/${projectName}`;
        this._client = (0, projectsClient_js_1.default)(endpointParam, subscriptionId, resourceGroupName, projectName, credential, options);
        this._connectionClient = (0, projectsClient_js_1.default)(endpointParam, subscriptionId, resourceGroupName, projectName, credential, Object.assign(Object.assign({}, options), { endpoint: connectionEndPoint }));
        this._telemetryClient = (0, projectsClient_js_1.default)(endpointParam, subscriptionId, resourceGroupName, projectName, credential, Object.assign(Object.assign({}, options), { apiVersion: "2020-02-02", endpoint: "https://management.azure.com" }));
        this.agents = (0, index_js_1.getAgentsOperations)(this._client);
        this.connections = (0, index_js_2.getConnectionsOperations)(this._connectionClient);
        this.telemetry = (0, index_js_3.getTelemetryOperations)(this._telemetryClient, this.connections);
    }
    /**
     * Creates a new instance of AzureAIProjectsClient
     * @param connectionString - Connection string with the endpoint, subscriptionId, resourceGroupName, and projectName
     * @param credential - The credential to use
     * @param options - The parameter for all optional parameters
     */
    static fromConnectionString(connectionString, credential, 
    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options
    options = {}) {
        const { endpointParam, subscriptionId, resourceGroupName, projectName } = AIProjectsClient.praseConnectionString(connectionString);
        return new AIProjectsClient(endpointParam, subscriptionId, resourceGroupName, projectName, credential, options);
    }
    static praseConnectionString(connectionString) {
        const parts = connectionString.split(";");
        return {
            endpointParam: `https://${parts[0]}`,
            subscriptionId: parts[1],
            resourceGroupName: parts[2],
            projectName: parts[3],
        };
    }
}
exports.AIProjectsClient = AIProjectsClient;
//# sourceMappingURL=aiProjectsClient.js.map
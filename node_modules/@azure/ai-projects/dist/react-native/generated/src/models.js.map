{"version":3,"file":"models.js","sourceRoot":"","sources":["../../../../src/generated/src/models.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/** The request details to use when creating a new agent. */\nexport interface CreateAgentOptions {\n  /** The ID of the model to use. */\n  model: string;\n  /** The name of the new agent. */\n  name?: string | null;\n  /** The description of the new agent. */\n  description?: string | null;\n  /** The system instructions for the new agent to use. */\n  instructions?: string | null;\n  /** The collection of tools to enable for the new agent. */\n  tools?: Array<ToolDefinition>;\n  /**\n   * A set of resources that are used by the agent's tools. The resources are specific to the type of tool. For example, the `code_interpreter`\n   * tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n   */\n  tool_resources?: ToolResources | null;\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,\n   * while lower values like 0.2 will make it more focused and deterministic.\n   */\n  temperature?: number | null;\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.\n   * So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or temperature but not both.\n   */\n  top_p?: number | null;\n  /** The response format of the tool calls used by this agent. */\n  response_format?: AgentsApiResponseFormatOption | null;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: Record<string, string> | null;\n}\n\n/** An abstract representation of an input tool definition that an agent can use. */\nexport interface ToolDefinitionParent {\n  type: string;\n}\n\n/** The input definition information for a code interpreter tool as used to configure an agent. */\nexport interface CodeInterpreterToolDefinition extends ToolDefinitionParent {\n  /** The object type, which is always 'code_interpreter'. */\n  type: \"code_interpreter\";\n}\n\n/** The input definition information for a file search tool as used to configure an agent. */\nexport interface FileSearchToolDefinition extends ToolDefinitionParent {\n  /** The object type, which is always 'file_search'. */\n  type: \"file_search\";\n  /** Options overrides for the file search tool. */\n  file_search?: FileSearchToolDefinitionDetails;\n}\n\n/** Options overrides for the file search tool. */\nexport interface FileSearchToolDefinitionDetails {\n  /**\n   * The maximum number of results the file search tool should output. The default is 20 for gpt-4* models and 5 for gpt-3.5-turbo. This number should be between 1 and 50 inclusive.\n   *\n   * Note that the file search tool may output fewer than `max_num_results` results. See the file search tool documentation for more information.\n   */\n  max_num_results?: number;\n  /** Ranking options for file search. */\n  ranking_options?: FileSearchRankingOptions;\n}\n\n/** Ranking options for file search. */\nexport interface FileSearchRankingOptions {\n  /** File search ranker. */\n  ranker: string;\n  /** Ranker search threshold. */\n  score_threshold: number;\n}\n\n/** The input definition information for a function tool as used to configure an agent. */\nexport interface FunctionToolDefinition extends ToolDefinitionParent {\n  /** The object type, which is always 'function'. */\n  type: \"function\";\n  /** The definition of the concrete function that the function tool should call. */\n  function: FunctionDefinition;\n}\n\n/** The input definition information for a function. */\nexport interface FunctionDefinition {\n  /** The name of the function to be called. */\n  name: string;\n  /** A description of what the function does, used by the model to choose when and how to call the function. */\n  description?: string;\n  /** The parameters the functions accepts, described as a JSON Schema object. */\n  parameters: unknown;\n}\n\n/** The input definition information for a bing grounding search tool as used to configure an agent. */\nexport interface BingGroundingToolDefinition extends ToolDefinitionParent {\n  /** The object type, which is always 'bing_grounding'. */\n  type: \"bing_grounding\";\n  /** The list of connections used by the bing grounding tool. */\n  bing_grounding: ToolConnectionList;\n}\n\n/** A set of connection resources currently used by either the `bing_grounding`, `fabric_dataagent`, or `sharepoint_grounding` tools. */\nexport interface ToolConnectionList {\n  /**\n   * The connections attached to this tool. There can be a maximum of 1 connection\n   * resource attached to the tool.\n   */\n  connections?: Array<ToolConnection>;\n}\n\n/** A connection resource. */\nexport interface ToolConnection {\n  /** A connection in a ToolConnectionList attached to this tool. */\n  connection_id: string;\n}\n\n/** The input definition information for a Microsoft Fabric tool as used to configure an agent. */\nexport interface MicrosoftFabricToolDefinition extends ToolDefinitionParent {\n  /** The object type, which is always 'fabric_dataagent'. */\n  type: \"fabric_dataagent\";\n  /** The list of connections used by the Microsoft Fabric tool. */\n  fabric_dataagent: ToolConnectionList;\n}\n\n/** The input definition information for a sharepoint tool as used to configure an agent. */\nexport interface SharepointToolDefinition extends ToolDefinitionParent {\n  /** The object type, which is always 'sharepoint_grounding'. */\n  type: \"sharepoint_grounding\";\n  /** The list of connections used by the SharePoint tool. */\n  sharepoint_grounding: ToolConnectionList;\n}\n\n/** The input definition information for an Azure AI search tool as used to configure an agent. */\nexport interface AzureAISearchToolDefinition extends ToolDefinitionParent {\n  /** The object type, which is always 'azure_ai_search'. */\n  type: \"azure_ai_search\";\n}\n\n/** The input definition information for an OpenAPI tool as used to configure an agent. */\nexport interface OpenApiToolDefinition extends ToolDefinitionParent {\n  /** The object type, which is always 'openapi'. */\n  type: \"openapi\";\n  /** The openapi function definition. */\n  openapi: OpenApiFunctionDefinition;\n}\n\n/** The input definition information for an openapi function. */\nexport interface OpenApiFunctionDefinition {\n  /** The name of the function to be called. */\n  name: string;\n  /** A description of what the function does, used by the model to choose when and how to call the function. */\n  description?: string;\n  /** The openapi function shape, described as a JSON Schema object. */\n  spec: unknown;\n  /** Open API authentication details */\n  auth: OpenApiAuthDetails;\n}\n\n/** authentication details for OpenApiFunctionDefinition */\nexport interface OpenApiAuthDetailsParent {\n  type: OpenApiAuthType;\n}\n\n/** Security details for OpenApi anonymous authentication */\nexport interface OpenApiAnonymousAuthDetails extends OpenApiAuthDetailsParent {\n  /** The object type, which is always 'anonymous'. */\n  type: \"anonymous\";\n}\n\n/** Security details for OpenApi connection authentication */\nexport interface OpenApiConnectionAuthDetails extends OpenApiAuthDetailsParent {\n  /** The object type, which is always 'connection'. */\n  type: \"connection\";\n  /** Connection auth security details */\n  security_scheme: OpenApiConnectionSecurityScheme;\n}\n\n/** Security scheme for OpenApi managed_identity authentication */\nexport interface OpenApiConnectionSecurityScheme {\n  /** Connection id for Connection auth type */\n  connection_id: string;\n}\n\n/** Security details for OpenApi managed_identity authentication */\nexport interface OpenApiManagedAuthDetails extends OpenApiAuthDetailsParent {\n  /** The object type, which is always 'managed_identity'. */\n  type: \"managed_identity\";\n  /** Connection auth security details */\n  security_scheme: OpenApiManagedSecurityScheme;\n}\n\n/** Security scheme for OpenApi managed_identity authentication */\nexport interface OpenApiManagedSecurityScheme {\n  /** Authentication scope for managed_identity auth type */\n  audience: string;\n}\n\n/** The input definition information for a azure function tool as used to configure an agent. */\nexport interface AzureFunctionToolDefinition extends ToolDefinitionParent {\n  /** The object type, which is always 'azure_function'. */\n  type: \"azure_function\";\n  /** The definition of the concrete function that the function tool should call. */\n  azure_function: AzureFunctionDefinition;\n}\n\n/** The definition of Azure function. */\nexport interface AzureFunctionDefinition {\n  /** The definition of azure function and its parameters. */\n  function: FunctionDefinition;\n  /** Input storage queue. The queue storage trigger runs a function as messages are added to it. */\n  input_binding: AzureFunctionBinding;\n  /** Output storage queue. The function writes output to this queue when the input items are processed. */\n  output_binding: AzureFunctionBinding;\n}\n\n/** The structure for keeping storage queue name and URI. */\nexport interface AzureFunctionBinding {\n  /** The type of binding, which is always 'storage_queue'. */\n  type: \"storage_queue\";\n  /** Storage queue. */\n  storage_queue: AzureFunctionStorageQueue;\n}\n\n/** The structure for keeping storage queue name and URI. */\nexport interface AzureFunctionStorageQueue {\n  /** URI to the Azure Storage Queue service allowing you to manipulate a queue. */\n  queue_service_endpoint: string;\n  /** The name of an Azure function storage queue. */\n  queue_name: string;\n}\n\n/**\n * A set of resources that are used by the agent's tools. The resources are specific to the type of\n * tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search`\n * tool requires a list of vector store IDs.\n */\nexport interface ToolResources {\n  /** Resources to be used by the `code_interpreter` tool consisting of file IDs. */\n  code_interpreter?: CodeInterpreterToolResource;\n  /** Resources to be used by the `file_search` tool consisting of vector store IDs. */\n  file_search?: FileSearchToolResource;\n  /** Resources to be used by the `azure_ai_search` tool consisting of index IDs and names. */\n  azure_ai_search?: AzureAISearchResource;\n}\n\n/** A set of resources that are used by the `code_interpreter` tool. */\nexport interface CodeInterpreterToolResource {\n  /**\n   * A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files\n   * associated with the tool.\n   */\n  file_ids?: string[];\n  /** The data sources to be used. This option is mutually exclusive with the `fileIds` property. */\n  data_sources?: Array<VectorStoreDataSource>;\n}\n\n/**\n * The structure, containing Azure asset URI path and the asset type of the file used as a data source\n * for the enterprise file search.\n */\nexport interface VectorStoreDataSource {\n  /** Asset URI. */\n  uri: string;\n  /**\n   * The asset type\n   *\n   * Possible values: \"uri_asset\", \"id_asset\"\n   */\n  type: VectorStoreDataSourceAssetType;\n}\n\n/** A set of resources that are used by the `file_search` tool. */\nexport interface FileSearchToolResource {\n  /**\n   * The ID of the vector store attached to this agent. There can be a maximum of 1 vector\n   * store attached to the agent.\n   */\n  vector_store_ids?: string[];\n  /**\n   * The list of vector store configuration objects from Azure.\n   * This list is limited to one element.\n   * The only element of this list contains the list of azure asset IDs used by the search tool.\n   */\n  vector_stores?: Array<VectorStoreConfigurations>;\n}\n\n/** The structure, containing the list of vector storage configurations i.e. the list of azure asset IDs. */\nexport interface VectorStoreConfigurations {\n  /** Name */\n  name: string;\n  /** Configurations */\n  configuration: VectorStoreConfiguration;\n}\n\n/**\n * Vector storage configuration is the list of data sources, used when multiple\n * files can be used for the enterprise file search.\n */\nexport interface VectorStoreConfiguration {\n  /** Data sources */\n  data_sources: Array<VectorStoreDataSource>;\n}\n\n/** A set of index resources used by the `azure_ai_search` tool. */\nexport interface AzureAISearchResource {\n  /**\n   * The indices attached to this agent. There can be a maximum of 1 index\n   * resource attached to the agent.\n   */\n  indexes?: Array<AISearchIndexResource>;\n}\n\n/** A AI Search Index resource. */\nexport interface AISearchIndexResource {\n  /** An index connection id in an IndexResource attached to this agent. */\n  index_connection_id: string;\n  /** The name of an index in an IndexResource attached to this agent. */\n  index_name: string;\n  /**\n   * Type of query in an AIIndexResource attached to this agent.\n   *\n   * Possible values: \"simple\", \"semantic\", \"vector\", \"vector_simple_hybrid\", \"vector_semantic_hybrid\"\n   */\n  query_type?: AzureAISearchQueryType;\n  /** Number of documents to retrieve from search and present to the model. */\n  top_k?: number;\n  /** Odata filter string for search resource. */\n  filter?: string;\n}\n\n/**\n * An object describing the expected output of the model. If `json_object` only `function` type `tools` are allowed to be passed to the Run.\n * If `text` the model can return text or any value needed.\n */\nexport interface AgentsApiResponseFormat {\n  /**\n   * Must be one of `text` or `json_object`.\n   *\n   * Possible values: \"text\", \"json_object\"\n   */\n  type?: ResponseFormat;\n}\n\n/** The type of response format being defined: `json_schema` */\nexport interface ResponseFormatJsonSchemaType {\n  /** Type */\n  type: \"json_schema\";\n  /** The JSON schema, describing response format. */\n  json_schema: ResponseFormatJsonSchema;\n}\n\n/** A description of what the response format is for, used by the model to determine how to respond in the format. */\nexport interface ResponseFormatJsonSchema {\n  /** A description of what the response format is for, used by the model to determine how to respond in the format. */\n  description?: string;\n  /** The name of a schema. */\n  name: string;\n  /** The JSON schema object, describing the response format. */\n  schema: unknown;\n}\n\n/** The request details to use when modifying an existing agent. */\nexport interface UpdateAgentOptions {\n  /** The ID of the model to use. */\n  model?: string;\n  /** The modified name for the agent to use. */\n  name?: string | null;\n  /** The modified description for the agent to use. */\n  description?: string | null;\n  /** The modified system instructions for the new agent to use. */\n  instructions?: string | null;\n  /** The modified collection of tools to enable for the agent. */\n  tools?: Array<ToolDefinition>;\n  /**\n   * A set of resources that are used by the agent's tools. The resources are specific to the type of tool. For example,\n   * the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n   */\n  tool_resources?: ToolResources;\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,\n   * while lower values like 0.2 will make it more focused and deterministic.\n   */\n  temperature?: number | null;\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.\n   * So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or temperature but not both.\n   */\n  top_p?: number | null;\n  /** The response format of the tool calls used by this agent. */\n  response_format?: AgentsApiResponseFormatOption | null;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: Record<string, string> | null;\n}\n\n/** The details used to create a new agent thread. */\nexport interface AgentThreadCreationOptions {\n  /** The initial messages to associate with the new thread. */\n  messages?: Array<ThreadMessageOptions>;\n  /**\n   * A set of resources that are made available to the agent's tools in this thread. The resources are specific to the\n   * type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires\n   * a list of vector store IDs.\n   */\n  tool_resources?: ToolResources | null;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: Record<string, string> | null;\n}\n\n/** A single message within an agent thread, as provided during that thread's creation for its initial state. */\nexport interface ThreadMessageOptions {\n  /**\n   * The role of the entity that is creating the message. Allowed values include:\n   * - `user`: Indicates the message is sent by an actual user and should be used in most\n   * cases to represent user-generated messages.\n   * - `assistant`: Indicates the message is generated by the agent. Use this value to insert\n   * messages from the agent into the\n   * conversation.\n   *\n   * Possible values: \"user\", \"assistant\"\n   */\n  role: MessageRole;\n  /**\n   * The textual content of the initial message. Currently, robust input including images and annotated text may only be provided via\n   * a separate call to the create message API.\n   */\n  content: string;\n  /** A list of files attached to the message, and the tools they should be added to. */\n  attachments?: Array<MessageAttachment> | null;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: Record<string, string> | null;\n}\n\n/** This describes to which tools a file has been attached. */\nexport interface MessageAttachment {\n  /** The ID of the file to attach to the message. */\n  file_id?: string;\n  /** Azure asset ID. */\n  data_source?: VectorStoreDataSource;\n  /** The tools to add to this file. */\n  tools: Array<MessageAttachmentToolDefinition>;\n}\n\n/** The details used to update an existing agent thread */\nexport interface UpdateAgentThreadOptions {\n  /**\n   * A set of resources that are made available to the agent's tools in this thread. The resources are specific to the\n   * type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires\n   * a list of vector store IDs\n   */\n  tool_resources?: ToolResources | null;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: Record<string, string> | null;\n}\n\n/** The details used when creating a new run of an agent thread. */\nexport interface CreateRunOptions {\n  /** The ID of the agent that should run the thread. */\n  assistant_id: string;\n  /** The overridden model name that the agent should use to run the thread. */\n  model?: string | null;\n  /** The overridden system instructions that the agent should use to run the thread. */\n  instructions?: string | null;\n  /**\n   * Additional instructions to append at the end of the instructions for the run. This is useful for modifying the behavior\n   * on a per-run basis without overriding other instructions.\n   */\n  additional_instructions?: string | null;\n  /** Adds additional messages to the thread before creating the run. */\n  additional_messages?: Array<ThreadMessageOptions> | null;\n  /** The overridden list of enabled tools that the agent should use to run the thread. */\n  tools?: Array<ToolDefinition> | null;\n  /**\n   * If `true`, returns a stream of events that happen during the Run as server-sent events,\n   * terminating when the Run enters a terminal state with a `data: [DONE]` message.\n   */\n  stream?: boolean;\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output\n   * more random, while lower values like 0.2 will make it more focused and deterministic.\n   */\n  temperature?: number | null;\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the model\n   * considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens\n   * comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or temperature but not both.\n   */\n  top_p?: number | null;\n  /**\n   * The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only\n   * the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified,\n   * the run will end with status `incomplete`. See `incomplete_details` for more info.\n   */\n  max_prompt_tokens?: number | null;\n  /**\n   * The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort\n   * to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of\n   * completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n   */\n  max_completion_tokens?: number | null;\n  /** The strategy to use for dropping messages as the context windows moves forward. */\n  truncation_strategy?: TruncationObject | null;\n  /** Controls whether or not and which tool is called by the model. */\n  tool_choice?: AgentsApiToolChoiceOption | null;\n  /** Specifies the format that the model must output. */\n  response_format?: AgentsApiResponseFormatOption | null;\n  /** If `true` functions will run in parallel during tool use. */\n  parallel_tool_calls?: boolean;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: Record<string, string> | null;\n}\n\n/**\n * Controls for how a thread will be truncated prior to the run. Use this to control the initial\n * context window of the run.\n */\nexport interface TruncationObject {\n  /**\n   * The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will\n   * be truncated to the `lastMessages` count most recent messages in the thread. When set to `auto`, messages in the middle of the thread\n   * will be dropped to fit the context length of the model, `max_prompt_tokens`.\n   *\n   * Possible values: \"auto\", \"last_messages\"\n   */\n  type: TruncationStrategy;\n  /** The number of most recent messages from the thread when constructing the context for the run. */\n  last_messages?: number | null;\n}\n\n/** Specifies a tool the model should use. Use to force the model to call a specific tool. */\nexport interface AgentsNamedToolChoice {\n  /**\n   * the type of tool. If type is `function`, the function name must be set.\n   *\n   * Possible values: \"function\", \"code_interpreter\", \"file_search\", \"bing_grounding\", \"fabric_dataagent\", \"sharepoint_grounding\", \"azure_ai_search\"\n   */\n  type: AgentsNamedToolChoiceType;\n  /** The name of the function to call */\n  function?: FunctionName;\n}\n\n/** The function name that will be used, if using the `function` tool */\nexport interface FunctionName {\n  /** The name of the function to call */\n  name: string;\n}\n\n/**\n * Request object. A set of resources that are used by the agent's tools. The resources are specific to the type of tool.\n * For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of\n * vector store IDs.\n */\nexport interface UpdateToolResourcesOptions {\n  /**\n   * Overrides the list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files\n   * associated with the tool.\n   */\n  code_interpreter?: UpdateCodeInterpreterToolResourceOptions;\n  /** Overrides the vector store attached to this agent. There can be a maximum of 1 vector store attached to the agent. */\n  file_search?: UpdateFileSearchToolResourceOptions;\n  /** Overrides the resources to be used by the `azure_ai_search` tool consisting of index IDs and names. */\n  azure_ai_search?: AzureAISearchResource;\n}\n\n/** Request object to update `code_interpreted` tool resources. */\nexport interface UpdateCodeInterpreterToolResourceOptions {\n  /** A list of file IDs to override the current list of the agent. */\n  file_ids?: string[];\n}\n\n/** Request object to update `file_search` tool resources. */\nexport interface UpdateFileSearchToolResourceOptions {\n  /** A list of vector store IDs to override the current list of the agent. */\n  vector_store_ids?: string[];\n}\n\n/** The data provided during a tool outputs submission to resolve pending tool calls and allow the model to continue. */\nexport interface ToolOutput {\n  /** The ID of the tool call being resolved, as provided in the tool calls of a required action from a run. */\n  tool_call_id?: string;\n  /** The output from the tool to be submitted. */\n  output?: string;\n}\n\n/** The details used when creating and immediately running a new agent thread. */\nexport interface CreateAndRunThreadOptions {\n  /** The ID of the agent for which the thread should be created. */\n  assistant_id: string;\n  /** The details used to create the new thread. If no thread is provided, an empty one will be created. */\n  thread?: AgentThreadCreationOptions;\n  /** The overridden model that the agent should use to run the thread. */\n  model?: string | null;\n  /** The overridden system instructions the agent should use to run the thread. */\n  instructions?: string | null;\n  /** The overridden list of enabled tools the agent should use to run the thread. */\n  tools?: Array<ToolDefinition> | null;\n  /** Override the tools the agent can use for this run. This is useful for modifying the behavior on a per-run basis */\n  tool_resources?: UpdateToolResourcesOptions | null;\n  /**\n   * If `true`, returns a stream of events that happen during the Run as server-sent events,\n   * terminating when the Run enters a terminal state with a `data: [DONE]` message.\n   */\n  stream?: boolean;\n  /**\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output\n   * more random, while lower values like 0.2 will make it more focused and deterministic.\n   */\n  temperature?: number | null;\n  /**\n   * An alternative to sampling with temperature, called nucleus sampling, where the model\n   * considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens\n   * comprising the top 10% probability mass are considered.\n   *\n   * We generally recommend altering this or temperature but not both.\n   */\n  top_p?: number | null;\n  /**\n   * The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only\n   * the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified,\n   * the run will end with status `incomplete`. See `incomplete_details` for more info.\n   */\n  max_prompt_tokens?: number | null;\n  /**\n   * The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only\n   * the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens\n   * specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n   */\n  max_completion_tokens?: number | null;\n  /** The strategy to use for dropping messages as the context windows moves forward. */\n  truncation_strategy?: TruncationObject | null;\n  /** Controls whether or not and which tool is called by the model. */\n  tool_choice?: AgentsApiToolChoiceOption | null;\n  /** Specifies the format that the model must output. */\n  response_format?: AgentsApiResponseFormatOption | null;\n  /** If `true` functions will run in parallel during tool use. */\n  parallel_tool_calls?: boolean;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: Record<string, string> | null;\n}\n\nexport interface HttpPartFile {}\n\nexport interface HttpPartFilePurpose {}\n\nexport interface HttpPartString {}\n\n/** The expiration policy for a vector store. */\nexport interface VectorStoreExpirationPolicy {\n  /**\n   * Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.\n   *\n   * Possible values: \"last_active_at\"\n   */\n  anchor: VectorStoreExpirationPolicyAnchor;\n  /** The anchor timestamp after which the expiration policy applies. */\n  days: number;\n}\n\n/** Request object for creating a vector store. */\nexport interface VectorStoreOptions {\n  /** A list of file IDs that the vector store should use. Useful for tools like `file_search` that can access files. */\n  file_ids?: string[];\n  /** The name of the vector store. */\n  name?: string;\n  /** The vector store configuration, used when vector store is created from Azure asset URIs. */\n  configuration?: VectorStoreConfiguration;\n  /** Details on when this vector store expires */\n  expires_after?: VectorStoreExpirationPolicy;\n  /** The chunking strategy used to chunk the file(s). If not set, will use the auto strategy. Only applicable if file_ids is non-empty. */\n  chunking_strategy?: VectorStoreChunkingStrategyRequest;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: Record<string, string> | null;\n}\n\n/** An abstract representation of a vector store chunking strategy configuration. */\nexport interface VectorStoreChunkingStrategyRequestParent {\n  type: VectorStoreChunkingStrategyRequestType;\n}\n\n/** The default strategy. This strategy currently uses a max_chunk_size_tokens of 800 and chunk_overlap_tokens of 400. */\nexport interface VectorStoreAutoChunkingStrategyRequest\n  extends VectorStoreChunkingStrategyRequestParent {\n  /** The object type, which is always 'auto'. */\n  type: \"auto\";\n}\n\n/** A statically configured chunking strategy. */\nexport interface VectorStoreStaticChunkingStrategyRequest\n  extends VectorStoreChunkingStrategyRequestParent {\n  /** The object type, which is always 'static'. */\n  type: \"static\";\n  /** The options for the static chunking strategy. */\n  static: VectorStoreStaticChunkingStrategyOptions;\n}\n\n/** Options to configure a vector store static chunking strategy. */\nexport interface VectorStoreStaticChunkingStrategyOptions {\n  /** The maximum number of tokens in each chunk. The default value is 800. The minimum value is 100 and the maximum value is 4096. */\n  max_chunk_size_tokens: number;\n  /**\n   * The number of tokens that overlap between chunks. The default value is 400.\n   * Note that the overlap must not exceed half of max_chunk_size_tokens.\n   */\n  chunk_overlap_tokens: number;\n}\n\n/** Request object for updating a vector store. */\nexport interface VectorStoreUpdateOptions {\n  /** The name of the vector store. */\n  name?: string | null;\n  /** Details on when this vector store expires */\n  expires_after?: VectorStoreExpirationPolicy | null;\n  /** A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. */\n  metadata?: Record<string, string> | null;\n}\n\n/** Evaluation Definition */\nexport interface Evaluation {\n  /** Data for evaluation. */\n  data: InputData;\n  /** Evaluation target specifying the model config and parameters */\n  target?: EvaluationTarget;\n  /** Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not need to be unique. */\n  displayName?: string;\n  /** Description of the evaluation. It can be used to store additional information about the evaluation and is mutable. */\n  description?: string;\n  /** Evaluation's tags. Unlike properties, tags are fully mutable. */\n  tags?: Record<string, string>;\n  /** Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. */\n  properties?: Record<string, string>;\n  /** Evaluators to be used for the evaluation. */\n  evaluators: Record<string, EvaluatorConfiguration>;\n}\n\n/** Abstract data class for input data configuration. */\nexport interface InputDataParent {\n  type: string;\n}\n\n/** Data Source for Application Insights. */\nexport interface ApplicationInsightsConfiguration extends InputDataParent {\n  /** LogAnalytic Workspace resourceID associated with ApplicationInsights */\n  resourceId: string;\n  /** Query to fetch the data. */\n  query: string;\n  /** Service name. */\n  serviceName?: string;\n  /** Connection String to connect to ApplicationInsights. */\n  connectionString?: string;\n}\n\n/** Dataset as source for evaluation. */\nexport interface Dataset extends InputDataParent {\n  /** Evaluation input data */\n  id: string;\n}\n\n/** Target for the evaluation process. */\nexport interface EvaluationTarget {\n  /** System message related to the evaluation target. */\n  systemMessage: string;\n  /** Model configuration for the evaluation. */\n  modelConfig: TargetModelConfig;\n  /** A dictionary of parameters for the model. */\n  modelParams?: Record<string, unknown>;\n}\n\n/** Abstract class for model configuration. */\nexport interface TargetModelConfigParent {\n  type: string;\n}\n\n/** Azure OpenAI model configuration. The API version would be selected by the service for querying the model. */\nexport interface AoaiModelConfig extends TargetModelConfigParent {\n  /** Endpoint URL for AOAI model. */\n  azureEndpoint: string;\n  /** API Key for AOAI model. */\n  apiKey: string;\n  /** Deployment name for AOAI model. */\n  azureDeployment: string;\n}\n\n/** MaaS model configuration. The API version would be selected by the service for querying the model. */\nexport interface MaasModelConfig extends TargetModelConfigParent {\n  /** Endpoint URL for MAAS model. */\n  azureEndpoint: string;\n  /** API Key for MAAS model. */\n  apiKey: string;\n}\n\n/** Metadata pertaining to creation and last modification of the resource. */\nexport interface SystemData {}\n\n/** Evaluator Configuration */\nexport interface EvaluatorConfiguration {\n  /** Identifier of the evaluator. */\n  id: string;\n  /** Initialization parameters of the evaluator. */\n  initParams?: Record<string, unknown>;\n  /** Data parameters of the evaluator. */\n  dataMapping?: Record<string, string>;\n}\n\n/** Evaluation Schedule Definition */\nexport interface EvaluationSchedule {\n  /** Data for evaluation. */\n  data: ApplicationInsightsConfiguration;\n  /** Description of the evaluation. It can be used to store additional information about the evaluation and is mutable. */\n  description?: string;\n  /** Evaluation's tags. Unlike properties, tags are fully mutable. */\n  tags?: Record<string, string>;\n  /** Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be removed. */\n  properties?: Record<string, string>;\n  /** Evaluators to be used for the evaluation. */\n  evaluators: Record<string, EvaluatorConfiguration>;\n  /** Trigger for the evaluation. */\n  trigger: Trigger;\n}\n\n/** Abstract data class for input data configuration. */\nexport interface TriggerParent {\n  type: string;\n}\n\n/** Recurrence Trigger Definition */\nexport interface RecurrenceTrigger extends TriggerParent {\n  /**\n   * The frequency to trigger schedule.\n   *\n   * Possible values: \"Month\", \"Week\", \"Day\", \"Hour\", \"Minute\"\n   */\n  frequency: Frequency;\n  /** Specifies schedule interval in conjunction with frequency */\n  interval: number;\n  /** The recurrence schedule. */\n  schedule?: RecurrenceSchedule;\n}\n\n/** RecurrenceSchedule Definition */\nexport interface RecurrenceSchedule {\n  /** List of hours for the schedule. */\n  hours: number[];\n  /** List of minutes for the schedule. */\n  minutes: number[];\n  /** List of days for the schedule. */\n  weekDays?: WeekDays[];\n  /** List of month days for the schedule */\n  monthDays?: number[];\n}\n\n/** Cron Trigger Definition */\nexport interface CronTrigger extends TriggerParent {\n  /** Cron expression for the trigger. */\n  expression: string;\n}\n\n/** An abstract representation of an input tool definition that an agent can use. */\nexport type ToolDefinition =\n  | ToolDefinitionParent\n  | CodeInterpreterToolDefinition\n  | FileSearchToolDefinition\n  | FunctionToolDefinition\n  | BingGroundingToolDefinition\n  | MicrosoftFabricToolDefinition\n  | SharepointToolDefinition\n  | AzureAISearchToolDefinition\n  | OpenApiToolDefinition\n  | AzureFunctionToolDefinition;\n/** authentication details for OpenApiFunctionDefinition */\nexport type OpenApiAuthDetails =\n  | OpenApiAuthDetailsParent\n  | OpenApiAnonymousAuthDetails\n  | OpenApiConnectionAuthDetails\n  | OpenApiManagedAuthDetails;\n/** An abstract representation of a vector store chunking strategy configuration. */\nexport type VectorStoreChunkingStrategyRequest =\n  | VectorStoreChunkingStrategyRequestParent\n  | VectorStoreAutoChunkingStrategyRequest\n  | VectorStoreStaticChunkingStrategyRequest;\n/** Abstract data class for input data configuration. */\nexport type InputData =\n  | InputDataParent\n  | ApplicationInsightsConfiguration\n  | Dataset;\n/** Abstract class for model configuration. */\nexport type TargetModelConfig =\n  | TargetModelConfigParent\n  | AoaiModelConfig\n  | MaasModelConfig;\n/** Abstract data class for input data configuration. */\nexport type Trigger = TriggerParent | RecurrenceTrigger | CronTrigger;\n/** Alias for OpenApiAuthType */\nexport type OpenApiAuthType = string;\n/** Alias for VectorStoreDataSourceAssetType */\nexport type VectorStoreDataSourceAssetType = string;\n/** Alias for AzureAISearchQueryType */\nexport type AzureAISearchQueryType = string;\n/** Alias for AgentsApiResponseFormatMode */\nexport type AgentsApiResponseFormatMode = string;\n/** Alias for ResponseFormat */\nexport type ResponseFormat = string;\n/** Alias for AgentsApiResponseFormatOption */\nexport type AgentsApiResponseFormatOption =\n  | string\n  | AgentsApiResponseFormatMode\n  | AgentsApiResponseFormat\n  | ResponseFormatJsonSchemaType;\n/** Alias for ListSortOrder */\nexport type ListSortOrder = string;\n/** Alias for MessageRole */\nexport type MessageRole = string;\n/** Alias for MessageAttachmentToolDefinition */\nexport type MessageAttachmentToolDefinition =\n  | CodeInterpreterToolDefinition\n  | FileSearchToolDefinition;\n/** Alias for RunAdditionalFieldList */\nexport type RunAdditionalFieldList = string;\n/** Alias for TruncationStrategy */\nexport type TruncationStrategy = string;\n/** Alias for AgentsApiToolChoiceOptionMode */\nexport type AgentsApiToolChoiceOptionMode = string;\n/** Alias for AgentsNamedToolChoiceType */\nexport type AgentsNamedToolChoiceType = string;\n/** Alias for AgentsApiToolChoiceOption */\nexport type AgentsApiToolChoiceOption =\n  | string\n  | AgentsApiToolChoiceOptionMode\n  | AgentsNamedToolChoice;\n/** Alias for FilePurpose */\nexport type FilePurpose = string;\n/** Alias for VectorStoreExpirationPolicyAnchor */\nexport type VectorStoreExpirationPolicyAnchor = string;\n/** Alias for VectorStoreChunkingStrategyRequestType */\nexport type VectorStoreChunkingStrategyRequestType = string;\n/** Alias for VectorStoreFileStatusFilter */\nexport type VectorStoreFileStatusFilter = string;\n/** Alias for ConnectionType */\nexport type ConnectionType = string;\n/** Alias for Frequency */\nexport type Frequency = string;\n/** Alias for WeekDays */\nexport type WeekDays = string;\n"]}
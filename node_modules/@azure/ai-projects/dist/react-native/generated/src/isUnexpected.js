// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
const responseMap = {
    "POST /assistants": ["200"],
    "GET /assistants": ["200"],
    "GET /assistants/{assistantId}": ["200"],
    "POST /assistants/{assistantId}": ["200"],
    "DELETE /assistants/{assistantId}": ["200"],
    "POST /threads": ["200"],
    "GET /threads/{threadId}": ["200"],
    "POST /threads/{threadId}": ["200"],
    "DELETE /threads/{threadId}": ["200"],
    "POST /threads/{threadId}/messages": ["200"],
    "GET /threads/{threadId}/messages": ["200"],
    "GET /threads/{threadId}/messages/{messageId}": ["200"],
    "POST /threads/{threadId}/messages/{messageId}": ["200"],
    "POST /threads/{threadId}/runs": ["200"],
    "GET /threads/{threadId}/runs": ["200"],
    "GET /threads/{threadId}/runs/{runId}": ["200"],
    "POST /threads/{threadId}/runs/{runId}": ["200"],
    "POST /threads/{threadId}/runs/{runId}/submit_tool_outputs": ["200"],
    "POST /threads/{threadId}/runs/{runId}/cancel": ["200"],
    "POST /threads/runs": ["200"],
    "GET /threads/{threadId}/runs/{runId}/steps/{stepId}": ["200"],
    "GET /threads/{threadId}/runs/{runId}/steps": ["200"],
    "GET /files": ["200"],
    "POST /files": ["200"],
    "DELETE /files/{fileId}": ["200"],
    "GET /files/{fileId}": ["200"],
    "GET /files/{fileId}/content": ["200"],
    "GET /vector_stores": ["200"],
    "POST /vector_stores": ["200"],
    "GET /vector_stores/{vectorStoreId}": ["200"],
    "POST /vector_stores/{vectorStoreId}": ["200"],
    "DELETE /vector_stores/{vectorStoreId}": ["200"],
    "GET /vector_stores/{vectorStoreId}/files": ["200"],
    "POST /vector_stores/{vectorStoreId}/files": ["200"],
    "GET /vector_stores/{vectorStoreId}/files/{fileId}": ["200"],
    "DELETE /vector_stores/{vectorStoreId}/files/{fileId}": ["200"],
    "POST /vector_stores/{vectorStoreId}/file_batches": ["200"],
    "GET /vector_stores/{vectorStoreId}/file_batches/{batchId}": ["200"],
    "POST /vector_stores/{vectorStoreId}/file_batches/{batchId}/cancel": ["200"],
    "GET /vector_stores/{vectorStoreId}/file_batches/{batchId}/files": ["200"],
    "GET /": ["200"],
    "GET /connections": ["200"],
    "GET /connections/{connectionName}": ["200"],
    "POST /connections/{connectionName}/listsecrets": ["200"],
    "GET /{appInsightsResourceUrl}": ["200"],
    "GET /evaluations/runs/{id}": ["200"],
    "PATCH /evaluations/runs/{id}": ["200"],
    "POST /evaluations/runs:run": ["201"],
    "GET /evaluations/runs": ["200"],
    "GET /evaluations/schedules/{name}": ["200"],
    "PUT /evaluations/schedules/{name}": ["200", "201"],
    "GET /evaluations/schedules": ["200"],
    "PATCH /evaluations/schedules/{name}/disable": ["204"],
};
export function isUnexpected(response) {
    const lroOriginal = response.headers["x-ms-original-url"];
    const url = new URL(lroOriginal !== null && lroOriginal !== void 0 ? lroOriginal : response.request.url);
    const method = response.request.method;
    let pathDetails = responseMap[`${method} ${url.pathname}`];
    if (!pathDetails) {
        pathDetails = getParametrizedPathSuccess(method, url.pathname);
    }
    return !pathDetails.includes(response.status);
}
function getParametrizedPathSuccess(method, path) {
    var _a, _b, _c, _d;
    const pathParts = path.split("/");
    // Traverse list to match the longest candidate
    // matchedLen: the length of candidate path
    // matchedValue: the matched status code array
    let matchedLen = -1, matchedValue = [];
    // Iterate the responseMap to find a match
    for (const [key, value] of Object.entries(responseMap)) {
        // Extracting the path from the map key which is in format
        // GET /path/foo
        if (!key.startsWith(method)) {
            continue;
        }
        const candidatePath = getPathFromMapKey(key);
        // Get each part of the url path
        const candidateParts = candidatePath.split("/");
        // track if we have found a match to return the values found.
        let found = true;
        for (let i = candidateParts.length - 1, j = pathParts.length - 1; i >= 1 && j >= 1; i--, j--) {
            if (((_a = candidateParts[i]) === null || _a === void 0 ? void 0 : _a.startsWith("{")) &&
                ((_b = candidateParts[i]) === null || _b === void 0 ? void 0 : _b.indexOf("}")) !== -1) {
                const start = candidateParts[i].indexOf("}") + 1, end = (_c = candidateParts[i]) === null || _c === void 0 ? void 0 : _c.length;
                // If the current part of the candidate is a "template" part
                // Try to use the suffix of pattern to match the path
                // {guid} ==> $
                // {guid}:export ==> :export$
                const isMatched = new RegExp(`${(_d = candidateParts[i]) === null || _d === void 0 ? void 0 : _d.slice(start, end)}`).test(pathParts[j] || "");
                if (!isMatched) {
                    found = false;
                    break;
                }
                continue;
            }
            // If the candidate part is not a template and
            // the parts don't match mark the candidate as not found
            // to move on with the next candidate path.
            if (candidateParts[i] !== pathParts[j]) {
                found = false;
                break;
            }
        }
        // We finished evaluating the current candidate parts
        // Update the matched value if and only if we found the longer pattern
        if (found && candidatePath.length > matchedLen) {
            matchedLen = candidatePath.length;
            matchedValue = value;
        }
    }
    return matchedValue;
}
function getPathFromMapKey(mapKey) {
    const pathStart = mapKey.indexOf("/");
    return mapKey.slice(pathStart);
}
//# sourceMappingURL=isUnexpected.js.map
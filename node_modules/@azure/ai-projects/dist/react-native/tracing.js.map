{"version":3,"file":"tracing.js","sourceRoot":"","sources":["../../src/tracing.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  OperationTracingOptions,\n  Resolved,\n  SpanStatusError,\n  TracingSpan,\n} from \"@azure/core-tracing\";\nimport { createTracingClient } from \"@azure/core-tracing\";\nimport { PACKAGE_NAME, SDK_VERSION } from \"./constants.js\";\nimport { getErrorMessage } from \"@azure/core-util\";\nimport { logger } from \"./logger.js\";\n\nexport enum TracingAttributes {\n  GEN_AI_MESSAGE_ID = \"gen_ai.message.id\",\n  GEN_AI_MESSAGE_STATUS = \"gen_ai.message.status\",\n  GEN_AI_THREAD_ID = \"gen_ai.thread.id\",\n  GEN_AI_THREAD_RUN_ID = \"gen_ai.thread.run.id\",\n  GEN_AI_AGENT_ID = \"gen_ai.agent.id\",\n  GEN_AI_AGENT_NAME = \"gen_ai.agent.name\",\n  GEN_AI_AGENT_DESCRIPTION = \"gen_ai.agent.description\",\n  GEN_AI_OPERATION_NAME = \"gen_ai.operation.name\",\n  GEN_AI_THREAD_RUN_STATUS = \"gen_ai.thread.run.status\",\n  GEN_AI_REQUEST_MODEL = \"gen_ai.request.model\",\n  GEN_AI_REQUEST_TEMPERATURE = \"gen_ai.request.temperature\",\n  GEN_AI_REQUEST_TOP_P = \"gen_ai.request.top_p\",\n  GEN_AI_REQUEST_MAX_INPUT_TOKENS = \"gen_ai.request.max_input_tokens\",\n  GEN_AI_REQUEST_MAX_OUTPUT_TOKENS = \"gen_ai.request.max_output_tokens\",\n  GEN_AI_RESPONSE_MODEL = \"gen_ai.response.model\",\n  GEN_AI_SYSTEM = \"gen_ai.system\",\n  SERVER_ADDRESS = \"server.address\",\n  AZ_AI_AGENT_SYSTEM = \"az.ai.agents\",\n  GEN_AI_TOOL_NAME = \"gen_ai.tool.name\",\n  GEN_AI_TOOL_CALL_ID = \"gen_ai.tool.call.id\",\n  GEN_AI_REQUEST_RESPONSE_FORMAT = \"gen_ai.request.response_format\",\n  GEN_AI_USAGE_INPUT_TOKENS = \"gen_ai.usage.input_tokens\",\n  GEN_AI_USAGE_OUTPUT_TOKENS = \"gen_ai.usage.output_tokens\",\n  GEN_AI_SYSTEM_MESSAGE = \"gen_ai.system.message\",\n  GEN_AI_EVENT_CONTENT = \"gen_ai.event.content\",\n  ERROR_TYPE = \"error.type\",\n}\nexport enum TracingOperationName {\n  CREATE_AGENT = \"create_agent\",\n  CREATE_UPDATE_AGENT = \"update_agent\",\n  CREATE_THREAD = \"create_thread\",\n  CREATE_MESSAGE = \"create_message\",\n  CREATE_RUN = \"create_run\",\n  START_THREAD_RUN = \"start_thread_run\",\n  EXECUTE_TOOL = \"execute_tool\",\n  LIST_MESSAGES = \"list_messages\",\n  SUBMIT_TOOL_OUTPUTS = \"submit_tool_outputs\",\n  CREATE_THREAD_RUN = \"create_thread_run\",\n}\n\nexport interface TracingAttributeOptions {\n  operationName?: string;\n  name?: string;\n  description?: string;\n  serverAddress?: string;\n  threadId?: string;\n  agentId?: string;\n  instructions?: string;\n  additional_instructions?: string;\n  runId?: string;\n  runStatus?: string;\n  responseModel?: string;\n  model?: string;\n  temperature?: number;\n  topP?: number;\n  maxPromptTokens?: number;\n  maxCompletionTokens?: number;\n  responseFormat?: string;\n  genAiSystem?: string;\n  messageId?: string;\n  messageStatus?: string;\n  eventContent?: string;\n  usagePromptTokens?: number;\n  usageCompletionTokens?: number;\n}\n\nexport type Span = Omit<TracingSpan, \"end\">;\nexport type OptionsWithTracing = {\n  tracingOptions?: OperationTracingOptions;\n  tracingAttributeOptions?: TracingAttributeOptions;\n};\n\nexport class TracingUtility {\n  private static tracingClient = createTracingClient({\n    namespace: \"Microsoft.CognitiveServices\",\n    packageName: PACKAGE_NAME,\n    packageVersion: SDK_VERSION,\n  });\n\n  static async withSpan<\n    Options extends OptionsWithTracing,\n    Request extends (updatedOptions: Options) => ReturnType<Request>,\n  >(\n    name: string,\n    options: Options,\n    request: Request,\n    startTrace?: (span: Span, updatedOptions: Options) => void,\n    endTrace?: (span: Span, updatedOptions: Options, result: ReturnType<Request>) => void,\n  ): Promise<Resolved<ReturnType<Request>>> {\n    return TracingUtility.tracingClient.withSpan(\n      name,\n      options,\n      async (updatedOptions: Options, span: Span) => {\n        if (startTrace) {\n          try {\n            updatedOptions.tracingAttributeOptions = {\n              ...updatedOptions.tracingAttributeOptions,\n              operationName: name,\n            };\n            startTrace(span, updatedOptions);\n          } catch (e) {\n            logger.warning(\n              `Skipping updating span before request execution due to an error: ${getErrorMessage(e)}`,\n            );\n          }\n        }\n        let result: ReturnType<Request> | undefined;\n        try {\n          result = await request(updatedOptions);\n        } catch (error) {\n          const errorStatus: SpanStatusError = { status: \"error\" };\n          if (error instanceof Error) {\n            errorStatus.error = error;\n          }\n          throw error;\n        }\n\n        if (endTrace && result !== undefined) {\n          try {\n            endTrace(span, updatedOptions, result);\n          } catch (e) {\n            logger.warning(\n              `Skipping updating span after request execution due to an error: ${getErrorMessage(e)}`,\n            );\n          }\n        }\n        return result;\n      },\n      { spanKind: \"client\" },\n    );\n  }\n\n  static updateSpanAttributes(\n    span: Span,\n    attributeOptions: Omit<TracingAttributeOptions, \"operationName\">,\n  ): void {\n    TracingUtility.setAttributes(span, attributeOptions);\n  }\n\n  static setSpanAttributes(\n    span: Span,\n    operationName: string,\n    attributeOptions: TracingAttributeOptions,\n  ): void {\n    attributeOptions.operationName = operationName;\n    TracingUtility.setAttributes(span, attributeOptions);\n  }\n\n  static setAttributes(span: Span, attributeOptions: TracingAttributeOptions): void {\n    if (span.isRecording()) {\n      const {\n        name,\n        operationName,\n        description,\n        serverAddress,\n        threadId,\n        agentId,\n        messageId,\n        runId,\n        model,\n        temperature,\n        topP,\n        maxPromptTokens,\n        maxCompletionTokens,\n        responseFormat,\n        runStatus,\n        responseModel,\n        usageCompletionTokens,\n        usagePromptTokens,\n        genAiSystem = TracingAttributes.AZ_AI_AGENT_SYSTEM,\n      } = attributeOptions;\n\n      if (genAiSystem) {\n        span.setAttribute(TracingAttributes.GEN_AI_SYSTEM, genAiSystem);\n      }\n      if (name) {\n        span.setAttribute(TracingAttributes.GEN_AI_AGENT_NAME, name);\n      }\n      if (description) {\n        span.setAttribute(TracingAttributes.GEN_AI_AGENT_DESCRIPTION, description);\n      }\n\n      if (serverAddress) {\n        span.setAttribute(TracingAttributes.SERVER_ADDRESS, serverAddress);\n      }\n\n      if (threadId) {\n        span.setAttribute(TracingAttributes.GEN_AI_THREAD_ID, threadId);\n      }\n\n      if (agentId) {\n        span.setAttribute(TracingAttributes.GEN_AI_AGENT_ID, agentId);\n      }\n\n      if (runId) {\n        span.setAttribute(TracingAttributes.GEN_AI_THREAD_RUN_ID, runId);\n      }\n\n      if (messageId) {\n        span.setAttribute(TracingAttributes.GEN_AI_MESSAGE_ID, messageId);\n      }\n      if (model) {\n        span.setAttribute(TracingAttributes.GEN_AI_REQUEST_MODEL, model);\n      }\n\n      if (temperature !== null) {\n        span.setAttribute(TracingAttributes.GEN_AI_REQUEST_TEMPERATURE, temperature);\n      }\n\n      if (topP !== null) {\n        span.setAttribute(TracingAttributes.GEN_AI_REQUEST_TOP_P, topP);\n      }\n\n      if (maxPromptTokens !== null) {\n        span.setAttribute(TracingAttributes.GEN_AI_REQUEST_MAX_INPUT_TOKENS, maxPromptTokens);\n      }\n\n      if (maxCompletionTokens !== null) {\n        span.setAttribute(TracingAttributes.GEN_AI_REQUEST_MAX_OUTPUT_TOKENS, maxCompletionTokens);\n      }\n\n      if (responseFormat) {\n        span.setAttribute(TracingAttributes.GEN_AI_REQUEST_RESPONSE_FORMAT, responseFormat);\n      }\n\n      if (runStatus) {\n        span.setAttribute(TracingAttributes.GEN_AI_THREAD_RUN_STATUS, runStatus);\n      }\n\n      if (responseModel) {\n        span.setAttribute(TracingAttributes.GEN_AI_RESPONSE_MODEL, responseModel);\n      }\n\n      if (usagePromptTokens) {\n        span.setAttribute(TracingAttributes.GEN_AI_USAGE_INPUT_TOKENS, usagePromptTokens);\n      }\n\n      if (usageCompletionTokens) {\n        span.setAttribute(TracingAttributes.GEN_AI_USAGE_OUTPUT_TOKENS, usageCompletionTokens);\n      }\n      if (operationName) {\n        span.setAttribute(TracingAttributes.GEN_AI_OPERATION_NAME, operationName);\n      }\n    }\n    return;\n  }\n\n  static addSpanEvent(\n    span: Span,\n    eventName: string,\n    attributeOptions: Omit<TracingAttributeOptions, \"operationName\">,\n  ): void {\n    if (span.isRecording()) {\n      const {\n        threadId,\n        agentId,\n        runId,\n        messageId,\n        eventContent,\n        usageCompletionTokens,\n        usagePromptTokens,\n        messageStatus,\n      } = attributeOptions;\n      const attributes: Record<string, unknown> = {};\n\n      if (eventContent) {\n        attributes[TracingAttributes.GEN_AI_EVENT_CONTENT] = eventContent;\n      }\n\n      if (threadId) {\n        attributes[TracingAttributes.GEN_AI_THREAD_ID] = threadId;\n      }\n\n      if (agentId) {\n        attributes[TracingAttributes.GEN_AI_AGENT_ID] = agentId;\n      }\n\n      if (runId) {\n        attributes[TracingAttributes.GEN_AI_THREAD_RUN_ID] = runId;\n      }\n\n      if (messageId) {\n        attributes[TracingAttributes.GEN_AI_MESSAGE_ID] = messageId;\n      }\n      if (messageStatus) {\n        attributes[TracingAttributes.GEN_AI_MESSAGE_STATUS] = messageStatus;\n      }\n\n      if (usagePromptTokens) {\n        attributes[TracingAttributes.GEN_AI_USAGE_INPUT_TOKENS] = usagePromptTokens;\n      }\n\n      if (usageCompletionTokens) {\n        attributes[TracingAttributes.GEN_AI_USAGE_OUTPUT_TOKENS] = usageCompletionTokens;\n      }\n\n      if (span.addEvent) {\n        span.addEvent(eventName, { attributes });\n      }\n    }\n    return;\n  }\n}\n"]}
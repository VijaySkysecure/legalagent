import { type Client, type StreamableMethod } from "@azure-rest/core-client";
import type { FileDeletionStatusOutput, FileListResponseOutput, OpenAIFileOutput } from "../customization/outputModels.js";
import type { OpenAIPageableListOfThreadRunOutput, ThreadRunOutput, AgentThreadOutput, RunStepOutput, OpenAIPageableListOfRunStepOutput, ThreadMessageOutput, ThreadDeletionStatusOutput, OpenAIPageableListOfThreadMessageOutput, OpenAIPageableListOfVectorStoreOutput, VectorStoreOutput, VectorStoreFileOutput, VectorStoreDeletionStatusOutput, VectorStoreFileDeletionStatusOutput, VectorStoreFileBatchOutput, OpenAIPageableListOfVectorStoreFileOutput, AgentDeletionStatusOutput, AgentOutput, OpenAIPageableListOfAgentOutput } from "../customization/outputModels.js";
import type { FilePurpose } from "../customization/models.js";
import type { AgentRunResponse, CreateRunOptionalParams, GetRunOptionalParams, CancelRunOptionalParams, SubmitToolOutputsToRunOptionalParams, UpdateRunOptionalParams, ListRunQueryOptionalParams, CreateAndRunThreadOptionalParams, CreateAgentThreadOptionalParams, GetAgentThreadOptionalParams, UpdateAgentThreadOptionalParams, DeleteAgentThreadOptionalParams, GetRunStepOptionalParams, CreateMessageOptionalParams, ListMessagesOptionalParams, UpdateMessageOptionalParams, UpdateVectorStoreOptionalParams, DeleteVectorStoreOptionalParams, CreateVectorStoreOptionalParams, CreateVectorStoreFileOptionalParams, ListVectorStoreFilesOptionalParams, GetVectorStoreFileOptionalParams, DeleteVectorStoreFileOptionalParams, CreateVectorStoreFileBatchOptionalParams, GetVectorStoreFileBatchOptionalParams, ListVectorStoreFileBatchFilesOptionalParams, CreateAgentOptionalParams, ListAgentsOptionalParams, GetAgentOptionalParams, UpdateAgentOptionalParams, DeleteFileOptionalParams, GetFileOptionalParams, GetFileContentOptionalParams, ListFilesOptionalParams, UploadFileOptionalParams, CancelVectorStoreFileBatchOptionalParams, DeleteAgentOptionalParams } from "./customModels.js";
import type { ThreadMessageOptions, ToolOutput } from "../customization/models.js";
import type { PollerLike, OperationState } from "@azure/core-lro";
/**
 * Agents Interface Contains operations for creating, listing, updating, and deleting agents, threads, runs, messages, and files.
 */
export interface AgentsOperations {
    /** Creates a new agent. */
    createAgent: (model: string, options?: CreateAgentOptionalParams) => Promise<AgentOutput>;
    /** Gets a list of agents that were previously created. */
    listAgents: (options?: ListAgentsOptionalParams) => Promise<OpenAIPageableListOfAgentOutput>;
    /** Retrieves an existing agent. */
    getAgent: (assistantId: string, options?: GetAgentOptionalParams) => Promise<AgentOutput>;
    /** Modifies an existing agent. */
    updateAgent: (assistantId: string, options: UpdateAgentOptionalParams) => Promise<AgentOutput>;
    /** Deletes an agent. */
    deleteAgent: (assistantId: string, options?: DeleteAgentOptionalParams) => Promise<AgentDeletionStatusOutput>;
    /** Creates a new thread. Threads contain messages and can be run by agents. */
    createThread: (options?: CreateAgentThreadOptionalParams) => Promise<AgentThreadOutput>;
    /** Gets information about an existing thread. */
    getThread: (threadId: string, options?: GetAgentThreadOptionalParams) => Promise<AgentThreadOutput>;
    /** Modifies an existing thread. */
    updateThread: (threadId: string, options?: UpdateAgentThreadOptionalParams) => Promise<AgentThreadOutput>;
    /** Deletes an existing thread. */
    deleteThread: (threadId: string, options?: DeleteAgentThreadOptionalParams) => Promise<ThreadDeletionStatusOutput>;
    /** Creates and starts a new run of the specified thread using the specified agent. */
    createRun: (threadId: string, assistantId: string, options?: CreateRunOptionalParams) => AgentRunResponse;
    /** Gets a list of runs for a specified thread. */
    listRuns: (threadId: string, options?: ListRunQueryOptionalParams) => Promise<OpenAIPageableListOfThreadRunOutput>;
    /** Gets an existing run from an existing thread. */
    getRun: (threadId: string, runId: string, options?: GetRunOptionalParams) => Promise<ThreadRunOutput>;
    /** Modifies an existing thread run. */
    updateRun: (threadId: string, runId: string, options?: UpdateRunOptionalParams) => Promise<ThreadRunOutput>;
    /** Submits outputs from tools as requested by tool calls in a run. Runs that need submitted tool outputs will have a status of 'requires_action' with a required_action.type of 'submit_tool_outputs'. */
    submitToolOutputsToRun: (threadId: string, runId: string, toolOutputs: Array<ToolOutput>, options?: SubmitToolOutputsToRunOptionalParams) => AgentRunResponse;
    /** Cancels a run of an in progress thread. */
    cancelRun: (threadId: string, runId: string, options?: CancelRunOptionalParams) => Promise<ThreadRunOutput>;
    /** Creates a new thread and immediately starts a run of that thread. */
    createThreadAndRun: (assistantId: string, options?: CreateAndRunThreadOptionalParams) => AgentRunResponse;
    /** Creates a new message on a specified thread. */
    createMessage: (threadId: string, messageOptions: ThreadMessageOptions, options?: CreateMessageOptionalParams) => Promise<ThreadMessageOutput>;
    /** Gets a list of messages that exist on a thread. */
    listMessages: (threadId: string, options?: ListMessagesOptionalParams) => Promise<OpenAIPageableListOfThreadMessageOutput>;
    /** Modifies an existing message on an existing thread. */
    updateMessage: (threadId: string, messageId: string, options?: UpdateMessageOptionalParams) => Promise<ThreadMessageOutput>;
    /** Gets a list of previously uploaded files. */
    listFiles: (options?: ListFilesOptionalParams) => Promise<FileListResponseOutput>;
    /** Uploads a file for use by other operations. */
    uploadFile: (data: ReadableStream | NodeJS.ReadableStream, purpose: FilePurpose, options?: UploadFileOptionalParams) => PollerLike<OperationState<OpenAIFileOutput>, OpenAIFileOutput>;
    /** Uploads a file for use by other operations. */
    uploadFileAndPoll: (data: ReadableStream | NodeJS.ReadableStream, purpose: FilePurpose, options?: UploadFileOptionalParams) => PollerLike<OperationState<OpenAIFileOutput>, OpenAIFileOutput>;
    /** Delete a previously uploaded file. */
    deleteFile: (fileId: string, options?: DeleteFileOptionalParams) => Promise<FileDeletionStatusOutput>;
    /** Returns information about a specific file. Does not retrieve file content. */
    getFile: (fileId: string, options?: GetFileOptionalParams) => Promise<OpenAIFileOutput>;
    /** Returns the content of a specific file. */
    getFileContent: (fileId: string, options?: GetFileContentOptionalParams) => StreamableMethod<string | Uint8Array>;
    /** Returns a list of vector stores. */
    listVectorStores: (options?: DeleteVectorStoreOptionalParams) => Promise<OpenAIPageableListOfVectorStoreOutput>;
    /** Creates a vector store. */
    createVectorStore: (options?: CreateVectorStoreOptionalParams) => PollerLike<OperationState<VectorStoreOutput>, VectorStoreOutput>;
    /** Returns the vector store object object matching the specific ID. */
    getVectorStore: (vectorStoreId: string, options?: DeleteVectorStoreOptionalParams) => Promise<VectorStoreOutput>;
    /** The ID of the vector store to modify. */
    modifyVectorStore: (vectorStoreId: string, options?: UpdateVectorStoreOptionalParams) => Promise<VectorStoreOutput>;
    /** Deletes the vector store object matching the specified ID. */
    deleteVectorStore: (vectorStoreId: string, options?: DeleteVectorStoreOptionalParams) => Promise<VectorStoreDeletionStatusOutput>;
    /** Create vector store and poll. */
    createVectorStoreAndPoll: (options?: CreateVectorStoreOptionalParams) => PollerLike<OperationState<VectorStoreOutput>, VectorStoreOutput>;
    /** Create a vector store file by attching a file to a vector store. */
    createVectorStoreFile: (vectorStoreId: string, options?: CreateVectorStoreFileOptionalParams) => PollerLike<OperationState<VectorStoreFileOutput>, VectorStoreFileOutput>;
    /** Retrieves a vector store file. */
    getVectorStoreFile: (vectorStoreId: string, fileId: string, options?: GetVectorStoreFileOptionalParams) => Promise<VectorStoreFileOutput>;
    /** Returns a list of vector store files. */
    listVectorStoreFiles: (vectorStoreId: string, options?: ListVectorStoreFilesOptionalParams) => Promise<OpenAIPageableListOfVectorStoreFileOutput>;
    /**
     * Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted.
     * To delete the file, use the delete file endpoint.
     */
    deleteVectorStoreFile: (vectorStoreId: string, fileId: string, options?: DeleteVectorStoreFileOptionalParams) => Promise<VectorStoreFileDeletionStatusOutput>;
    /** Create a vector store file by attaching a file to a vector store and poll. */
    createVectorStoreFileAndPoll: (vectorStoreId: string, options?: CreateVectorStoreFileOptionalParams) => PollerLike<OperationState<VectorStoreFileOutput>, VectorStoreFileOutput>;
    /** Create a vector store file batch. */
    createVectorStoreFileBatch: (vectorStoreId: string, options?: CreateVectorStoreFileBatchOptionalParams) => PollerLike<OperationState<VectorStoreFileBatchOutput>, VectorStoreFileBatchOutput>;
    /** Retrieve a vector store file batch. */
    getVectorStoreFileBatch: (vectorStoreId: string, batchId: string, options?: GetVectorStoreFileBatchOptionalParams) => Promise<VectorStoreFileBatchOutput>;
    /** Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. */
    cancelVectorStoreFileBatch: (vectorStoreId: string, batchId: string, options?: CancelVectorStoreFileBatchOptionalParams) => Promise<VectorStoreFileBatchOutput>;
    /** Returns a list of vector store files in a batch. */
    listVectorStoreFileBatchFiles: (vectorStoreId: string, batchId: string, options?: ListVectorStoreFileBatchFilesOptionalParams) => Promise<OpenAIPageableListOfVectorStoreFileOutput>;
    /** Create a vector store file batch and poll. */
    createVectorStoreFileBatchAndPoll: (vectorStoreId: string, options?: CreateVectorStoreFileBatchOptionalParams) => PollerLike<OperationState<VectorStoreFileBatchOutput>, VectorStoreFileBatchOutput>;
    /** Gets a single run step from a thread run. */
    getRunStep: (threadId: string, runId: string, stepId: string, options?: GetRunStepOptionalParams) => Promise<RunStepOutput>;
    /** Gets a list of run steps from a thread run. */
    listRunSteps: (threadId: string, runId: string, options?: ListRunQueryOptionalParams) => Promise<OpenAIPageableListOfRunStepOutput>;
}
export declare function getAgentsOperations(context: Client): AgentsOperations;
//# sourceMappingURL=index.d.ts.map
{"version":3,"file":"messagesTrace.js","sourceRoot":"","sources":["../../../src/agents/messagesTrace.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAOlC,OAAO,EAAE,iBAAiB,EAAE,cAAc,EAAE,oBAAoB,EAAE,MAAM,eAAe,CAAC;AAKxF,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAGpD,MAAM,UAAU,uBAAuB,CACrC,IAAU,EACV,QAAgB,EAChB,OAAgC;IAEhC,cAAc,CAAC,iBAAiB,CAAC,IAAI,EAAE,oBAAoB,CAAC,cAAc,EAAE;QAC1E,QAAQ,EAAE,QAAQ;QAClB,WAAW,EAAE,iBAAiB,CAAC,kBAAkB;KAClD,CAAC,CAAC;IACH,eAAe,CAAC,IAAI,kCAAO,OAAO,CAAC,IAAI,KAAE,SAAS,EAAE,QAAQ,IAAG,CAAC;AAClE,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,qBAAqB,CACzC,IAAU,EACV,QAAiC,EACjC,MAAmE;IAEnE,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC;IACpC,cAAc,CAAC,oBAAoB,CAAC,IAAI,EAAE,EAAE,SAAS,EAAE,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC;AAC9E,CAAC;AAED,MAAM,UAAU,sBAAsB,CACpC,IAAU,EACV,QAAgB,EAChB,QAAgC;IAEhC,cAAc,CAAC,iBAAiB,CAAC,IAAI,EAAE,oBAAoB,CAAC,aAAa,EAAE;QACzE,QAAQ,EAAE,QAAQ;QAClB,WAAW,EAAE,iBAAiB,CAAC,kBAAkB;KAClD,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,oBAAoB,CACxC,IAAU,EACV,QAAgC,EAChC,MAAwD;;IAExD,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC;IACpC,MAAA,cAAc,CAAC,IAAI,0CAAE,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QACvC,eAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  CreateMessageParameters,\n  ListMessagesParameters,\n} from \"../generated/src/parameters.js\";\nimport type { Span } from \"../tracing.js\";\nimport { TracingAttributes, TracingUtility, TracingOperationName } from \"../tracing.js\";\nimport type {\n  OpenAIPageableListOfThreadMessageOutput,\n  ThreadMessageOutput as GeneratedThreadMessageOutput,\n} from \"../generated/src/outputModels.js\";\nimport { addMessageEvent } from \"./traceUtility.js\";\nimport type { ThreadMessageOutput } from \"../customization/outputModels.js\";\n\nexport function traceStartCreateMessage(\n  span: Span,\n  threadId: string,\n  options: CreateMessageParameters,\n): void {\n  TracingUtility.setSpanAttributes(span, TracingOperationName.CREATE_MESSAGE, {\n    threadId: threadId,\n    genAiSystem: TracingAttributes.AZ_AI_AGENT_SYSTEM,\n  });\n  addMessageEvent(span, { ...options.body, thread_id: threadId });\n}\n\nexport async function traceEndCreateMessage(\n  span: Span,\n  _options: CreateMessageParameters,\n  result: Promise<ThreadMessageOutput | GeneratedThreadMessageOutput>,\n): Promise<void> {\n  const resolvedResult = await result;\n  TracingUtility.updateSpanAttributes(span, { messageId: resolvedResult.id });\n}\n\nexport function traceStartListMessages(\n  span: Span,\n  threadId: string,\n  _options: ListMessagesParameters,\n): void {\n  TracingUtility.setSpanAttributes(span, TracingOperationName.LIST_MESSAGES, {\n    threadId: threadId,\n    genAiSystem: TracingAttributes.AZ_AI_AGENT_SYSTEM,\n  });\n}\n\nexport async function traceEndListMessages(\n  span: Span,\n  _options: ListMessagesParameters,\n  result: Promise<OpenAIPageableListOfThreadMessageOutput>,\n): Promise<void> {\n  const resolvedResult = await result;\n  resolvedResult.data?.forEach((message) => {\n    addMessageEvent(span, message);\n  });\n}\n"]}
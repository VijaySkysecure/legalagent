// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { operationOptionsToRequestParameters } from "@azure-rest/core-client";
import * as ConverterFromWire from "../customization/convertOutputModelsFromWire.js";
import { validateLimit, validateOrder, validateRunId, validateThreadId, } from "./inputValidations.js";
import { convertToListQueryParameters } from "../customization/convertParametersToWire.js";
import { createOpenAIError } from "./openAIError.js";
const expectedStatuses = ["200"];
/** Gets a single run step from a thread run. */
export async function getRunStep(context, threadId, runId, stepId, options = {}) {
    validateThreadId(threadId);
    validateRunId(runId);
    validateStepId(stepId);
    const getOptions = Object.assign({}, operationOptionsToRequestParameters(options));
    const result = await context
        .path("/threads/{threadId}/runs/{runId}/steps/{stepId}", threadId, runId, stepId)
        .get(getOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw createOpenAIError(result);
    }
    return ConverterFromWire.convertRunStepOutput(result.body);
}
/** Gets a list of run steps from a thread run. */
export async function listRunSteps(context, threadId, runId, options = {}) {
    const listOptions = Object.assign(Object.assign({}, operationOptionsToRequestParameters(options)), { queryParameters: convertToListQueryParameters(options) });
    validateListRunsParameters(threadId, runId, listOptions);
    const result = await context
        .path("/threads/{threadId}/runs/{runId}/steps", threadId, runId)
        .get(listOptions);
    if (!expectedStatuses.includes(result.status)) {
        throw createOpenAIError(result);
    }
    return ConverterFromWire.convertOpenAIPageableListOfRunStepOutput(result.body);
}
function validateStepId(stepId) {
    if (!stepId) {
        throw new Error("Step ID is required");
    }
}
function validateListRunsParameters(thread_id, runId, options) {
    var _a, _b, _c;
    validateThreadId(thread_id);
    validateRunId(runId);
    if (((_a = options === null || options === void 0 ? void 0 : options.queryParameters) === null || _a === void 0 ? void 0 : _a.limit) &&
        (options.queryParameters.limit < 1 || options.queryParameters.limit > 100)) {
        throw new Error("Limit must be between 1 and 100");
    }
    if ((_b = options === null || options === void 0 ? void 0 : options.queryParameters) === null || _b === void 0 ? void 0 : _b.limit) {
        validateLimit(options.queryParameters.limit);
    }
    if ((_c = options === null || options === void 0 ? void 0 : options.queryParameters) === null || _c === void 0 ? void 0 : _c.order) {
        validateOrder(options.queryParameters.order);
    }
}
//# sourceMappingURL=runSteps.js.map
{"version":3,"file":"assistantsTrace.js","sourceRoot":"","sources":["../../../src/agents/assistantsTrace.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EAAE,cAAc,EAAE,oBAAoB,EAAE,MAAM,eAAe,CAAC;AAErE,OAAO,EACL,oBAAoB,EACpB,sBAAsB,EACtB,yBAAyB,GAC1B,MAAM,mBAAmB,CAAC;AAE3B;;;;GAIG;AACH,MAAM,UAAU,6BAA6B,CAC3C,IAAU,EACV,OAAsD,EACtD,OAAgB;;IAEhB,MAAM,UAAU,GAA4B;QAC1C,aAAa,EAAE,oBAAoB,CAAC,YAAY;QAChD,IAAI,EAAE,MAAA,OAAO,CAAC,IAAI,CAAC,IAAI,mCAAI,SAAS;QACpC,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK;QACzB,WAAW,EAAE,MAAA,OAAO,CAAC,IAAI,CAAC,WAAW,mCAAI,SAAS;QAClD,YAAY,EAAE,MAAA,OAAO,CAAC,IAAI,CAAC,YAAY,mCAAI,SAAS;QACpD,IAAI,EAAE,MAAA,OAAO,CAAC,IAAI,CAAC,KAAK,mCAAI,SAAS;QACrC,WAAW,EAAE,MAAA,OAAO,CAAC,IAAI,CAAC,WAAW,mCAAI,SAAS;QAClD,cAAc,EAAE,sBAAsB,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC;KACrE,CAAC;IACF,IAAI,OAAO,EAAE,CAAC;QACZ,UAAU,CAAC,aAAa,GAAG,oBAAoB,CAAC,mBAAmB,CAAC;QACpE,UAAU,CAAC,OAAO,GAAG,OAAO,CAAC;IAC/B,CAAC;IACD,cAAc,CAAC,iBAAiB,CAC9B,IAAI,EACJ,oBAAoB,CAAC,YAAY,EACjC,yBAAyB,CAAC,UAAU,CAAC,CACtC,CAAC;IACF,oBAAoB,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AAC3C,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,2BAA2B,CAC/C,IAAU,EACV,QAAuD,EACvD,MAA4B;IAE5B,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC;IACpC,MAAM,UAAU,GAA4B;QAC1C,OAAO,EAAE,cAAc,CAAC,EAAE;KAC3B,CAAC;IACF,cAAc,CAAC,oBAAoB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;AACxD,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AgentOutput } from \"../generated/src/outputModels.js\";\nimport type { TracingAttributeOptions, Span } from \"../tracing.js\";\nimport { TracingUtility, TracingOperationName } from \"../tracing.js\";\nimport type { CreateAgentParameters, UpdateAgentParameters } from \"../generated/src/parameters.js\";\nimport {\n  addInstructionsEvent,\n  formatAgentApiResponse,\n  UpdateWithAgentAttributes,\n} from \"./traceUtility.js\";\n\n/**\n * Traces the start of creating or updating an agent.\n * @param span - The span to trace.\n * @param options - The options for creating an agent.\n */\nexport function traceStartCreateOrUpdateAgent(\n  span: Span,\n  options: CreateAgentParameters | UpdateAgentParameters,\n  agentId?: string,\n): void {\n  const attributes: TracingAttributeOptions = {\n    operationName: TracingOperationName.CREATE_AGENT,\n    name: options.body.name ?? undefined,\n    model: options.body.model,\n    description: options.body.description ?? undefined,\n    instructions: options.body.instructions ?? undefined,\n    topP: options.body.top_p ?? undefined,\n    temperature: options.body.temperature ?? undefined,\n    responseFormat: formatAgentApiResponse(options.body.response_format),\n  };\n  if (agentId) {\n    attributes.operationName = TracingOperationName.CREATE_UPDATE_AGENT;\n    attributes.agentId = agentId;\n  }\n  TracingUtility.setSpanAttributes(\n    span,\n    TracingOperationName.CREATE_AGENT,\n    UpdateWithAgentAttributes(attributes),\n  );\n  addInstructionsEvent(span, options.body);\n}\n\n/**\n * Traces the end of creating an agent.\n * @param span - The span to trace.\n * @param _options - The options for creating an agent.\n * @param result - The result of creating an agent.\n */\nexport async function traceEndCreateOrUpdateAgent(\n  span: Span,\n  _options: CreateAgentParameters | UpdateAgentParameters,\n  result: Promise<AgentOutput>,\n): Promise<void> {\n  const resolvedResult = await result;\n  const attributes: TracingAttributeOptions = {\n    agentId: resolvedResult.id,\n  };\n  TracingUtility.updateSpanAttributes(span, attributes);\n}\n"]}
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { createAgent, deleteAgent, getAgent, listAgents, updateAgent } from "./assistants.js";
import { deleteFile, getFile, getFileContent, listFiles, uploadFile, uploadFileAndPoll, } from "./files.js";
import { createThread, deleteThread, getThread, updateThread } from "./threads.js";
import { cancelRun, createRun, createThreadAndRun, getRun, listRuns, submitToolOutputsToRun, updateRun, } from "./runs.js";
import { createMessage, listMessages, updateMessage } from "./messages.js";
import { createVectorStore, createVectorStoreAndPoll, deleteVectorStore, getVectorStore, listVectorStores, modifyVectorStore, } from "./vectorStores.js";
import { getRunStep, listRunSteps } from "./runSteps.js";
import { createVectorStoreFile, createVectorStoreFileAndPoll, deleteVectorStoreFile, getVectorStoreFile, listVectorStoreFiles, } from "./vectorStoresFiles.js";
import { cancelVectorStoreFileBatch, createVectorStoreFileBatch, createVectorStoreFileBatchAndPoll, getVectorStoreFileBatch, listVectorStoreFileBatchFiles, } from "./vectorStoresFileBatches.js";
function getAgents(context) {
    return {
        createAgent: (model, options) => createAgent(context, model, options),
        listAgents: (options) => listAgents(context, options),
        getAgent: (assistantId, options) => getAgent(context, assistantId, options),
        updateAgent: (assistantId, options) => updateAgent(context, assistantId, options),
        deleteAgent: (assistantId, options) => deleteAgent(context, assistantId, options),
        createThread: (options) => createThread(context, options),
        getThread: (threadId, options) => getThread(context, threadId, options),
        updateThread: (threadId, options) => updateThread(context, threadId, options),
        deleteThread: (threadId, options) => deleteThread(context, threadId, options),
        createRun: (threadId, assistantId, options) => createRun(context, threadId, assistantId, options !== null && options !== void 0 ? options : {}),
        listRuns: (threadId, options) => listRuns(context, threadId, options !== null && options !== void 0 ? options : {}),
        getRun: (threadId, runId, options) => getRun(context, threadId, runId, options),
        updateRun: (threadId, runId, options) => updateRun(context, threadId, runId, options),
        submitToolOutputsToRun: (threadId, runId, toolOutputs, options) => submitToolOutputsToRun(context, threadId, runId, toolOutputs, options),
        cancelRun: (threadId, runId, options) => cancelRun(context, threadId, runId, options),
        createThreadAndRun: (assistantId, options) => createThreadAndRun(context, assistantId, options !== null && options !== void 0 ? options : {}),
        createMessage: (threadId, messageOptions, options) => createMessage(context, threadId, messageOptions, options),
        listMessages: (threadId, options) => listMessages(context, threadId, options),
        updateMessage: (threadId, messageId, options) => updateMessage(context, threadId, messageId, options),
        listFiles: (options) => listFiles(context, options),
        uploadFile: (content, purpose, options) => uploadFile(context, content, purpose, options),
        uploadFileAndPoll: (content, purpose, options) => uploadFileAndPoll(context, content, purpose, options),
        deleteFile: (fileId, options) => deleteFile(context, fileId, options),
        getFile: (fileId, options) => getFile(context, fileId, options),
        getFileContent: (fileId, options) => getFileContent(context, fileId, options),
        listVectorStores: (options) => listVectorStores(context, options),
        createVectorStore: (options) => createVectorStore(context, options),
        getVectorStore: (vectorStoreId, options) => getVectorStore(context, vectorStoreId, options),
        modifyVectorStore: (vectorStoreId, options) => modifyVectorStore(context, vectorStoreId, options),
        deleteVectorStore: (vectorStoreId, options) => deleteVectorStore(context, vectorStoreId, options),
        createVectorStoreAndPoll: (options) => createVectorStoreAndPoll(context, options),
        createVectorStoreFile: (vectorStoreId, options) => createVectorStoreFile(context, vectorStoreId, options),
        getVectorStoreFile: (vectorStoreId, fileId, options) => getVectorStoreFile(context, vectorStoreId, fileId, options),
        listVectorStoreFiles: (vectorStoreId, options) => listVectorStoreFiles(context, vectorStoreId, options),
        deleteVectorStoreFile: (vectorStoreId, fileId, options) => deleteVectorStoreFile(context, vectorStoreId, fileId, options),
        createVectorStoreFileAndPoll: (vectorStoreId, options) => createVectorStoreFileAndPoll(context, vectorStoreId, options),
        createVectorStoreFileBatch: (vectorStoreId, options) => createVectorStoreFileBatch(context, vectorStoreId, options),
        getVectorStoreFileBatch: (vectorStoreId, batchId, options) => getVectorStoreFileBatch(context, vectorStoreId, batchId, options),
        cancelVectorStoreFileBatch: (vectorStoreId, batchId, options) => cancelVectorStoreFileBatch(context, vectorStoreId, batchId, options),
        listVectorStoreFileBatchFiles: (vectorStoreId, batchId, options) => listVectorStoreFileBatchFiles(context, vectorStoreId, batchId, options),
        createVectorStoreFileBatchAndPoll: (vectorStoreId, options) => createVectorStoreFileBatchAndPoll(context, vectorStoreId, options),
        getRunStep: (threadId, runId, stepId, options) => getRunStep(context, threadId, runId, stepId, options),
        listRunSteps: (threadId, runId, options) => listRunSteps(context, threadId, runId, options),
    };
}
export function getAgentsOperations(context) {
    return Object.assign({}, getAgents(context));
}
//# sourceMappingURL=index.js.map
{"version":3,"file":"openAIError.js","sourceRoot":"","sources":["../../../src/agents/openAIError.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAC;AAE1D,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AAOtD,MAAM,OAAO,WAAY,SAAQ,SAAS;IAIxC,YAAY,OAAe,EAAE,qBAAyC,EAAE;QACtE,KAAK,CAAC,OAAO,EAAE,kBAAkB,CAAC,CAAC;QACnC,IAAI,CAAC,KAAK,GAAG,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,KAAK,CAAC;QACvC,IAAI,CAAC,IAAI,GAAG,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,IAAI,CAAC;IACvC,CAAC;CACF;AAED,MAAM,UAAU,iBAAiB,CAAC,QAA+B;IAC/D,MAAM,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,IAAI,QAAQ,CAAC,IAAI,CAAC;IAC3D,IAAI,SAAoB,CAAC;IACzB,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE,CAAC;QACtC,SAAS,GAAG,eAAe,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC;SAAM,CAAC;QACN,SAAS,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED,OAAO,IAAI,WAAW,CAAC,SAAS,CAAC,OAAO,EAAE;QACxC,UAAU,EAAE,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,UAAU;QACjC,IAAI,EAAE,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,IAAI;QACrB,OAAO,EAAE,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,OAAO;QAC3B,QAAQ,EAAE,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,QAAQ;QAC7B,KAAK,EAAE,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,KAAK;QAC3B,IAAI,EAAE,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,IAAI;KAC1B,CAAC,CAAC;AACL,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PathUncheckedResponse } from \"@azure-rest/core-client\";\nimport { createRestError } from \"@azure-rest/core-client\";\nimport type { RestErrorOptions } from \"@azure/core-rest-pipeline\";\nimport { RestError } from \"@azure/core-rest-pipeline\";\n\ninterface OpenAIErrorOptions extends RestErrorOptions {\n  param?: string;\n  type?: string;\n}\n\nexport class OpenAIError extends RestError {\n  readonly param?: string;\n  readonly type?: string;\n\n  constructor(message: string, OpenAIErrorOptions: OpenAIErrorOptions = {}) {\n    super(message, OpenAIErrorOptions);\n    this.param = OpenAIErrorOptions?.param;\n    this.type = OpenAIErrorOptions?.type;\n  }\n}\n\nexport function createOpenAIError(response: PathUncheckedResponse): OpenAIError {\n  const internalError = response.body.error || response.body;\n  let restError: RestError;\n  if (typeof internalError === \"string\") {\n    restError = createRestError(internalError, response);\n  } else {\n    restError = createRestError(response);\n  }\n\n  return new OpenAIError(restError.message, {\n    statusCode: restError?.statusCode,\n    code: restError?.code,\n    request: restError?.request,\n    response: restError?.response,\n    param: internalError?.param,\n    type: internalError?.type,\n  });\n}\n"]}
{"version":3,"file":"telemetry.js","sourceRoot":"","sources":["../../../src/telemetry/telemetry.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAC;AAG1D,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;AAUjC,MAAM,gBAAgB,GAAgE;IACpF,sBAAsB,EAAE,KAAK;IAC7B,gBAAgB,EAAE,SAAS;CAC5B,CAAC;AAEF;;;GAGG;AACH,MAAM,UAAU,sBAAsB,CAAC,OAAyB;IAC9D,gBAAgB,CAAC,sBAAsB,GAAG,OAAO,CAAC,sBAAsB,CAAC;AAC3E,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,mBAAmB;IACjC,OAAO,eAAe,CAAC,gBAAgB,CAAC,CAAC;AAC3C,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,qBAAqB;IACnC,gBAAgB,CAAC,gBAAgB,GAAG,SAAS,CAAC;IAC9C,gBAAgB,CAAC,sBAAsB,GAAG,KAAK,CAAC;AAClD,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,mBAAmB,CACvC,OAAe,EACf,UAAyC;IAEzC,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC;QACvC,MAAM,SAAS,GAAG,MAAM,UAAU,CAAC,YAAY,EAAE,CAAC;QAClD,IAAI,SAAS,CAAC,UAAU,CAAC,mBAAmB,EAAE,CAAC;YAC7C,MAAM,MAAM,GAAG,MAAM,OAAO;iBACzB,IAAI,CAAC,2BAA2B,EAAE,SAAS,CAAC,UAAU,CAAC,mBAAmB,CAAC;iBAC3E,GAAG,CAAC,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;YAClC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC9C,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;YAChC,CAAC;YACD,gBAAgB,CAAC,gBAAgB,GAC/B,MAAM,CAAC,IACR,CAAC,UAAU,CAAC,gBAAgB,CAAC;QAChC,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;QACvE,CAAC;IACH,CAAC;IACD,OAAO,gBAAgB,CAAC,gBAA0B,CAAC;AACrD,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { GetAppInsightsResponseOutput } from \"../customization/outputModels.js\";\nimport type { Client } from \"@azure-rest/core-client\";\nimport { createRestError } from \"@azure-rest/core-client\";\nimport type { ConnectionsInternalOperations } from \"../connections/internalModels.js\";\n\nconst expectedStatuses = [\"200\"];\n\n/**\n * Telemetry options\n */\nexport interface TelemetryOptions {\n  /** Enable content recording */\n  enableContentRecording: boolean;\n}\n\nconst telemetryOptions: TelemetryOptions & { connectionString: string | undefined } = {\n  enableContentRecording: false,\n  connectionString: undefined,\n};\n\n/**\n * Update the telemetry settings\n * @param options - The telemetry options\n */\nexport function updateTelemetryOptions(options: TelemetryOptions): void {\n  telemetryOptions.enableContentRecording = options.enableContentRecording;\n}\n\n/**\n * Get the telemetry options\n * @returns The telemetry options\n */\nexport function getTelemetryOptions(): TelemetryOptions {\n  return structuredClone(telemetryOptions);\n}\n\n/**\n * Reset the telemetry options\n */\nexport function resetTelemetryOptions(): void {\n  telemetryOptions.connectionString = undefined;\n  telemetryOptions.enableContentRecording = false;\n}\n\n/**\n * Get the appinsights connection string confired in the workspace\n * @param connection - get the connection string\n * @returns The telemetry connection string\n */\nexport async function getConnectionString(\n  context: Client,\n  connection: ConnectionsInternalOperations,\n): Promise<string> {\n  if (!telemetryOptions.connectionString) {\n    const workspace = await connection.getWorkspace();\n    if (workspace.properties.applicationInsights) {\n      const result = await context\n        .path(\"/{appInsightsResourceUrl}\", workspace.properties.applicationInsights)\n        .get({ skipUrlEncoding: true });\n      if (!expectedStatuses.includes(result.status)) {\n        throw createRestError(result);\n      }\n      telemetryOptions.connectionString = (\n        result.body as GetAppInsightsResponseOutput\n      ).properties.ConnectionString;\n    } else {\n      throw new Error(\"Application Insights connection string not found.\");\n    }\n  }\n  return telemetryOptions.connectionString as string;\n}\n"]}
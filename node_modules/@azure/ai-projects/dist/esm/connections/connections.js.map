{"version":3,"file":"connections.js","sourceRoot":"","sources":["../../../src/connections/connections.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,eAAe,EAAE,mCAAmC,EAAE,MAAM,yBAAyB,CAAC;AAgB/F,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;AAEjC,uEAAuE;AACvE,MAAM,CAAC,KAAK,UAAU,YAAY,CAChC,OAAe,EACf,UAAsC,EAAE;IAExC,MAAM,UAAU,qBACX,mCAAmC,CAAC,OAAO,CAAC,CAChD,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACvD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IACD,OAAO,MAAM,CAAC,IAAI,CAAC;AACrB,CAAC;AAED,gFAAgF;AAChF,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,OAAe,EACf,UAAyC,EAAE;IAE3C,MAAM,WAAW,mCACZ,mCAAmC,CAAC,OAAO,CAAC,KAC/C,eAAe,gDACV,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE,UAAU,EAAE,OAAO,CAAC,UAAU,EAAE,CAAC,GAC1D,CAAC,OAAO,CAAC,QAAQ,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,GACpD,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,IAEpD,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IACnE,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IACD,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;AAC3B,CAAC;AAED,mEAAmE;AACnE,MAAM,CAAC,KAAK,UAAU,aAAa,CACjC,OAAe,EACf,cAAsB,EACtB,UAAuC,EAAE;IAEzC,MAAM,UAAU,qBACX,mCAAmC,CAAC,OAAO,CAAC,CAChD,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,OAAO;SACzB,IAAI,CAAC,+BAA+B,EAAE,cAAc,CAAC;SACrD,GAAG,CAAC,UAAU,CAAC,CAAC;IACnB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IACD,OAAO,MAAM,CAAC,IAAI,CAAC;AACrB,CAAC;AAED,oFAAoF;AACpF,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAC5C,OAAe,EACf,cAAsB,EACtB,UAAkD,EAAE;IAEpD,MAAM,UAAU,mCACX,mCAAmC,CAAC,OAAO,CAAC,KAC/C,IAAI,EAAE;YACJ,OAAO,EAAE,EAAE;SACZ,GACF,CAAC;IACF,MAAM,MAAM,GAAG,MAAM,OAAO;SACzB,IAAI,CAAC,2CAA2C,EAAE,cAAc,CAAC;SACjE,IAAI,CAAC,UAAU,CAAC,CAAC;IACpB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IACD,OAAO,MAAM,CAAC,IAAI,CAAC;AACrB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Client } from \"@azure-rest/core-client\";\nimport { createRestError, operationOptionsToRequestParameters } from \"@azure-rest/core-client\";\nimport type { GetConnectionResponseOutput } from \"./inputOutput.js\";\nimport type {\n  GetWorkspaceParameters,\n  GetConnectionParameters,\n  GetConnectionWithSecretsParameters,\n  ListConnectionsParameters,\n} from \"../customization/parameters.js\";\nimport type {\n  GetConnectionOptionalParams,\n  GetConnectionWithSecretsOptionalParams,\n  GetWorkspaceOptionalParams,\n  ListConnectionsOptionalParams,\n} from \"./customModels.js\";\nimport type { GetWorkspaceResponseOutput } from \"../customization/outputModels.js\";\n\nconst expectedStatuses = [\"200\"];\n\n/** Gets the properties of the specified machine learning workspace. */\nexport async function getWorkspace(\n  context: Client,\n  options: GetWorkspaceOptionalParams = {},\n): Promise<GetWorkspaceResponseOutput> {\n  const getOptions: GetWorkspaceParameters = {\n    ...operationOptionsToRequestParameters(options),\n  };\n  const result = await context.path(\"/\").get(getOptions);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n  return result.body;\n}\n\n/** List the details of all the connections (not including their credentials) */\nexport async function listConnections(\n  context: Client,\n  options: ListConnectionsOptionalParams = {},\n): Promise<Array<GetConnectionResponseOutput>> {\n  const listOptions: ListConnectionsParameters = {\n    ...operationOptionsToRequestParameters(options),\n    queryParameters: {\n      ...(options.includeAll && { includeAll: options.includeAll }),\n      ...(options.category && { category: options.category }),\n      ...(options.target && { target: options.target }),\n    },\n  };\n  const result = await context.path(\"/connections\").get(listOptions);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n  return result.body.value;\n}\n\n/** Get the details of a single connection, without credentials. */\nexport async function getConnection(\n  context: Client,\n  connectionName: string,\n  options: GetConnectionOptionalParams = {},\n): Promise<GetConnectionResponseOutput> {\n  const getOptions: GetConnectionParameters = {\n    ...operationOptionsToRequestParameters(options),\n  };\n  const result = await context\n    .path(\"/connections/{connectionName}\", connectionName)\n    .get(getOptions);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n  return result.body;\n}\n\n/** Get the details of a single connection, including credentials (if available). */\nexport async function getConnectionWithSecrets(\n  context: Client,\n  connectionName: string,\n  options: GetConnectionWithSecretsOptionalParams = {},\n): Promise<GetConnectionResponseOutput> {\n  const getOptions: GetConnectionWithSecretsParameters = {\n    ...operationOptionsToRequestParameters(options),\n    body: {\n      ignored: \"\",\n    },\n  };\n  const result = await context\n    .path(\"/connections/{connectionName}/listsecrets\", connectionName)\n    .post(getOptions);\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n  return result.body;\n}\n"]}